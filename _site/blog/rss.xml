<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>

    <title>MeteorHacks - Unofficial Meteor Research Lab with @arunoda</title>
    <description>Unofficial Meteor Research Lab with @arunoda</description>
    <link>http://localhost:4000</link>
    <language>en</language>
    <copyright>meteorhacks.com</copyright>
    <pubDate>Thu, 24 Sep 2015 00:00:00 +0800</pubDate>
    <lastBuildDate>Thu, 24 Sep 2015 00:00:00 +0800</lastBuildDate>
    <ttl>30</ttl>
    <atom:link href="http://localhost:4000/blog/rss.xml" rel="self" type="application/rss+xml" />

    
    <item>
      <title>Initial Impressions on GraphQL &amp; Relay</title>
      <description>
</description>
      <link>http://localhost:4000/graphql-and-relay</link>
      <guid isPermaLink="true">http://localhost:4000/graphql-and-relay</guid>
      <pubDate>2015-09-24 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Improving The Performance of Blaze - Better Way To Destroy Views</title>
      <description>&lt;p&gt;We all agree that Blaze has decent performance, but it’s not close to React for some reason. But in theory Blaze should be much better than react because Blaze know how to deal with Meteor’s reative data.&lt;/p&gt;

&lt;p&gt;So, I decided to spend time on where Blaze is having issues and how we can improve blaze. In my recent code review, I found three possible way to improve the performance of Blaze.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Better way to destroy views&lt;/li&gt;
  &lt;li&gt;DOM/Template caching&lt;/li&gt;
  &lt;li&gt;Asynchnous DOM rendering&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this article, I’m talking about “destroying views” and why it’s an issue. Unfortunately, implementing a proper fix takes a lot of time and effort. So, that’s not something I can do with my limited time. But, I’ll share a possible solution we can use.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In Blaze View is any kind of UI element. It includes not only Templates but if, with, value lookups and other control elements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;We’ve seen few issues about Blaze’s slowness when working with a large project. Often, the problem was view destruction. I could be able to get a good sense of when I was using Kadira Debug.&lt;/p&gt;

&lt;p&gt;So, I’ve created a &lt;a href=&quot;link to the app&quot;&gt;simple app&lt;/a&gt; to showcase this.&lt;/p&gt;

&lt;p&gt;Let’s have a look at our app:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;the-video&quot; alt=&quot;Demonstrating The App&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you seen on the video, View Destruction is costly. This gets worst with the number of DOM elements/views in your app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/zwUdtEjUHA.png&quot; alt=&quot;View Destruction is Hard&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-issue&quot;&gt;The Issue&lt;/h2&gt;

&lt;p&gt;So, why it’s so hard to destroy views. Let’s have a look at how Blaze destroy views.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Here’s I’m not going to give you extact details, but this is how it works.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s say our top view is destroying. Then, blaze trie&lt;/p&gt;

</description>
      <link>http://localhost:4000/improving-blaze-performance-part-1</link>
      <guid isPermaLink="true">http://localhost:4000/improving-blaze-performance-part-1</guid>
      <pubDate>2015-06-25 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Meteor UI Pattern: Keeping App State on the URL</title>
      <description>&lt;p&gt;Traditionally in the web, the URL is the key component and everything is built around it. Everyone understands the concept of the URL and how it behaves.&lt;/p&gt;

&lt;p&gt;If you’ve forgotten what the URL does, here it is :)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A URL identifies a unique page or some content on the web. Even on a private app like Gmail, the URL plays the same role.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;url-and-single-page-apps-spas&quot;&gt;URL and Single Page Apps (SPAs)&lt;/h2&gt;

&lt;p&gt;After the success of single page apps, it was a bit complex to handle and maintain the URL as content changed. With SPAs, we route and display different views inside the browser. That means that we change the state of the app without reloading the page.&lt;/p&gt;

&lt;p&gt;Because of that, some developers have forgotten to maintain the state in the URL and have created a unique URL for every view. That’s where client side routers and standards like “&lt;a href=&quot;http://diveintohtml5.info/history.html&quot;&gt;push state&lt;/a&gt;” help us to maintain the state of the app inside the URL easily.&lt;/p&gt;

&lt;h2 id=&quot;meteor-and-urls&quot;&gt;Meteor and URLs&lt;/h2&gt;

&lt;p&gt;In this article, I will show you few ways to use URLs to manage the state of Meteor apps. If you think carefully, a URL is a global state manager that just works. I will show you some examples as we go that are based on the &lt;a href=&quot;https://github.com/meteorhacks/flow-router&quot;&gt;flow router&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s discover a few patterns:&lt;/p&gt;

&lt;h3 id=&quot;1-pages&quot;&gt;1. Pages&lt;/h3&gt;

&lt;p&gt;This is a basic use of the router and the classic use case. It’s a set of pages with a unique URL. See the following demo:&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/pAfiHah2e7E&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;1&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;Here’s the code of our router:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;FlowRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/:section/:lesson'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;FlowLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;myapp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is the code for templates. 
(Here we directly render templates using flow layout. In a real app, you would have a complex UI arrangement.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Blaze Template&lt;/strong&gt;
&lt;script src=&quot;https://gist.github.com/arunoda/74a9641220d5020bf566.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Template Helpers&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myapp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;helpers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;pageContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FlowRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;section&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lesson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FlowRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lesson&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
       
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lesson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lesson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-single-view-dynamic-content&quot;&gt;2. Single View, Dynamic Content&lt;/h3&gt;

&lt;p&gt;Here we don’t change the path of the app, but the content is changing dynamically. One good example is &lt;a href=&quot;https://kadira.io/&quot;&gt;Kadira&lt;/a&gt;’s date-time navigation.&lt;/p&gt;

&lt;p&gt;See:&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/wGcLYrU1Vg0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;1&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;In the above example, you are looking at the same set of charts, but the data is changing as you navigate. At any time, you can copy the URL and use it as a permalink to the charts you see on the screen. Here we use a query param to keep the date in the URL.&lt;/p&gt;

&lt;p&gt;This is what happens when the user clicks the prev button:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dateNavigation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;click #prev&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FlowRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getQueryParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'date'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prevDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TimeUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getPrevDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;FlowRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setQueryParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prevDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will change the query string &lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt; to the new one. Here’s our template for one of the charts in the screen:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cpuChart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onCreated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chartData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ReactiveVar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;autorun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FlowRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getQueryParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'date'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'getCPUChartData'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chartData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cpuChart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;helpers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;chartData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chartData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s watching the query params and getting the data according to the current query param. Here, the flow router’s API plays a huge role in efficiently notifying the change of the query param.&lt;/p&gt;

&lt;h3 id=&quot;3-opening-modals&quot;&gt;3. Opening Modals&lt;/h3&gt;

&lt;p&gt;This is also very similar to the previous pattern, but we are using it for a different purpose. Watch the following video:&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/PDqvvGqo3CY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;1&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;When we click on the alerts button, it will open up a new modal window. Rather than opening the modal when the event fires, we set a new query param in the URL, as shown below:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dateNavigation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;click #alertsButton&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;FlowRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setQueryParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;alerts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then we reactively watch that query param inside an autorun. If that query param exists, we’ll show the popup; once it’s closed, we’ll remove the query param.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onRendered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;autorun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FlowRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getQueryParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;alerts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alertsModal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#alertsModal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;alertsModal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;modal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;show&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;alertsModal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hidden.bs.modal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                 &lt;span class=&quot;c1&quot;&gt;// to remove the action query param&lt;/span&gt;
                 &lt;span class=&quot;nx&quot;&gt;FlowRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setQueryParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By using this method, we can reload the page and still be able to  see the modal window.&lt;/p&gt;

&lt;h2 id=&quot;i-think-you-get-the-idea&quot;&gt;I Think You Get the Idea&lt;/h2&gt;

&lt;p&gt;Using URLs, we can easily decouple the actions and states of our app. Most importantly, you can persist states inside the URL. As a result of that, states of your app now become portable. This means that users can copy the URL and share it with others or bookmark it for later use.&lt;/p&gt;

&lt;h3 id=&quot;exceptions&quot;&gt;Exceptions&lt;/h3&gt;

&lt;p&gt;Even though keeping the app state in the URL is very important, it’s not a must. One good example is &lt;a href=&quot;https://inbox.google.com&quot;&gt;Google Inbox&lt;/a&gt;. Watch the following video:&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/qo1tdCxy13Q&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;1&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;Google Inbox does not change the URL when we click on an email. This is not a bug: they did it on purpose.&lt;/p&gt;

&lt;p&gt;In Google Inbox, you can mark emails as done or snooze them. Then, they will be removed from the UI. So, providing a unique URL for each individual email is confusing, because emails could disappear from the app at any time.&lt;/p&gt;

&lt;p&gt;Facebook’s timeline is another example of this scenario.&lt;/p&gt;

&lt;h3 id=&quot;react-flux-vs-the-url&quot;&gt;React Flux vs. the URL&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/flux/docs/overview.html&quot;&gt;React Flux&lt;/a&gt; introduces us a global state manager. I believe they just re-implemented the concept behind the URL.&lt;/p&gt;

&lt;p&gt;You could easily achieve flux’s features by keeping the state in the router. Flow Router helps to achieve this with its fast and carefully designed reactive API.&lt;/p&gt;

&lt;h2 id=&quot;try-flow-router&quot;&gt;Try Flow Router&lt;/h2&gt;

&lt;p&gt;I have mentioned flow router in a couple of places in this article. &lt;a href=&quot;https://github.com/meteorhacks/flow-router&quot;&gt;Flow Router&lt;/a&gt; was just an experiment at MeteorHacks, but it turned into a huge success. Now we are working hard on version 2.0. Version 2.0 basically introduces new APIs and shows more patterns to solve common problems like changing routes based on the user login status.&lt;/p&gt;

&lt;p&gt;The current version is also very stable; it is used on &lt;a href=&quot;https://bulletproofmeteor.com&quot;&gt;BulletProof Meteor&lt;/a&gt; and is used in the next version of &lt;a href=&quot;https://kadira.io&quot;&gt;Kadira&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you haven’t tried it yet, &lt;a href=&quot;https://github.com/meteorhacks/flow-router&quot;&gt;try it&lt;/a&gt; today. It’s very simple and easy to use.&lt;/p&gt;
</description>
      <link>http://localhost:4000/meteor-ui-pattern-keeping-app-state-in-the-url</link>
      <guid isPermaLink="true">http://localhost:4000/meteor-ui-pattern-keeping-app-state-in-the-url</guid>
      <pubDate>2015-05-26 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>MeteorHacks Show - Docker &amp; Meteor feat. Justin from MDG</title>
      <description>&lt;p&gt;Docker is making the history with a lot of tooling and innovations around it. If you are new to Docker, it’s a way to run application with isolation from each other. It’s also a portable way to distribute apps and services. I’ve written an &lt;a href=&quot;https://meteorhacks.com/docker-container-war-and-meteor.html&quot;&gt;article&lt;/a&gt; on Docker and have a look at it.&lt;/p&gt;

&lt;p&gt;So in the next episode of MeteorHacks Show, we will talk about Docker and how we can relate it with Meteor.&lt;/p&gt;

&lt;h3 id=&quot;justin-from-mdg-will-join-with-us&quot;&gt;Justin from MDG will join with us&lt;/h3&gt;

&lt;p&gt;Justin works on &lt;a href=&quot;https://trello.com/c/FMdB7GAu/78-galaxy-managed-meteor-deploy-to-your-own-servers&quot;&gt;Galaxy&lt;/a&gt; at &lt;a href=&quot;https://www.meteor.com/people&quot;&gt;MDG&lt;/a&gt; and he has done a lot of experiments and research with Docker. So, he’s an ideal person for a discussion like this. He’ll be joining with us and he’ll share his views on Docker and how they use Docker at MDG.&lt;/p&gt;

&lt;p&gt;We are going live on &lt;a href=&quot;http://www.worldtimebuddy.com/?qm=1&amp;amp;lid=8,30,2147714,524901&amp;amp;h=8&amp;amp;date=2015-4-6&amp;amp;sln=9-10&quot;&gt;6th May at 9 AM PDT&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.crowdcast.io/e/meteorhacks-show-may-2015&quot;&gt;Click here&lt;/a&gt; to register with the &lt;a href=&quot;https://www.crowdcast.io/e/meteorhacks-show-may-2015&quot;&gt;Webinar&lt;/a&gt; and I bet this will be something awesome.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.crowdcast.io/e/meteorhacks-show-may-2015&quot;&gt;MeteorHacks Show May 2015 - Docker &amp;amp; Meteor feat. Justin from MDG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <link>http://localhost:4000/meteorhacks-show-may-2015-docker-and-meteor</link>
      <guid isPermaLink="true">http://localhost:4000/meteorhacks-show-may-2015-docker-and-meteor</guid>
      <pubDate>2015-04-28 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Meteor for Windows: Getting Started Guide</title>
      <description>&lt;p&gt;Meteor now officially works on Windows and you can feel the taste of Meteor right on your PC. This is a guide made for Windows developers to get started with Meteor.&lt;/p&gt;

&lt;h2 id=&quot;installing-meteor&quot;&gt;Installing Meteor&lt;/h2&gt;

&lt;p&gt;Installing Meteor is pretty simple. &lt;a href=&quot;https://www.meteor.com/install&quot;&gt;Download&lt;/a&gt; it from the Meteor website and install it on your PC.&lt;/p&gt;

&lt;p&gt;Meteor does not need any kind of server like Apache to run these apps. Meteor app itself is the server. So, you don’t need any other dependency.&lt;/p&gt;

&lt;p&gt;After you’ve installed Meteor, you can start playing with Meteor. But, before we start that, I need to make sure we are on the same page.&lt;/p&gt;

&lt;h2 id=&quot;windows-command-prompt-basics&quot;&gt;Windows Command Prompt Basics&lt;/h2&gt;

&lt;p&gt;Meteor run as a command prompt app. So, we need to have some basic knowledge on using the command prompt. But don’t worry, you don’t need master it. You just need to know few simple commands.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you are quite familiar with the Windows command prompt, feel free to skip this section.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Command prompt is an alternative way to interact with your Operating System. It’s a text based interface, sometimes it’s very powerful. First of all we need to open a Windows command prompt. Here’s how to do that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Click on the start menu and search for “cmd”. You’ll get a single result. Run that application. Now you’ve a command prompt&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/BNv2LgXT9l.png&quot; alt=&quot;Windows Terminal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With that we can browser through our file system and invoke commands. In this lesson, we’ll only look at the basic file system navigations. That’s only you need to know about to get started with Meteor.&lt;/p&gt;

&lt;h3 id=&quot;file-system-navigation&quot;&gt;File System Navigation&lt;/h3&gt;

&lt;p&gt;Here are the essential file system navigation commands:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dir&lt;/code&gt; - List all the files and directories in the current location.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd &amp;lt;my-folder-name&amp;gt;&lt;/code&gt; - Enter into the &lt;code class=&quot;highlighter-rouge&quot;&gt;my-folder-name&lt;/code&gt;. This can be a relative path like “my-folder” or a full path like “C:\Users\Administrator\myapps\abc”&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd ..&lt;/code&gt; - Go backwards&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd ..\..&lt;/code&gt; - Go backwards two times. You can go bank as many steps as you need with this pattern.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;E:&lt;/code&gt; - Simply change into a different hard drive or a partition. (Change ‘E’ with your actual drive letter)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir &amp;lt;my-new-folder&amp;gt;&lt;/code&gt; - Create a new folder.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Watch the following video to watch how to use above commands:&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;420&quot; src=&quot;https://www.youtube.com/embed/bZyAsrnJGrc&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;1&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There are better terminals (and terminal emulators) than the Command Prompt. So, let me list few of them:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Windows_PowerShell&quot;&gt;Windows Powershell&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://gooseberrycreative.com/cmder/&quot;&gt;cmder&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://code.google.com/p/conemu-maximus5/&quot;&gt;ConEmu&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;text-editor-vs-ides&quot;&gt;Text Editor vs IDEs&lt;/h2&gt;

&lt;p&gt;You’ll be writing Meteor apps in JavaScript. So, you don’t need do to any compilation and complex tasks to run a Meteor app. So, you only need a text editor to write a Meteor app. You don’t need an IDE at all.&lt;/p&gt;

&lt;p&gt;These days, we’ve quite powerful text editors with lot of cool features. You can use any of them. Here are few of such:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.sublimetext.com/3&quot;&gt;Sublime Text 3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://atom.io&quot;&gt;Atom&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://brackets.io/&quot;&gt;Brackets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;start-learning-meteor&quot;&gt;Start Learning Meteor&lt;/h2&gt;

&lt;p&gt;Now, we can start learning Meteor!&lt;/p&gt;

&lt;p&gt;There are many resources available online to learn Meteor. So, let me show you some of them.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.meteor.com/learn&quot;&gt;Official Getting Started Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://meteortips.com/book/&quot;&gt;Meteor Tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.discovermeteor.com/&quot;&gt;Discover Meteor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bulletproofmeteor.com/&quot;&gt;BulletProof Meteor&lt;/a&gt; (to improve performance and for best practices)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also check &lt;a href=&quot;https://www.yauh.de/best-learning-resources-for-meteorjs/&quot;&gt;this guide&lt;/a&gt; to see most of the other resources.&lt;/p&gt;

&lt;h2 id=&quot;deploying-meteor-apps&quot;&gt;Deploying Meteor Apps&lt;/h2&gt;

&lt;p&gt;Let’s say now you’ve a pretty good Meteor app. Now you need to deploy it. Here are some solutions to do that.&lt;/p&gt;

&lt;h3 id=&quot;meteor-deploy&quot;&gt;Meteor Deploy&lt;/h3&gt;

&lt;p&gt;This is the easiest way to deploy your Meteor app. Simply type &lt;code class=&quot;highlighter-rouge&quot;&gt;meteor deploy &amp;lt;sub-domain-name&amp;gt;&lt;/code&gt; to deploy your app into the Meteor’s public cloud. Meteor Deploy is just for testing purpose and you should not run any production apps with it.&lt;/p&gt;

&lt;h3 id=&quot;meteor-up&quot;&gt;Meteor Up&lt;/h3&gt;

&lt;p&gt;Meteor Up is a way to deploy a meteor app into Ubuntu servers. Once you configure it, it’s just like Meteor Deploy.&lt;/p&gt;

&lt;p&gt;To use Meteor Up, first you need to install NodeJS into your PC. And then, type following command in the command prompt to install Meteor Up.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install -g mup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then you’ll have a command called &lt;code class=&quot;highlighter-rouge&quot;&gt;mup&lt;/code&gt; inside the command prompt and you can use that to deploy your app. Follow the &lt;a href=&quot;https://github.com/arunoda/meteor-up&quot;&gt;Meteor Up&lt;/a&gt; documentation to how to setup it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/qYE-lRxD5t.png&quot; alt=&quot;Meteor Up on Windows&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Trust me. Meteor Up is pretty easy to use and trusted by thousands of developers. It’s one of the best ways to deploy a production meteor app.&lt;/p&gt;

&lt;h3 id=&quot;modulus&quot;&gt;Modulus&lt;/h3&gt;

&lt;p&gt;If you are looking for a cloud hosting service, Modulus is a service which has built in Meteor support. To learn more about Modulus, visit their &lt;a href=&quot;http://modulus.io/&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;galaxy&quot;&gt;Galaxy&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://trello.com/c/FMdB7GAu/78-galaxy-managed-meteor-deploy-to-your-own-servers&quot;&gt;Galaxy&lt;/a&gt; is the Meteor’s production ready hosting solution. Meteor team is working very hard for that and it’ll be available for us soon.&lt;/p&gt;

&lt;h2 id=&quot;what-next&quot;&gt;What Next?&lt;/h2&gt;

&lt;p&gt;Try to use &lt;a href=&quot;https://kadira.io/&quot;&gt;Kadira&lt;/a&gt;, it’s a performance monitoring service for Meteor. You can track down a lot of issues in your app before they make a trouble. Also, it’s a good idea to see what’s happening inside the app. Kadira make it super easy and fun.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kadira.io/&quot;&gt;&lt;img src=&quot;https://cldup.com/opvVPV6KEk.png&quot; alt=&quot;Kadira UI&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me you show you some resources to ask help. You can use &lt;a href=&quot;http://stackoverflow.com/questions/tagged/meteor&quot;&gt;StackOverflow&lt;/a&gt; to ask programming related question. You can also use &lt;a href=&quot;https://forums.meteor.com/&quot;&gt;Meteor Forums&lt;/a&gt; to ask other kinds of questions.&lt;/p&gt;

&lt;p&gt;Finally, don’t forget to check &lt;a href=&quot;https://crater.io/&quot;&gt;crater.io&lt;/a&gt; for latest Meteor news.&lt;/p&gt;
</description>
      <link>http://localhost:4000/meteor-for-windows-getting-started-guide</link>
      <guid isPermaLink="true">http://localhost:4000/meteor-for-windows-getting-started-guide</guid>
      <pubDate>2015-04-22 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Kubernetes: The Future of Cloud Hosting</title>
      <description>&lt;p&gt;Before we begin, let me first tell you what I mean by cloud hosting. This is quite a complex topic because there are several meanings to cloud hosting. We can talk about Heroku-like deployment services. Or we can talk about infrastructure services like AWS EC2. Or we can talk about Docker and other container technologies.&lt;/p&gt;

&lt;p&gt;All of the above solutions will evolve and become mature. But I believe that in the future, just like most of us use Linux for servers, Kubernetes will be the choice for cloud hosting. Okay, what’s Kubernetes and why do I say this? Let’s have a look at it.&lt;/p&gt;

&lt;h2 id=&quot;what-is-kubernetes&quot;&gt;What is Kubernetes?&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/XQoM4kTpdm.png&quot; alt=&quot;Kubernetes Logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt; is Google’s solution for managing a cluster of containers. Currently it only supports Docker for containers. But in the future it’ll support other container solutions as well.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you are new to Docker and containers, first read my &lt;a href=&quot;https://meteorhacks.com/docker-container-war-and-meteor.html&quot;&gt;blog post&lt;/a&gt; about &lt;a href=&quot;https://meteorhacks.com/docker-container-war-and-meteor.html&quot;&gt;Docker and Container Wars&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Kubernetes provides a declarative API for managing clusters while giving us a lot of flexibility. You only need to tell it what to do and it’ll do the hard work for you. It has built-in support for microservices, load balancing, monitoring and so on. You can deploy any service you like into Kubernetes. There are also some services with built-in Kubernetes support. &lt;a href=&quot;https://github.com/GoogleCloudPlatform/kubernetes/tree/master/examples/cassandra&quot;&gt;Cassandra&lt;/a&gt;, &lt;a href=&quot;https://github.com/GoogleCloudPlatform/kubernetes/tree/master/examples/rethinkdb&quot;&gt;RethinkDB&lt;/a&gt; and &lt;a href=&quot;https://github.com/GoogleCloudPlatform/kubernetes/tree/master/examples/spark&quot;&gt;Spark&lt;/a&gt; are some of them.&lt;/p&gt;

&lt;p&gt;On the other hand, it’s an open technology and you can run Kubernetes anywhere you like. That’s the goal of Kubernetes but we are not 100% there yet. Services like &lt;a href=&quot;https://tectonic.com/&quot;&gt;TecTonic&lt;/a&gt; makes this achievable and I hope most of the hosting providers will support Kubernetes natively in the future.&lt;/p&gt;

&lt;h2 id=&quot;why-kubernetes&quot;&gt;Why Kubernetes?&lt;/h2&gt;

&lt;p&gt;Here’s why I think Kubernetes is the future of cloud hosting:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Its API is declarative and it gives us a lot of flexibility.&lt;/li&gt;
  &lt;li&gt;Developers can integrate Kubernetes into their own services and make them native to Kubernetes.&lt;/li&gt;
  &lt;li&gt;Infrastructure providers can implement Kubernetes on top of their infrastructure without much effort.&lt;/li&gt;
  &lt;li&gt;It’s an open technology, so there is no vendor lock in.&lt;/li&gt;
  &lt;li&gt;It’s supported by major players including Google, IBM, HP, VMWare, Microsoft and others.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;lets-learn-something-about-kubernetes&quot;&gt;Let’s Learn Something about Kubernetes&lt;/h2&gt;

&lt;p&gt;You may think this is just another technology. That’s why I asked you to give it a try. That’s the intention of this article. Let’s start.&lt;/p&gt;

&lt;h3 id=&quot;first-some-concepts&quot;&gt;First, Some Concepts&lt;/h3&gt;

&lt;p&gt;It’s very important to learn a few core concepts first. Don’t worry I’ll keep them short.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/YgsLg7gM2L.png&quot; alt=&quot;Kubernetes Components&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;kubernetes-master&quot;&gt;Kubernetes Master&lt;/h4&gt;
&lt;p&gt;Kubernetes Master controls the overall cluster and runs the API for the cluster. Basically, it takes care of everything in the cluster.&lt;/p&gt;

&lt;h4 id=&quot;nodes&quot;&gt;Nodes&lt;/h4&gt;
&lt;p&gt;A Node is a physical server (or a VM) inside the cluster. It communicates with the master and runs containers (actually pods). You can add and remove any number of nodes you like.&lt;/p&gt;

&lt;h4 id=&quot;pods&quot;&gt;Pods&lt;/h4&gt;
&lt;p&gt;A pod is the basic building block in Kubernetes. Inside a pod, you can run a set of containers. We can allocate CPU, memory, volumes and other resources to a pod. All the containers inside the pod can share them. Kubernetes also assigns a unique network namespace to each pod. So, you don’t need to worry about conflicting ports because every pod has its own IP address and a hostname.&lt;/p&gt;

&lt;h4 id=&quot;replication-controller&quot;&gt;Replication Controller&lt;/h4&gt;

&lt;p&gt;Even though a pod is a very powerful component, it can’t handle failures itself. Let’s say the node (server) running our pod crashed. Then our pod will be removed from the cluster too. But, this is not the behavior we want. Failures are inevitable and even in such situations, we need to provide our service to the customers. That’s what the replication controller does.&lt;/p&gt;

&lt;p&gt;It watches the cluster and ensures that a given number of pods are running in the cluster all the time. It can launch new pods and remove existing pods. We can also change the number of pods assigned to a replication controller.&lt;/p&gt;

&lt;p&gt;For this to function, we need to define our pod as a template inside the replication controller.&lt;/p&gt;

&lt;h4 id=&quot;services&quot;&gt;Services&lt;/h4&gt;

&lt;p&gt;We know, pods are added and removed. So, we need a way to load-balance our traffic into these pods. “Service” is the solution. It can act as a dynamic load balancer for a set of pods. It’s very efficient and uses IP tables and other techniques to avoid the load-balancing overhead.&lt;/p&gt;

&lt;p&gt;Services also comes with basic sticky session support.&lt;/p&gt;

&lt;p&gt;Additionally, you can access these services via the DNS from inside each pod inside the cluster. So, it acts as a backbone for microservices.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Enough talking! Let’s deploy a Kubernetes cluster.&lt;/p&gt;

&lt;h2 id=&quot;deploying-a-kubernetes-cluster&quot;&gt;Deploying a Kubernetes Cluster&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;You will need a basic understanding of Linux and related tools to follow the rest of the article.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Deploying a real cluster is a hard job and takes some effort. So, we are going to deploy a test cluster inside a single server. You’ll need a &lt;strong&gt;Ubuntu 64-bit server&lt;/strong&gt;. It could be a cloud VM or a Vagrant box.&lt;/p&gt;

&lt;p&gt;Apply this command to deploy a cluster on this server:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget -qO- http://git.io/veKlu | sudo sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Here we are using &lt;a href=&quot;https://github.com/meteorhacks/kube-init&quot;&gt;kube-init&lt;/a&gt; to deploy our cluster. It’s based on the latest version of Kubernetes and we’ll update it as new versions are released.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;accessing-the-kubernetes-network&quot;&gt;Accessing the Kubernetes Network&lt;/h3&gt;

&lt;p&gt;Kubernetes creates its own network inside the cluster. Each pod and service get their own IP address. It’s great because we can access their IPs from our local machine. Let’s do so.&lt;/p&gt;

&lt;p&gt;First you need to create a &lt;a href=&quot;http://en.wikipedia.org/wiki/SOCKS&quot;&gt;SOCKS proxy&lt;/a&gt; with your server. To do so, simply apply the following command in a separate terminal session:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; 8082 your-user@your-server-ip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This command will log you into the server. Also, it’ll create a SOCKS proxy on &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost&lt;/code&gt; on port &lt;code class=&quot;highlighter-rouge&quot;&gt;8082&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we need to configure our browser for the SOCKS proxy we’ve just created. I’ll show you how to do this for both Chrome and Firefox on a Mac. The instructions for Linux and Windows are much the same.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=QPSYy0vZjw4&amp;amp;feature=youtu.be&quot;&gt;For Firefox&lt;/a&gt; - (Recommended. This will add the proxy to Firefox only.)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ASugh1lSmps&amp;amp;feature=youtu.be&quot;&gt;For Chrome&lt;/a&gt; - (This will add the proxy to your whole machine.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;deploy-a-pod-into-the-cluster&quot;&gt;Deploy a Pod into the Cluster&lt;/h2&gt;

&lt;p&gt;Now we are going to deploy a pod (or an app) into the cluster. It’s a &lt;a href=&quot;http://www.telescopeapp.org/&quot;&gt;Telescope&lt;/a&gt; app that is an open-source app like Hacker News.&lt;/p&gt;

&lt;p&gt;First create a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;telescope-pod.json&lt;/code&gt; inside the server. Put this content into it:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;metadata&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;telescope-pod&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kind&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Pod&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;apiVersion&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;v1beta3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;spec&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;containers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mongo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mongo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mongod&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--smallfiles&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--nojournal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ports&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;containerPort&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27017&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;telescope&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;meteorhacks/telescope&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ports&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;containerPort&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ROOT_URL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://mydomain.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MONGO_URL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mongodb://localhost:27017/app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, basically, the above file defined a pod named &lt;code class=&quot;highlighter-rouge&quot;&gt;telescope-pod&lt;/code&gt;. There are two containers inside the pod. The first one is a MongoDB container and other one is the telescope app. We’ve given the MongoDB URL to the telescope app via an environment variable as &lt;code class=&quot;highlighter-rouge&quot;&gt;mongodb://localhost:27017/app&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can access the MongoDB container port inside the telescope container. Normally we can’t do this. This is possible inside a pod because a single pod shares resources with other containers. The network is one such resource.&lt;/p&gt;

&lt;p&gt;Now simply run the following command to launch our pod:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl create -f telescope-pod.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can check the status of your pod by running:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl get pod
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At first, it’ll show the state of our pod as ’Pending’. That’s because Kubernetes is downloading telescope and Mongo images. Wait a minute or two, then you’ll see the state as ‘Running’.&lt;/p&gt;

&lt;h3 id=&quot;accessing-our-deployed-telescope-app&quot;&gt;Accessing Our Deployed Telescope App&lt;/h3&gt;

&lt;p&gt;Here’s the output when I run &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl get pod&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/nztSyh7t7E.png&quot; alt=&quot;Kubernets Pod Info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here, you can see an IP address assigned to your pod. That’s the IP address for your pod. Copy and paste it into the browser configured with the SOCKS proxy. Now you can access our telescope app. :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/pGn3jk4e10.png&quot; alt=&quot;Deployed Telescope App&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-next&quot;&gt;What Next?&lt;/h2&gt;

&lt;p&gt;We’ve just tried Kubernetes. There is a lot more to learn. Look at other Kubernetes articles and videos, and try those commands with our test cluster.&lt;/p&gt;

&lt;p&gt;I’ve also written two lessons on &lt;a href=&quot;https://bulletproofmeteor.com/architecture/docker-and-meteor&quot;&gt;Docker&lt;/a&gt; and &lt;a href=&quot;https://bulletproofmeteor.com/architecture/deploying-meteor-apps-into-a-kubernetes-cluster&quot;&gt;Kubernetes&lt;/a&gt; for &lt;a href=&quot;https://bulletproofmeteor.com/&quot;&gt;BulletProof Meteor&lt;/a&gt;. Even though this is a learning platform for Meteor, to follow these lessons you don’t need to know Meteor at all. Here are some of the things we are looking at.&lt;/p&gt;

&lt;h4 id=&quot;learn-docker&quot;&gt;Learn Docker&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Installing Docker&lt;/li&gt;
  &lt;li&gt;Understanding Basic concepts (images, containers, etc.)&lt;/li&gt;
  &lt;li&gt;Running containers in different ways (named, background services, auto-restart)&lt;/li&gt;
  &lt;li&gt;Building images (with docker commit and docker build)&lt;/li&gt;
  &lt;li&gt;Managing Ports&lt;/li&gt;
  &lt;li&gt;Publishing containers and Docker registries&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;learn-kubernetes&quot;&gt;Learn Kubernetes&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Introduction to Kubernetes&lt;/li&gt;
  &lt;li&gt;Deploying our first Kubernetes cluster&lt;/li&gt;
  &lt;li&gt;Deploying the telescope app (as a pod) in a cluster&lt;/li&gt;
  &lt;li&gt;Using a replication controller for high availability and scalability&lt;/li&gt;
  &lt;li&gt;Changing replicas&lt;/li&gt;
  &lt;li&gt;Kubernetes services for load-balancing pods&lt;/li&gt;
  &lt;li&gt;Deploying our own MongoDB service&lt;/li&gt;
  &lt;li&gt;Deploying a new version with a rolling update&lt;/li&gt;
  &lt;li&gt;Microservices with Kubernetes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can complete these lessons in a few hours and they are task oriented. So, you don’t need to waste your time watching videos or reading a lot of text. I bet you’ll like them. Here are those two lessons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://bulletproofmeteor.com/architecture/docker-and-meteor&quot;&gt;Learn Docker from the Very Beginning&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bulletproofmeteor.com/architecture/deploying-meteor-apps-into-a-kubernetes-cluster&quot;&gt;Learn How to Deploy Apps into Kubernetes and Manage Them&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;so-are-you-with-me&quot;&gt;So. Are you with me?&lt;/h2&gt;

&lt;p&gt;Now, you’ve a solid idea of what Kubernetes is. So, do you also think it’s the future of cloud hosting?&lt;/p&gt;

&lt;p&gt;Imagine that every cloud provider and software like MongoDB supports Kubernetes by default. I don’t think we will need to wait a decade to see this.&lt;/p&gt;

&lt;p&gt;Let’s discuss.&lt;/p&gt;
</description>
      <link>http://localhost:4000/learn-kubernetes-the-future-of-the-cloud</link>
      <guid isPermaLink="true">http://localhost:4000/learn-kubernetes-the-future-of-the-cloud</guid>
      <pubDate>2015-04-22 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Introducing Sikka: A Firewall for Meteor Apps</title>
      <description>&lt;p&gt;Just like any other web app, Meteor is also vulnerable to most of the security issues on the web. Since Meteor does not use cookies and because it uses WebSockets for everything, you don’t need to worry about &lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_request_forgery&quot;&gt;XSRF&lt;/a&gt; attacks. Meteor also comes with easy ways to fight XSS with its &lt;a href=&quot;https://meteorhacks.com/xss-and-meteor.html&quot;&gt;browser policy&lt;/a&gt; package.&lt;/p&gt;

&lt;p&gt;But, it’s not immune to &lt;a href=&quot;http://en.wikipedia.org/wiki/Denial-of-service_attack&quot;&gt;DOS&lt;/a&gt; and DOS-like attacks. Due to Meteor’s WebSocket usage, it’s super easy for someone to invoke a DOS attack against a Meteor app. For this, the attacker doesn’t need to use sophisticated tools or techniques.&lt;/p&gt;

&lt;p&gt;Let me show you how to invoke such a DOS attack just using a web browser.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I am not going to include any code for these attacks. Please don’t try these attacks on other people’s apps. It’s illegal.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/S0SExEI57oI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;1&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;&lt;strong&gt;Ooops! This is super bad.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes, it is. This is not only a common issue for Meteor, but for any app built with WebSockets. 
So, how can we fix this?&lt;/p&gt;

&lt;h2 id=&quot;introducing-sikka&quot;&gt;Introducing Sikka&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/meteorhacks/sikka&quot;&gt;Sikka&lt;/a&gt; is an application-layer firewall for Meteor. We are releasing the first version of Sikka with support for rate limiting and human  (captcha) verification.&lt;/p&gt;

&lt;p&gt;You can block DOS attacks by simply adding Sikka into your app. Once someone invokes a DOS attack, their IP is banned and Sikka will challenge them with a captcha as shown below: &lt;br /&gt;
(which allows legitimate users from that IP to browse your app as normal):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/7LLtciFLqg.png&quot; alt=&quot;Sikka - A Firewall for Meteor Apps&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Check out this demo:&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/VITk4iuvpx0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;1&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;We’ve tested Sikka with plenty of Meteor deployment options and it works pretty well. Add Sikka to your app and protect it from potential attacks.&lt;/p&gt;

&lt;p&gt;It doesn’t take 5 minutes to add and configure Sikka. Check out our &lt;a href=&quot;https://github.com/meteorhacks/sikka&quot;&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-future&quot;&gt;The Future&lt;/h2&gt;

&lt;p&gt;This is just our first release. We have a list of features for detecting various kinds of Meteor-related threats and anomalies. We’ll add them as we go.&lt;/p&gt;

&lt;p&gt;We are also looking to integrate both &lt;a href=&quot;https://kadira.io/&quot;&gt;Kadira&lt;/a&gt; and &lt;a href=&quot;https://www.cloudflare.com&quot;&gt;Cloudflare&lt;/a&gt; with Sikka. Then you will be able to see a list of potential threats in Kadira and click a button to ban that IP directly from Cloudflare. You’ll be able to add rules to ban IPs automatically.&lt;/p&gt;

&lt;p&gt;We expect to release the Kadira/Cloudflare integration before the end of this year or sooner. Stay tuned!&lt;/p&gt;
</description>
      <link>http://localhost:4000/introducing-sikka-a-firewall-for-meteor-apps</link>
      <guid isPermaLink="true">http://localhost:4000/introducing-sikka-a-firewall-for-meteor-apps</guid>
      <pubDate>2015-03-26 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Flow Router and Subscription Management</title>
      <description>&lt;p&gt;Meteor &lt;a href=&quot;https://www.meteor.com/blog/2015/03/17/meteor-104-mongo-cordova-template-subscriptions&quot;&gt;released&lt;/a&gt; template-level subscriptions with Meteor 1.0.4, and everyone is looking for some patterns for using it.&lt;/p&gt;

&lt;p&gt;At the same time, we have been using &lt;a href=&quot;https://github.com/meteorhacks/flow-router/&quot;&gt;Flow Router&lt;/a&gt; for months with our Meteor apps(&lt;a href=&quot;https://bulletproofmeteor.com/&quot;&gt;BulletProof Meteor&lt;/a&gt; and &lt;a href=&quot;http://kadira.io/&quot;&gt;Kadira&lt;/a&gt; UI). We think that now is the time to launch it for everyone.&lt;/p&gt;

&lt;p&gt;So, what does Flow Router have to do with subscriptions? I’ll talk about that. Let me first introduce Flow Router.&lt;/p&gt;

&lt;h2 id=&quot;why-did-we-create-a-router&quot;&gt;Why Did We Create a Router?&lt;/h2&gt;

&lt;p&gt;It’s a long story, which starts with our attempt to build React’s flux architecture on top of Meteor. Anyway, we &lt;a href=&quot;https://forums.meteor.com/t/meteorflux-flow/920/9?u=arunoda&quot;&gt;gave up&lt;/a&gt; on that.&lt;/p&gt;

&lt;p&gt;Then we began to think about some issues we were having at the time and started to find solutions for them. And Flow Router was a part of that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let me tell you some of the issues we had:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There were a lot of re-renders in the UI and we had no control over them.&lt;/li&gt;
  &lt;li&gt;Iron Router waitOn gives little control over page loading patterns.&lt;/li&gt;
  &lt;li&gt;Everything is based around the router and tightly coupled to it (especially rendering).&lt;/li&gt;
  &lt;li&gt;Our UI code is everywhere and it lacks maintainability (we solved this with flow components, but we are not ready to launch this yet).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s why we started to work on something new built from the scratch. That’s Flow Router.&lt;/p&gt;

&lt;h2 id=&quot;introducing-flow-router&quot;&gt;Introducing Flow Router&lt;/h2&gt;

&lt;p&gt;It’s a minimalistic router that uses page.js behind the scenes. Here are some of the characteristics of Flow Router.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It does routing and has a reactive API.&lt;/li&gt;
  &lt;li&gt;It registers subscriptions but does not wait for them.&lt;/li&gt;
  &lt;li&gt;It does not re-run a route based on reactive changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have you noticed? It doesn’t do rendering at all. We decoupled rendering from the router so it can be used with any kind of rendering framework. So, Flow Router can work with Blaze, React, Famous or any other rendering framework.&lt;/p&gt;

&lt;p&gt;For an example, you can use &lt;a href=&quot;https://github.com/meteorhacks/flow-layout&quot;&gt;Flow Layout&lt;/a&gt; for rendering Blaze templates or use &lt;a href=&quot;https://github.com/reactjs/react-meteor/&quot;&gt;React Meteor&lt;/a&gt; for rendering React components.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Before talking more about Flow Router, let me show you how to use it.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First add Flow Router to your project:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;meteor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;meteorhacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;flow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, here’s how you can define a route:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;FlowRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/blog/:postId'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;subscriptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;subscribe and register this subscription as 'myPost'&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'myPost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'blogPost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Yeah! We are on the post:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// You can use Flow Layout to render templates here&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We also have a carefully designed &lt;a href=&quot;https://github.com/meteorhacks/flow-router#api&quot;&gt;API&lt;/a&gt;, which prevents unwanted re-renders in our app. Make sure you go through the following links to get familiar with Flow Router:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/meteorhacks/flow-router&quot;&gt;Flow Router Docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/meteorhacks/flow-layout&quot;&gt;Flow Layout&lt;/a&gt; for Rendering Blaze Templates&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/meteorhacks/flow-router/issues/29&quot;&gt;Using Flow Router with React&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-is-it-different-from-iron-router&quot;&gt;How is it different from Iron Router?&lt;/h2&gt;

&lt;p&gt;As a community we’ve built a lot of apps with Iron Router and those apps are tightly coupled with it. Iron Router tries to do everything from routing, subscriptions and to rendering. I’m not going to say whether that’s a good or bad thing.&lt;/p&gt;

&lt;p&gt;In contrast, Flow Router only tries to do a few things and APIs are designed with UI performance in mind. With Flow Router, you can predict what’s going to happen next.&lt;/p&gt;

&lt;p&gt;We made some major decisions when designing it. Here they are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can’t use reactive content inside the router.&lt;/li&gt;
  &lt;li&gt;When a user visits a route, the route’s action and subscriptions methods are invoked. But they are never re-run for any reason unless the user changes the route.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FlowRouter.current()&lt;/code&gt; is not reactive. We introduced a new set of APIs as substitutes. &lt;a href=&quot;https://github.com/meteorhacks/flow-router#routercurrent-is-evil&quot;&gt;See why&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Flow Router registers only subscriptions (I’ll talk about this in a moment).&lt;/li&gt;
  &lt;li&gt;There is no concept like waitOn.&lt;/li&gt;
  &lt;li&gt;It doesn’t do server-side routing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is a &lt;a href=&quot;https://github.com/meteorhacks/flow-router#difference-with-iron-router&quot;&gt;section&lt;/a&gt; in our docs that explains why we made those decisions. &lt;a href=&quot;https://github.com/meteorhacks/flow-router#difference-with-iron-router&quot;&gt;Have a look at it&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;subscription-management&quot;&gt;Subscription Management&lt;/h2&gt;

&lt;p&gt;Now we’ve Meteor version 1.0.4 with template-level subscriptions. Flow Router supports &lt;a href=&quot;https://github.com/meteorhacks/flow-router#subscription-management&quot;&gt;subscription registration&lt;/a&gt;. So now it’s a perfect time to think about subscription management in Meteor again.&lt;/p&gt;

&lt;p&gt;For me, there is only one rule we need to follow:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Templates(or the UI layer) should be able to check the state of a subscription and do actions based on it.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Even though subscription’s state will be used in templates, we can define subscriptions in either inside routes or inside templates. We can use both depending on the use case. Let’s have a look at them.&lt;/p&gt;

&lt;h3 id=&quot;route-level-subscriptions&quot;&gt;Route-level Subscriptions&lt;/h3&gt;

&lt;p&gt;Let’s try to think how users are going to use a typical web app.
(We’ve two users called Sam and John.)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sam visits a page.&lt;/li&gt;
  &lt;li&gt;Sam browses the app for a few minutes.&lt;/li&gt;
  &lt;li&gt;Now Sam wants to share the current page with his friend John.&lt;/li&gt;
  &lt;li&gt;Sam copies the URL and sends it to John in an email.&lt;/li&gt;
  &lt;li&gt;Once John clicks on the page, he gets the same page as Sam was looking at.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, in this case what’s in the page is aligned with the route. Since the page is rendered with data, the subscriptions are also aligned with the route.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is a case where you should define subscriptions at the route level.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By doing so, you can clearly see what subscriptions you’ve used by looking at a single page. But, you should let templates render the data as they want. Flow Router is built for this. Let’s have a look at it:&lt;/p&gt;

&lt;p&gt;This is how we can register subscriptions for a blog page:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;FlowRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/blog/:pageId'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;subscriptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'blogCategories'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'categories'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'currentPost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'post'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pageId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'currentComments'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'comments'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pageId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// We render the template with Flow Layout&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;FlowLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'page'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here’s our template (which acts as a layout):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/9Er9is4L90.png&quot; alt=&quot;Our page template&quot; /&gt;
(Click here for &lt;a href=&quot;https://gist.github.com/arunoda/26c77af787a50be2b73d&quot;&gt;HTML version&lt;/a&gt; of the template)&lt;/p&gt;

&lt;p&gt;Here’s the &lt;code class=&quot;highlighter-rouge&quot;&gt;isReady&lt;/code&gt; template helper:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;helpers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;isReady&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FlowRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subsReady&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FlowRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subsReady&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is how it looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/esLzM8cjEL.gif&quot; alt=&quot;&quot; /&gt;
(You can checkout the full source code from &lt;a href=&quot;https://github.com/flow-examples/subscriptions-management&quot;&gt;here&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;As you can see, now the template has more control over managing the subscription state.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A blog post will wait for a subscription registered with &lt;code class=&quot;highlighter-rouge&quot;&gt;currentPost&lt;/code&gt; and it will display the “Loading…” text.&lt;/li&gt;
  &lt;li&gt;Categories are rendered after all subscriptions have been loaded, but they won’t show the “Loading” text.&lt;/li&gt;
  &lt;li&gt;Comments do not wait for any subscriptions; they simply render the data as they arrive.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Flow Router supports &lt;a href=&quot;https://github.com/meteorhacks/fast-render&quot;&gt;Fast Render&lt;/a&gt; by default. Simply add Fast Render to your app and you’ll get the initial data for subscriptions you’ve registered. That’s another reason we should define subscriptions in the router.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;template-level-subscriptions&quot;&gt;Template-level Subscriptions&lt;/h3&gt;

&lt;p&gt;Now let’s look at cases where the route will not change after a user action. Here are some examples:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Chat solutions&lt;/li&gt;
  &lt;li&gt;Infinite scrolling (like in Facebook)&lt;/li&gt;
  &lt;li&gt;Charts and Gauges (like in Kadira)&lt;/li&gt;
  &lt;li&gt;Data-arranging apps (like Trello)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For these cases, template-level subscriptions can be used to define subscriptions and manage them.&lt;/p&gt;

&lt;p&gt;This is how you can use template-level subscription for a chat solution:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chatWidget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onCreated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;recentChatMessages&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can render the &lt;code class=&quot;highlighter-rouge&quot;&gt;chatApp&lt;/code&gt; template like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/QaOwGlbKCa.png&quot; alt=&quot;ChatApp template&quot; /&gt;
(Click here for &lt;a href=&quot;https://gist.github.com/arunoda/c841223830f2498ef98c&quot;&gt;HTML version&lt;/a&gt; of the template)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you follow this approach, Fast Render can’t detect subscriptions since they are inside templates.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, I hope I’ve explained how we should try to get the benefit of both Flow Router and template-level subscriptions for managing subscriptions.&lt;/p&gt;

&lt;p&gt;Try both Flow Router and template-evel subscriptions and let me know your experience.&lt;/p&gt;
</description>
      <link>http://localhost:4000/flow-router-and-subscription-management</link>
      <guid isPermaLink="true">http://localhost:4000/flow-router-and-subscription-management</guid>
      <pubDate>2015-03-18 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Docker, The Container War and Meteor</title>
      <description>&lt;p&gt;I hope you have heard about &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; or you are already using it in production. In this article I will try to summarize what’s happening in the Docker community right now and what’s coming. After that, I will show you how Meteor fits with Docker. (I’ll talk a bit about Galaxy too.)&lt;/p&gt;

&lt;h2 id=&quot;what-is-docker&quot;&gt;What is Docker?&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/4P9pfv_Txb.png&quot; alt=&quot;Docker Logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before we begin, let me tell you a bit about Docker. You can think of Docker as a very lightweight virtual machine runtime. With Docker, you can run a set of different apps and services completely isolated from each other. That means each of these apps is running inside a clean operating system with its own file system. It’s very efficient and does not add any considerable overhead.&lt;/p&gt;

&lt;p&gt;Actually this is not a new thing and it has been around for years. It was previously known as the container technology and only system admins knew how to manage them. Linux’s &lt;a href=&quot;https://linuxcontainers.org/&quot;&gt;LXC&lt;/a&gt; and Solaris’s &lt;a href=&quot;http://en.wikipedia.org/wiki/Solaris_Containers&quot;&gt;zones&lt;/a&gt; are two examples. Docker makes it extremely simple to run and manage containers. That’s why a lot of people started using containers to build amazing stuff with them.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There is a lot of cool stuff you can do with Docker. If you’d like to jump start into Docker and &lt;a href=&quot;https://bulletproofmeteor.com/architecture/docker-and-meteor&quot;&gt;practice using Docker&lt;/a&gt; in production, look at the &lt;a href=&quot;https://bulletproofmeteor.com/architecture/docker-and-meteor&quot;&gt;Docker lesson&lt;/a&gt; on BulletProof Meteor. You can get a solid foundation for Docker in under 3 hours.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-container-war&quot;&gt;The Container War&lt;/h2&gt;

&lt;p&gt;Docker is just the core technology behind the Docker movement. But there are a lot other tools for managing docker runtime and simplifying things like clustering and service discovery.&lt;/p&gt;

&lt;p&gt;Almost every major player in the technology world is trying to build tools around Docker. They are trying to make things simple while taking some ownership in the community. Sometimes, they seem to work together, but sometimes they seem like they are competing with each other. That’s why I call this the Container War. Competition is always a good thing, so this is good for the community in general.&lt;/p&gt;

&lt;p&gt;There are three major camps in this war. Let me tell you a bit about each.&lt;/p&gt;

&lt;h3 id=&quot;1-docker-inc&quot;&gt;1. Docker Inc.&lt;/h3&gt;

&lt;p&gt;Docker Inc is the company who originally created Docker and is currently maintaining it. They have a bunch of tools and services to make Docker deployments simple and manageable.&lt;/p&gt;

&lt;p&gt;Here are they:&lt;/p&gt;

&lt;h4 id=&quot;docker-hub&quot;&gt;Docker Hub&lt;/h4&gt;
&lt;p&gt;This is the central Docker &lt;a href=&quot;https://registry.hub.docker.com/&quot;&gt;registry&lt;/a&gt; where all the core Docker images exist. There are plenty of docker images in this repository, including official images from operating systems to databases to software frameworks.&lt;/p&gt;

&lt;p&gt;You can push your own images and you can even have private images only you and your team can access.&lt;/p&gt;

&lt;h4 id=&quot;docker-machine&quot;&gt;Docker Machine&lt;/h4&gt;
&lt;p&gt;With &lt;a href=&quot;https://github.com/docker/machine&quot;&gt;Docker Machine&lt;/a&gt;, you can configure a server or your desktop as a production Docker runtime. Take a look at the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker-machine create -d digitalocean --digitalocean-access-token=secret staging
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It will create a new server on DigitalOcean and configure it as a production-quality Docker runtime. In the above command &lt;code class=&quot;highlighter-rouge&quot;&gt;digitalocean&lt;/code&gt; is the driver used to create a Docker Machine. There are plenty of drivers including other cloud server providers and virtualization tools.&lt;/p&gt;

&lt;h4 id=&quot;docker-swarm&quot;&gt;Docker Swarm&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/docker/swarm/&quot;&gt;Docker Swarm&lt;/a&gt; can group a set of Docker runtimes together and control them as a single Docker runtime. This is how Docker Inc manages a set of Docker runtimes as a cluster. It plays nicely with Docker Machine.&lt;/p&gt;

&lt;h4 id=&quot;docker-compose&quot;&gt;Docker Compose&lt;/h4&gt;
&lt;p&gt;With &lt;a href=&quot;https://github.com/docker/compose&quot;&gt;Docker Compose&lt;/a&gt;, you can define your application architecture. Then, with a single command, you can deploy Docker containers into Docker.&lt;/p&gt;

&lt;p&gt;All of the above tools and services are built so that they talk to each other. For example, you can:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Configure a set of EC2 servers with Docker Machine.&lt;/li&gt;
  &lt;li&gt;Then you can make a cluster of those EC2 servers using Docker Swarm.&lt;/li&gt;
  &lt;li&gt;Finally, you can deploy your apps into the cluster using Docker Compose.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even though, this seems like an awesome set of technologies, there is one more service Docker Inc will create next. It’s a service to connect and manage all of the above pieces together.&lt;/p&gt;

&lt;p&gt;Let’s say you want to deploy a new version of your app. Okay, just push it to GitHub and then the Docker service will take care of deploying it to your cluster. When your app needs more resources, it’ll create new servers with Docker Machine and add them to the cluster.&lt;/p&gt;

&lt;h3 id=&quot;2-coreos&quot;&gt;2. CoreOS&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/s5Dje9Q3RK.png&quot; alt=&quot;CoreOS Logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://coreos.com/&quot;&gt;CoreOS&lt;/a&gt; also plays a huge role in the Docker community. Their service discovery solution Etcd is very famous in the community.&lt;/p&gt;

&lt;p&gt;Basically, CoreOS is a minimal Linux distribution, which treats containers as first-class citizens. If you want to run a piece of software inside CoreOS, then you need to run it via a Docker container. It also does security updates and other updates automatically and you don’t need to worry about updating them manually. For that, It uses the same technology that Chrome uses to update the browser in the background. CoreOS calls this feature as &lt;a href=&quot;https://coreos.com/products/coreupdate/&quot;&gt;Core Update&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;CoreOS tries to fix the clustering problem with &lt;a href=&quot;https://coreos.com/using-coreos/clustering/&quot;&gt;Fleet&lt;/a&gt; and &lt;a href=&quot;https://github.com/coreos/etcd&quot;&gt;Etcd&lt;/a&gt;. You can think of Fleet as a cluster-wide init system. You can define how many instances of your app need to run in the cluster. Then Fleet will take care of deploying them and try to re-deploy them if any of them go down. It uses Ectd as a communication hub for all its activities.&lt;/p&gt;

&lt;p&gt;There is also a cloud service to manage CoreOS updates. CoreOS also has a their own Docker Registry. Recently they started to develop a kind of minimal version of Docker called &lt;a href=&quot;https://coreos.com/blog/rocket/&quot;&gt;Rocket&lt;/a&gt;, which focusing on simplicity and security. Anyway, CoreOS seems to support both Docker and Rocket.&lt;/p&gt;

&lt;p&gt;You can also use Core Update to update your apps in the background. Currently, configuring it is not that simple. But CoreOs will make it simpler and possibly it will build a service to make this very straightforward.&lt;/p&gt;

&lt;h3 id=&quot;3-googles-kubernetes&quot;&gt;3. Google’s Kubernetes&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/XQoM4kTpdm.png&quot; alt=&quot;Kubernetes Logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I think Google has a long history with containers, since most of the internal Google services run as containers. &lt;a href=&quot;http://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt; is the Google’s solution for managing a Docker cluster. It has some similarities with Fleet from CoreOS but it provides a high-level API for defining the deployment architecture. It also uses Etcd.&lt;/p&gt;

&lt;p&gt;Kubernetes can manage a cluster of servers on most the cloud platforms. We can even deploy and test it locally.&lt;/p&gt;

&lt;p&gt;Interestingly but not surprisingly, Google’s Compute Engine has the &lt;a href=&quot;https://cloud.google.com/container-engine/&quot;&gt;built-in support&lt;/a&gt; for Kubernetes. So, you don’t have to worry about managing it yourself. That might be the main reason why Google started building Kubernetes in the first place.&lt;/p&gt;

&lt;h2 id=&quot;what-about-docker-and-meteor&quot;&gt;What about Docker and Meteor?&lt;/h2&gt;

&lt;p&gt;Since everyone is moving to Docker, we should try to go with that too. Moving to Docker is not as simple as making a Docker image for your app or running it inside a container. We need to get the design concepts from the Docker community and apply them to our apps. Let me introduce a few of them:&lt;/p&gt;

&lt;h3 id=&quot;first-lets-dockerize-our-app&quot;&gt;First, Let’s Dockerize Our App&lt;/h3&gt;
&lt;p&gt;First we need to convert our app into a Docker image. Alternatively, we could use a Docker container to run our bundled Meteor app. Both of these can be done with our &lt;a href=&quot;https://registry.hub.docker.com/u/meteorhacks/meteord/&quot;&gt;MeteorD&lt;/a&gt; Docker image. Give it a try.&lt;/p&gt;

&lt;h3 id=&quot;multiple-versions-of-your-app&quot;&gt;Multiple Versions of Your App&lt;/h3&gt;
&lt;p&gt;Since we are starting and stopping apps in a snap, it’s possible to have two different versions of our app running at the same time. So, we need to design our application and database to support that. We even need to configure load balancers for that.&lt;/p&gt;

&lt;p&gt;Anyway, that doesn’t mean we need to expect both version 0.0.1 and version 9.8.0 of our app to be running at the same time, but it’s possible to run both 9.7.0 and 9.8.0 at the same time.&lt;/p&gt;

&lt;h3 id=&quot;no-more-graceful-shutdowns&quot;&gt;No More Graceful Shutdowns&lt;/h3&gt;
&lt;p&gt;Sometimes, we can watch for kill signals and gracefully shutdown our app after completing some cleanup tasks. But in the container world, it’s possible for an app to get killed without there being any time to do anything. So, you need to design your app to take this into account. Try to use the &lt;a href=&quot;http://en.wikipedia.org/wiki/Crash-only_software&quot;&gt;crash only software&lt;/a&gt; pattern. At first this will seem to be hard, but later you’ll like it very much.&lt;/p&gt;

&lt;h3 id=&quot;think-twice-about-online-migrations&quot;&gt;Think Twice about Online Migrations&lt;/h3&gt;
&lt;p&gt;Some of us use online migrations to change the database schema and invoke other tasks. Now in the container world we might be running different versions of the app and they could get killed and rebooted at any time. So, you need to think twice when doing online migrations or migrations in general.&lt;/p&gt;

&lt;p&gt;You may want to avoid migrations by using a flexible database schema. MongoDB provides a good foundation for that since we don’t need to have a pre-defined schema.&lt;/p&gt;

&lt;h3 id=&quot;dont-persist-data-locally&quot;&gt;Don’t Persist Data Locally&lt;/h3&gt;

&lt;p&gt;Now we are running our app as a Docker container. We’ve a persistable file system inside a container. But when the container is removed, it is removed too.&lt;/p&gt;

&lt;p&gt;We may also be running a lot of copies of the same app. We might kill one of them and move it to another place but we’ll lose the persisted data.&lt;/p&gt;

&lt;p&gt;So, we should avoid persisting locally. We can instead use a database like CouchDB to store files or try to store it to a cloud service like AWS S3. Even MongoDB has support for storing files via GridFs.&lt;/p&gt;

&lt;h3 id=&quot;use-microservices&quot;&gt;Use Microservices&lt;/h3&gt;

&lt;p&gt;Since we can run a lot of containers very easily with Docker, we don’t need to build a big monolithic app anymore. Instead, we can divide our app up into tiny isolated services and maintain them separately. Then we can get them to interact with each other via DDP. This the reason why we’ve created &lt;a href=&quot;https://github.com/meteorhacks/cluster&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;meteorhacks:cluster&lt;/code&gt;&lt;/a&gt;. I’ll talk more about Cluster and why we built it in another article.&lt;/p&gt;

&lt;p&gt;For now, you can follow these resources to learn more about microservices in Meteor.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/meteorhacks/cluster#microservices&quot;&gt;Cluster documentation on Microservices&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bulletproofmeteor.com/architecture/microservices-with-meteor-and-ddp&quot;&gt;Microservices lesson on BulletProof Meteor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;where-does-galaxy-fit-in&quot;&gt;Where Does Galaxy Fit in?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is not an official announcement or update about Galaxy. It’s just my personal comments based on what I’ve heard so far.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Even though Docker simplifies a lot things, it does not make things super simple. For example, Heroku is still the easiest way to deploy apps in the cloud.&lt;/p&gt;

&lt;p&gt;Galaxy will be built on top of Kubernetes and you’ll be able to deploy your app into a Kubernetes cluster with a single command, just like you did with &lt;code class=&quot;highlighter-rouge&quot;&gt;meteor deploy&lt;/code&gt;. Basically it’s a kind of managed Heroku build on top of a cluster of servers provided by you. It’ll definitely have Meteor-specific features and related services.&lt;/p&gt;

&lt;p&gt;I hope Galaxy will allow us to customize how it works via some kind of Docker-related API or similar. With that we could customize a lot of things inside it. Maybe we could provide native support for &lt;code class=&quot;highlighter-rouge&quot;&gt;meteorhacks:cluster&lt;/code&gt; inside Galaxy and monitor it with &lt;a href=&quot;https://kadira.io&quot;&gt;Kadira&lt;/a&gt; :D&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So, this is what I personally think about Docker and how we can integrate it with Meteor. This is purely based on the resources available on the internet and based on some of my predictions.&lt;/p&gt;

&lt;p&gt;In the next article, I’ll talk more about microservices and how our Meteor Cluster works with Docker. I’ll also try to elaborate on why we made some crucial decisions like choosing MongoDB as a discovery backend instead of something like Etcd.&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you’d like to jump start into Docker and &lt;a href=&quot;https://bulletproofmeteor.com/architecture/docker-and-meteor&quot;&gt;learn how to use Docker&lt;/a&gt; in production, look at the &lt;a href=&quot;https://bulletproofmeteor.com/architecture/docker-and-meteor&quot;&gt;Docker lesson&lt;/a&gt; on BulletProof Meteor. You can get a solid foundation for Docker in under 3 hours.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <link>http://localhost:4000/docker-container-war-and-meteor</link>
      <guid isPermaLink="true">http://localhost:4000/docker-container-war-and-meteor</guid>
      <pubDate>2015-03-03 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Introducing Multi-Core Support for Meteor</title>
      <description>&lt;p&gt;These days, most cloud servers come with more than one core. But, there is no way to get the benefit of multiple cores with Meteor. Hence, we cannot use the maximum capacity of the server.&lt;/p&gt;

&lt;p&gt;Luckily from today onwards, Meteor apps can use multiple cores very easily. This is how.&lt;/p&gt;

&lt;p&gt;First add the &lt;a href=&quot;https://github.com/meteorhacks/cluster&quot;&gt;Cluster&lt;/a&gt; package into your app:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;meteor add meteorhacks:cluster
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, expose the following environment variable:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CLUSTER_WORKERS_COUNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;auto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s all you have to do. Now your Meteor app will use all the cores available on your server.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you are using the Meteor Up to deploy your app, update mup and do &lt;code class=&quot;highlighter-rouge&quot;&gt;mup setup&lt;/code&gt; once.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/cezEImOavr.png&quot; alt=&quot;Using Meteor Cluster for Multi Core Support&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can also specify the number of workers explicitly, like this:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CLUSTER_WORKERS_COUNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Normally, Cluster needs a &lt;a href=&quot;https://github.com/meteorhacks/cluster#getting-started&quot;&gt;MongoDB connection&lt;/a&gt; to communicate between servers. But, since these workers were spawned inside a single server, we don’t need a MongoDB connection for multi-core support.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;how-clusters-multi-core-support-works&quot;&gt;How Cluster’s multi-core support works&lt;/h2&gt;

&lt;p&gt;NodeJS supports multiple cores with the &lt;a href=&quot;http://nodejs.org/api/cluster.html&quot;&gt;cluster&lt;/a&gt; module. It works on the TCP layer. But, Meteor needs sticky session support. Because of that, we need to move our multi-core routing logic into the HTTP layer. So, we can’t just use the NodeJS cluster module with Meteor.&lt;/p&gt;

&lt;p&gt;Therefore, we had to come up with a different approach to adding multi-core support to Meteor. First, we spawn a set of clones of the running Meteor app (we call them workers). Then, we use a few different ways to distribute the traffic. Here they are:&lt;/p&gt;

&lt;h4 id=&quot;for-static-resources-and-html&quot;&gt;For static resources and HTML&lt;/h4&gt;
&lt;p&gt;These will be served directly from the main Meteor app. There is no need to proxy them from workers.&lt;/p&gt;

&lt;h4 id=&quot;for-sockjs-requests-long-polling&quot;&gt;For SockJS requests (long polling)&lt;/h4&gt;
&lt;p&gt;These requests will be proxied to workers we’ve spawned. Sticky session support is enabled when proxying.&lt;/p&gt;

&lt;h4 id=&quot;for-websocket-requests&quot;&gt;For WebSocket requests&lt;/h4&gt;
&lt;p&gt;For WebSocket requests, we simply send the socket to the worker and then it will directly handle the traffic. In this case, there is no proxying and it’s very efficient. This is similar to how the NodeJS cluster module behaves.&lt;/p&gt;

&lt;h2 id=&quot;performance&quot;&gt;Performance&lt;/h2&gt;

&lt;p&gt;To benchmark the performance, we decided to run a test like this. These tests were done using an Ubuntu server form &lt;a href=&quot;https://www.digitalocean.com/pricing/&quot;&gt;DigitalOcean&lt;/a&gt; that has &lt;strong&gt;four&lt;/strong&gt; cores. We load tested it for a few different cases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Control test - without using Cluster (uses only one core)&lt;/li&gt;
  &lt;li&gt;With Phusion Passenger (uses four workers)&lt;/li&gt;
  &lt;li&gt;With Cluster (uses four workers)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.phusionpassenger.com/&quot;&gt;Phusion Passenger&lt;/a&gt; is a customized nginx server, which can be used for multi-core support. It supports Meteor apps too.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;test-app&quot;&gt;Test app&lt;/h3&gt;

&lt;p&gt;Here’s how this test app works:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The app has a publication.&lt;/li&gt;
  &lt;li&gt;App gets data from a MongoDB server hosted at &lt;a href=&quot;https://www.compose.io/&quot;&gt;compose.io&lt;/a&gt; (oplog support is enabled).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/meteorhacks/meteor-down&quot;&gt;Meteor Down&lt;/a&gt; is used to create the DDP traffic.&lt;/li&gt;
  &lt;li&gt;Once a DDP connection has been made to the server, it subscribes to the above publication.  When it receives data, it will kill the connection and start another one.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ve used three different payloads:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;20 Kb size of subscription data - fetches data from mongodb for every request&lt;/li&gt;
  &lt;li&gt;200 Kb size of subscription data - fetches data from mongodb for every request&lt;/li&gt;
  &lt;li&gt;200 Kb size of subscription data - fetches data from mongodb once, then cache in memory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is a table of subrates (subscriptions per minute): 
(These metrics were captured using &lt;a href=&quot;https://kadira.io/&quot;&gt;Kadira&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/xe51fHH-5c.png&quot; alt=&quot;Cluster's Multi Core Performance Results&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;It seems like in both 20KB and 200 Kb (without caching) tests, Passenger and Cluster performed equally. That’s because a lot CPU time was spent on fetching documents from MongoDB.&lt;/p&gt;

&lt;p&gt;But, in the other case, data is cached in the Memory and only a fraction of CPU time was spent on fetching documents. Because of that, the app could handle more requests. This time, Cluster could handle a lot more requests than Passenger. That’s because, Cluster does not proxy requests rather it sends the raw socket to the worker.&lt;/p&gt;

&lt;p&gt;So clearly, Cluster uses cores in your server in a more efficient manner compared with Phusion Passenger. That’s a really good thing.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Use cluster with your app and try to utilize all the cores available in your server. You can also use it to scale your Meteor app vertically by adding more cores.&lt;/p&gt;

&lt;p&gt;Finally, don’t forget to share your experiences with us.&lt;/p&gt;

</description>
      <link>http://localhost:4000/introducing-multi-core-support-for-meteor</link>
      <guid isPermaLink="true">http://localhost:4000/introducing-multi-core-support-for-meteor</guid>
      <pubDate>2015-02-23 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Postponing NodeJS Internals Lessons on BulletProof Meteor</title>
      <description>&lt;p&gt;When we are planning lessons for &lt;a href=&quot;https://bulletproofmeteor.com/&quot;&gt;BulletProof Meteor&lt;/a&gt;, we’ve added a set of lessons on &lt;a href=&quot;https://bulletproofmeteor.com/packages&quot;&gt;NodeJS Internals&lt;/a&gt;. But, we couldn’t deliver them as we promised. But instead we’ve added some other lessons about &lt;a href=&quot;https://bulletproofmeteor.com/architecture/docker-and-meteor&quot;&gt;Docker&lt;/a&gt; and &lt;a href=&quot;https://bulletproofmeteor.com/database-modeling/searching-with-elastic-search&quot;&gt;Elastic Search&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Today, we decided to postpone working on the NodeJS Internals lessons. We are not removing those lessons, but we promise to finish them before end of this year. Here are the reasons for that:&lt;/p&gt;

&lt;h3 id=&quot;we-are-too-busy&quot;&gt;We are Too Busy&lt;/h3&gt;

&lt;p&gt;In the last few months, we’ve started a bunch of new projects to improve how we build Meteor apps. &lt;a href=&quot;https://www.youtube.com/watch?v=5-AEzNmAzvw&quot;&gt;Flow&lt;/a&gt;, &lt;a href=&quot;https://github.com/meteorhacks/cluster&quot;&gt;Cluster&lt;/a&gt; and &lt;a href=&quot;https://github.com/meteorhacks/meteord&quot;&gt;MeteorD&lt;/a&gt; are some of those projects. We’ve a lot of these kinds of projects in the pipeline as well.&lt;/p&gt;

&lt;p&gt;We think it’s a good idea to work on these projects since they will help the Meteor community in general. As result of that, we were becoming too busy.&lt;/p&gt;

&lt;h3 id=&quot;nodejs-performance-monitoring-tools-are-getting-changed&quot;&gt;NodeJS Performance Monitoring Tools are Getting Changed&lt;/h3&gt;

&lt;p&gt;Most of the NodeJS performance monitoring tools are available for Solaris and Joyent’s Smart OS. But, most of us use Linux to deploy our Meteor apps. There are some tools exists for Linux, but they are hard to use and not mature.&lt;/p&gt;

&lt;p&gt;With the &lt;a href=&quot;https://iojs.org/&quot;&gt;IO.js&lt;/a&gt;, things started to getting changed. There’s a seperate &lt;a href=&quot;https://github.com/iojs/tracing-wg&quot;&gt;working group&lt;/a&gt; looking at possibilities to improve the support for tracing and tools landscape. But, those are not currently ready yet.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Due to both of these two reasons, we’ll postpone working on NodeJS Internals lessons. But we promise to finish them before end of this year.&lt;/p&gt;
</description>
      <link>http://localhost:4000/postponing-nodejs-internals-lessons-on-bulletproof-meteor</link>
      <guid isPermaLink="true">http://localhost:4000/postponing-nodejs-internals-lessons-on-bulletproof-meteor</guid>
      <pubDate>2015-02-16 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Meteor Cluster Performance Test: Impressive Results</title>
      <description>&lt;p&gt;In the previous blog &lt;a href=&quot;https://meteorhacks.com/cluster-a-different-kind-of-load-balancer-for-meteor.html&quot;&gt;post&lt;/a&gt;, we introduced &lt;a href=&quot;https://github.com/meteorhacks/cluster&quot;&gt;Cluster&lt;/a&gt;. It is a load balancer sits in the application layer, so, it doesn’t need additional hardware or software. With Cluster, you can load-balance a Meteor app by just installing a package.&lt;/p&gt;

&lt;p&gt;Some people are worried about the performance of Cluster and we expected that. So, we ran a load test recently and here are the results.&lt;/p&gt;

&lt;h3 id=&quot;load-testing-method&quot;&gt;Load Testing Method&lt;/h3&gt;

&lt;p&gt;Since this is a different kind of load balancer, it’s hard to compare with other load balancers. We decided to benchmark it against itself by monitoring the number of requests processed by each server. This is how we did it.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We used a Meteor app serving only one publication.&lt;/li&gt;
  &lt;li&gt;First we ran our load test on the app without Cluster; this was our control test.&lt;/li&gt;
  &lt;li&gt;Then we used Cluster in different ways and compared the results with those of the control test.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While running the load test, we tracked and recorded metrics via &lt;a href=&quot;https://kadira.io/&quot;&gt;Kadira&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;the-app-and-the-load-testing-suite&quot;&gt;The App and the Load Testing Suite&lt;/h3&gt;

&lt;p&gt;Our app is a pretty simple Meteor app. It serves a single publication. When a client subscribes to the app, it sends a set of documents, which is around 200 kB in size.&lt;/p&gt;

&lt;p&gt;The load testing suite is also pretty simple. The client connects to the server and takes out a subscription. Once the app receives data back, it disconnects and tries to connect again. The load testing suite is written in &lt;a href=&quot;https://github.com/meteorhacks/meteor-down&quot;&gt;MeteorDown&lt;/a&gt;, which  manages invoking multiple concurrent clients.&lt;/p&gt;

&lt;p&gt;We used Heroku to scale up our load testing suite. We can scale up to as much as load we need.&lt;/p&gt;

&lt;p&gt;The test app and the load testing suite are available on &lt;a href=&quot;https://github.com/meteorhacks/cluster-performance&quot;&gt;this&lt;/a&gt; GitHub repository.&lt;/p&gt;

&lt;h3 id=&quot;app-servers&quot;&gt;App Servers&lt;/h3&gt;

&lt;p&gt;For app servers, we used single-core 512 MB servers from &lt;a href=&quot;https://www.digitalocean.com/pricing/&quot;&gt;Digital Ocean&lt;/a&gt;. We chose Ubuntu 14.04 as the operating system. The deployment was done through &lt;a href=&quot;https://github.com/arunoda/meteor-up&quot;&gt;Meteor Up&lt;/a&gt; and we didn’t do any kind of OS level tweaks other than the basic setup done by Meteor Up.&lt;/p&gt;

&lt;h2 id=&quot;load-testing-result&quot;&gt;Load Testing Result&lt;/h2&gt;

&lt;p&gt;So, we ran the load test for the following scenarios:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Control test: Just using a single server without Cluster&lt;/li&gt;
  &lt;li&gt;With 3 servers: Only one server acts as a proxy for all the traffic (one balancer)&lt;/li&gt;
  &lt;li&gt;With 3 servers: All servers accept and process the traffic (all are balancers)&lt;/li&gt;
  &lt;li&gt;With 5 servers: All servers accept and process the traffic (all are balancers)&lt;/li&gt;
  &lt;li&gt;With 10 servers: All servers accept and process the traffic (all are balancers)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We captured the following metrics using Kadira:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sub Rate - Number of subscriptions processed per minute&lt;/li&gt;
  &lt;li&gt;Response Time - Time taken to process a single subscription request&lt;/li&gt;
  &lt;li&gt;CPU time used by the entry point - The entry point is the server that accepts the initial connection. It forwards that request to another server (before making the WebSocket connection).&lt;/li&gt;
  &lt;li&gt;CPU time used by other servers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are the results:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/Hr5qDoWSmT.png&quot; alt=&quot;Cluster Performance Test Results&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For all the above scenarios, server response time is less than 8ms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we look at these  as a graph here’s what they look like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/N6vX-X-EGe.png&quot; alt=&quot;Cluster Performance Per Server with Kadira&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here’s the CPU usage:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/nPFQBq12ny.png&quot; alt=&quot;Cluster CPU Usage&quot; /&gt;&lt;/p&gt;

&lt;p&gt;RAM usage is always the same (including RAM usage by the application as well):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/N6HodQV--7.png&quot; alt=&quot;Cluster RAM Usage&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Cluster has some issues when using one balancer. Currently, Cluster uses a round robin algorithm to distribute the traffic. Thus, each server processes the same amount of traffic.&lt;/p&gt;

&lt;p&gt;When Cluster runs in single-balancer mode, it’s single balancer needs to do more proxying rather than processing requests itself. If it could proxy more requests, we could get even more throughput from this scenario.&lt;/p&gt;

&lt;p&gt;When using multiple balancers, there was no such issue. Each server processed more than 2500 subscriptions per minute and that’s very close to the control test, which was 2700 subscriptions per minute.&lt;/p&gt;

&lt;p&gt;There are a lot more things we can optimize. Even at this stage, we get really impressive performance and we are really proud of it.&lt;/p&gt;

&lt;h2 id=&quot;next&quot;&gt;Next&lt;/h2&gt;

&lt;p&gt;Currently, we are working on &lt;a href=&quot;https://github.com/meteorhacks/cluster/issues/8&quot;&gt;multi-core&lt;/a&gt; support for Cluster. After that, we’ll work on a new routing algorithm based on resource utilization (CPU, RAM, Eventloop). Then, Cluster will balance traffic in a predictable manner and we will get the maximum throughput.&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;We’ve released a set of new lessons on &lt;a href=&quot;https://bulletproofmeteor.com/&quot;&gt;BulletProof Meteor&lt;/a&gt; targeting &lt;a href=&quot;https://bulletproofmeteor.com/architecture/microservices-with-meteor-and-ddp&quot;&gt;microservices&lt;/a&gt; and production Meteor deployments. Give them a try.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://bulletproofmeteor.com/&quot;&gt;&lt;img src=&quot;https://cldup.com/oX1_f9-WXE.png&quot; alt=&quot;BulletProof Meteor&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <link>http://localhost:4000/cluster-performance-test-its-impressive</link>
      <guid isPermaLink="true">http://localhost:4000/cluster-performance-test-its-impressive</guid>
      <pubDate>2015-02-12 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Meteor Cluster - A Different Kind of Load Balancer for Meteor</title>
      <description>&lt;p&gt;Normally, if we need to scale a Meteor app, we need to put it behind a load balancer like Nginx or HaProxy. We need to configure it properly for Meteor and manage it separately. If we need to add or remove instances, then we need to change the configuration again and restart the load balancer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/ZWilGjwrgP.png&quot; alt=&quot;Scaling Meteor with Nginx&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;” What if we could load-balance Meteor apps by just installing a Meteor package? And if it could detect new or removed instances and route traffic accordingly, that’d be great. “&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We are proud to say, we now have a solution that can do things mentioned above. It’s &lt;a href=&quot;https://github.com/meteorhacks/cluster&quot;&gt;Cluster&lt;/a&gt;. Let’s see how we can use it.&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;Using cluster is pretty easy. First, install the following package into your Meteor app:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;meteor add meteorhacks:cluster
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, when you are running your app, export the following environment variables:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CLUSTER_DISCOVERY_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mongodb://mongo-url
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CLUSTER_SERVICE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;web &lt;span class=&quot;c&quot;&gt;# define this as a web service &lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CLUSTER_ENDPOINT_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;http://ipaddresss:port
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cluster uses MongoDB to communicate between all the Meteor instances of your app. To do this, you can use your app’s current &lt;code class=&quot;highlighter-rouge&quot;&gt;MONGO_URL&lt;/code&gt;. But if possible, use a separate replica set.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CLUSTER_ENDPOINT_URL&lt;/code&gt; is the direct URL for the Meteor app running on your server. It could be a private URL, but all the instances of your app should be able to access it.&lt;/p&gt;

&lt;p&gt;Now, deploy as many as instances of your app as possible and send the traffic to an instance of your cluster. That’s all you’ve to do.&lt;/p&gt;

&lt;p&gt;When you need to scale up, simply add more instances. There is no need to configure anything. Cluster will detect new instances and route the traffic to new servers. You can also remove running instances without affecting other instances or your app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/T1X0NYFCJK.png&quot; alt=&quot;Load Balancing with Cluster&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you need more info on this, watch this &lt;a href=&quot;https://www.youtube.com/watch?v=oudsAQZkvzQ&amp;amp;feature=youtu.be&amp;amp;t=15m27s&quot;&gt;live demo&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you are using &lt;a href=&quot;https://github.com/arunoda/meteor-up&quot;&gt;Meteor Up&lt;/a&gt; to deploy your app, you can use a configuration like &lt;a href=&quot;https://gist.github.com/arunoda/65ceb06952957e976e76&quot;&gt;this&lt;/a&gt;. &lt;br /&gt;
With this, you don’t need to configure &lt;code class=&quot;highlighter-rouge&quot;&gt;CLUSTER_ENDPOINT_URL&lt;/code&gt;. Meteor up set it automatically.
(Make sure to update Meteor Up to the latest version.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;multiple-load-balancers&quot;&gt;Multiple Load Balancers&lt;/h2&gt;

&lt;p&gt;This looks great. But with this setup, traffic is proxied through a single instance. If we’ve a high-traffic Meteor app, this will be an issue. Normally to solve such an issue, we would add multiple load balancers with DNS load-balancing.&lt;/p&gt;

&lt;p&gt;Let’s think in a different way.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;” What if every instance of your app were a load balancer? Then we wouldn’t need to worry about this issue anymore. “&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With cluster, every Meteor instance becomes a load balancer. So, if we can find a way to send traffic to these instances, we’ve the answer for our question. We can do this in two ways.&lt;/p&gt;

&lt;h3 id=&quot;1-via-dns&quot;&gt;1. Via DNS&lt;/h3&gt;

&lt;p&gt;This is the simplest solution. Configure your domain’s DNS to resolve the DNS into multiple instances of your app. That’s all.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/SbNCZH8b_N.png&quot; alt=&quot;Multiple Load Balancers via DNS&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With this solution, if one balancer goes down, you need to remove that DNS record. For that you can use a DNS solution like &lt;a href=&quot;http://aws.amazon.com/route53&quot;&gt;Route53&lt;/a&gt;, which has health-checking support.&lt;/p&gt;

&lt;h3 id=&quot;2-via-balancers&quot;&gt;2. Via Balancers&lt;/h3&gt;

&lt;p&gt;We’ve another way to do this. We can configure multiple instances in our cluster as &lt;strong&gt;balancers&lt;/strong&gt;. A balancer is a special type of instance that can accept DDP traffic directly from the browser.&lt;/p&gt;

&lt;p&gt;Once you mark some of your instances as balancers, the browser will send DDP traffic directly to these individual instances.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;DDP is the Meteor’s real-time protocol. Currently, Meteor implements it using &lt;a href=&quot;https://github.com/sockjs&quot;&gt;SockJS&lt;/a&gt;. So, DDP traffic is SockJS traffic. Which is normally WebSockets or long polling.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/OupdR1UwH7.png&quot; alt=&quot;Multiple Load Balancers via Balancers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s very easy to configure an instance as a balancer. Just expose the following environment variable when starting your app:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CLUSTER_BALANCER_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;http://url-for-the-balancer.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This balancer URL needs to be a public URL, so you may need to create a DNS entry.&lt;/p&gt;

&lt;p&gt;With this approach, we can add and remove balancers as we need and cluster will take care of the routing accordingly.&lt;/p&gt;

&lt;h2 id=&quot;production-use&quot;&gt;Production Use&lt;/h2&gt;

&lt;p&gt;For production, we prefer to use both of the above approaches for load-balancing. The DNS-based approach makes our app highly available and the balancer-based approach allows us to add and remove instances very quickly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/hnYVWGz_DS.png&quot; alt=&quot;Production Deployment using via both DNS and Balancers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s also very important to use a MongoDB Replica Set for the &lt;code class=&quot;highlighter-rouge&quot;&gt;CLUSTER_DISCOVERY_URL&lt;/code&gt; for high availability.&lt;/p&gt;

&lt;p&gt;We are currently using cluster in production for both &lt;a href=&quot;https://kadira.io/&quot;&gt;Kadira&lt;/a&gt; and &lt;a href=&quot;https://bulletproofmeteor.com/&quot;&gt;BulletProof Meteor&lt;/a&gt;. We are satisfied with its performance and now we don’t need to monitor and manage a Nginx layer. We are planning a performance test and we’ll publish the results soon.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;EDIT: We did a performance test. Here are the &lt;a href=&quot;https://meteorhacks.com/cluster-performance-test-its-impressive.html&quot;&gt;results&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;next&quot;&gt;Next&lt;/h2&gt;

&lt;p&gt;Cluster is not just a load balancer, it’s a service discovery solution for Meteor. It is well suited for microservices. We’ll write a blog post about that soon. In the meantime, try to follow these resources.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/meteorhacks/cluster&quot;&gt;Cluster Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bulletproofmeteor.com/architecture/microservices-with-meteor-and-ddp&quot;&gt;Microservices with Meteor and DDP on BulletProof Meteor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bulletproofmeteor.com/architecture/microservices-beyond-basics&quot;&gt;Microservices - Beyond Basics on BulletProof Meteor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bulletproofmeteor.com/architecture/deploying-a-highly-available-meteor-cluster&quot;&gt;Deploying a Highly Available Meteor Cluster on BulletProof Meteor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://youtu.be/oudsAQZkvzQ&quot;&gt;Microservices Show Feb 2015&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <link>http://localhost:4000/cluster-a-different-kind-of-load-balancer-for-meteor</link>
      <guid isPermaLink="true">http://localhost:4000/cluster-a-different-kind-of-load-balancer-for-meteor</guid>
      <pubDate>2015-02-04 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>MeteorHacks Show Feb 2015 - Scaling Meteor and Microservices</title>
      <description>&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/QitxWIxnphs&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;1&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;This time we are talking about Scaling Meteor and Microservices. For scaling, we will talk about what are the concepts and tools we can use to scale Meteor. We’ve also built a new scaling solution called &lt;a href=&quot;https://github.com/meteorhacks/cluster&quot;&gt;cluster&lt;/a&gt; and we will show you how it can be used to scale Meteor apps.&lt;/p&gt;

&lt;p&gt;And then, we’ll talk about Microservices. It’s the buzz word these days and everyone trying to architect their apps as Microservices. The good news is, Meteor and DDP is a perfect match for Microservices. With that, we can scale our apps in a different way.&lt;/p&gt;

&lt;p&gt;Let’s meet on &lt;a href=&quot;http://www.worldtimebuddy.com/?qm=1&amp;amp;lid=1248991,5368361&amp;amp;h=5368361&amp;amp;date=2015-2-2&amp;amp;sln=9-10&quot;&gt;February 2 and 9 AM PST&lt;/a&gt; with the show.&lt;/p&gt;

&lt;p&gt;Click the following &lt;a href=&quot;http://www.crowdcast.io/e/meteorhacks-show-few-2015&quot;&gt;link&lt;/a&gt; to register with the Hangout.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.crowdcast.io/e/meteorhacks-show-few-2015&quot;&gt;MeteorHacks Show Feb 2015 - Scaling Meteor and Microservices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <link>http://localhost:4000/meteorhacks-show-feb</link>
      <guid isPermaLink="true">http://localhost:4000/meteorhacks-show-feb</guid>
      <pubDate>2015-01-28 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>BulletProof Meteor Leaderboard &amp; Prizes</title>
      <description>&lt;p&gt;I hope you’ve seen the BulletProof Meteor &lt;a href=&quot;https://bulletproofmeteor.com/leaderboard&quot;&gt;leaderboard&lt;/a&gt;. You might even be listed on it as well. Let me tell you a little about the leaderboard.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It’s a weekly leaderboard.&lt;/li&gt;
  &lt;li&gt;It is reset every Sunday at 12:00 midnight GMT.&lt;/li&gt;
  &lt;li&gt;Points are calculated for the current week for each user.&lt;/li&gt;
  &lt;li&gt;The top 20 users are listed on the leaderboard.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You get points for completing lessons. You can see the number of points each step is worth in the step navigation menu as shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/X-nb76OUAK.png&quot; alt=&quot;BulletProof Meteor Points&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If any given step has a question, you need to complete it to get the points. If you skip the question, you won’t get any points. But you can come back later and answer it.&lt;/p&gt;

&lt;p&gt;We hope getting points and being listed on the leaderboard will be fun and give you some encouragement.&lt;/p&gt;

&lt;h2 id=&quot;prizes&quot;&gt;Prizes&lt;/h2&gt;

&lt;p&gt;And we’ve decided to offer prizes to users based on their leaderboard position each week. Currently, we are giving discounts for Kadira’s &lt;a href=&quot;https://kadira.io/pricing.html&quot;&gt;paid plans&lt;/a&gt;. (We’ll have more prizes in the future.)&lt;/p&gt;

&lt;p&gt;Here are the prizes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1st place - FREE access to Kadira’s startup plan for 4 months&lt;/li&gt;
  &lt;li&gt;2nd place - FREE access to Kadira’s startup plan for 3 months&lt;/li&gt;
  &lt;li&gt;3-5th places - 50% discount off Kadira’s startup plan for 4 months&lt;/li&gt;
  &lt;li&gt;6-10th places - 25% discount off Kadira’s startup plan for 4 months&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You need to take up the offer within one month after you’ve been placed on the leaderboard.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This offer is also valid for the winners of past leaderboards. For those winners, one month is calculated from today (January 14, 2015).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;how-to-collect-your-prize&quot;&gt;How to collect your prize&lt;/h2&gt;

&lt;p&gt;If you are a winner, just send your username and the leaderboard URL to hello [at] meteorhacks.com.
Then we’ll give you instructions for how to collect your prize.&lt;/p&gt;

&lt;p&gt;We hope this will energize you to learn more to get more from BulletProof Meteor.&lt;/p&gt;
</description>
      <link>http://localhost:4000/bulletproof-meteor-leaderboard-and-prizes</link>
      <guid isPermaLink="true">http://localhost:4000/bulletproof-meteor-leaderboard-and-prizes</guid>
      <pubDate>2015-01-14 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Implementing an Instant Search Solution with Meteor</title>
      <description>&lt;p&gt;I think that I don’t need to say much about instant searching. I am sure not sure who came up with the idea first, but Google made it so popular.&lt;/p&gt;

&lt;p&gt;So, today I will show you how to build such an instant search solution with Meteor. To demo it, I’ll build a super fast search app to search Meteor packages. You can try it live from &lt;a href=&quot;http://instant-search-demo.meteor.com/&quot;&gt;here&lt;/a&gt; or watch the following video:&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/dXm2pf-9UZk&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;1&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;When we are building a solution like this, we could use a project like &lt;a href=&quot;https://twitter.github.io/typeahead.js/&quot;&gt;typeahead.js&lt;/a&gt;. But, then it would be extremely hard to customize it as we want. Therefore, we are using a different approach to build the instant search functionality for this application.&lt;/p&gt;

&lt;h2 id=&quot;introducing-search-source&quot;&gt;Introducing Search Source&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/meteorhacks/search-source&quot;&gt;Search Source&lt;/a&gt; is a reactive data store specially built for searching. Let me show you some features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;server client data synchronization&lt;/li&gt;
  &lt;li&gt;supports any search backend (MongoDB, Elasticsearch, etc.)&lt;/li&gt;
  &lt;li&gt;client-side search support&lt;/li&gt;
  &lt;li&gt;client-side data caching&lt;/li&gt;
  &lt;li&gt;text highlight and data transformation&lt;/li&gt;
  &lt;li&gt;metadata support (time elapsed, search count)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s give it a try.&lt;/p&gt;

&lt;p&gt;First add Search Source to your app:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;meteor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;meteorhacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then create a source in the client:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;keepHistory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;localSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'packageName'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'description'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;PackageSearch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SearchSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'packages'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then define the data source in the server. In this case, we are doing a regular expression search, fetching data and sending them to the client:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;SearchSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defineSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'packages'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;searchText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isoScore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;searchText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;regExp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buildRegExp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;searchText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;selector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;packageName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;regExp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;regExp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]};&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buildRegExp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;searchText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// this is a dumb implementation&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;searchText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\-\:]&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;+/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;(&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'|'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ig&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that, we can get a reactive data source for this source, which can be used to render templates:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;searchResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;helpers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;getPackages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PackageSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;matchText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;regExp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;matchText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;regExp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;b&amp;gt;$&amp;amp;&amp;lt;/b&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isoScore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  
  &lt;span class=&quot;na&quot;&gt;isLoading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PackageSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the above, we have used a transform function to highlight terms we are searching. You can use it in different ways to alter selected text according to the search.&lt;/p&gt;

&lt;p&gt;And then since we have transformed the search result and put some HTML into the text, we need to render the fields inside braces tripple braces like below:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/arunoda/c5a269e53e0382fc2db3.js&quot;&gt;
&lt;/script&gt;

&lt;p&gt;Now everything is ready. But we haven’t implemented the search functionality yet. It’s very simple to do so. We can create a key-up event like below and invoke the search method of the data source:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;searchBox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;keyup #search-box&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;throttle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;PackageSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;in the above code, we have used &lt;code class=&quot;highlighter-rouge&quot;&gt;_.throttle&lt;/code&gt; to avoid sending every keystroke to the server.&lt;/p&gt;

&lt;p&gt;Now we’ve a pretty decent search app. See: &lt;a href=&quot;http://instant-search-demo.meteor.com/&quot;&gt;http://instant-search-demo.meteor.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Complete source code for this app is &lt;a href=&quot;https://github.com/meteorhacks-samples/meteor-instant-search-demo&quot;&gt;available&lt;/a&gt; on GitHub.&lt;/p&gt;

&lt;p&gt;There are some other cool features in “Search Source” like metadata handling. Go check out the &lt;a href=&quot;https://github.com/meteorhacks/search-source&quot;&gt;documentation&lt;/a&gt; of Search Source.&lt;/p&gt;

&lt;h2 id=&quot;learn-more-about-searching&quot;&gt;Learn more about searching&lt;/h2&gt;

&lt;p&gt;Searching is a huge topic and the search backend needs to be robust if we want to build a fast and accurate search solution.&lt;/p&gt;

&lt;p&gt;In this example, we have used MongoDB regular expression queries for the search. But it’s not an ideal solution. For better results, we can use a MongoDB full text search or Elasticsearch instead.&lt;/p&gt;

&lt;p&gt;We cover these topics in depth on BulletProof Meteor:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://bulletproofmeteor.com/database-modeling/searching-with-mongodb&quot;&gt;Searching with MongoDB&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bulletproofmeteor.com/database-modeling/searching-with-elastic-search&quot;&gt;Searching with Elastic Search&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bulletproofmeteor.com/database-modeling/building-a-real-world-search-app-meteor-package-search&quot;&gt;Building a Real-World Search App – Meteor Package Search&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;What do you think about Search Source? Give it a try and let me know how it works for you.&lt;/p&gt;
</description>
      <link>http://localhost:4000/implementing-an-instant-search-solution-with-meteor</link>
      <guid isPermaLink="true">http://localhost:4000/implementing-an-instant-search-solution-with-meteor</guid>
      <pubDate>2015-01-09 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>MeteorHacks Show 2 – Recording and Follow-up Blog Posts</title>
      <description>&lt;p&gt;We had the &lt;a href=&quot;https://meteorhacks.com/meteorhacks-show-server-side-rendering-kadira-insight.html&quot;&gt;MeteorHacks Show 2&lt;/a&gt; on the 16th, and it was a very successful &lt;a href=&quot;http://www.crowdcast.io/e/meteorhacks-show&quot;&gt;event&lt;/a&gt; with more than &lt;strong&gt;200&lt;/strong&gt; attendees. We had Meteor developers from around the world, and the chat on the &lt;a href=&quot;http://www.crowdcast.io/e/meteorhacks-show&quot;&gt;crowdcast&lt;/a&gt; was super busy.&lt;/p&gt;

&lt;p&gt;Here’s the recording:&lt;/p&gt;

&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/rcQaNl3qaXc&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;1&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;(There was an issue with the audio in some parts; we’ll improve that next time.)&lt;/p&gt;

&lt;p&gt;Our main topic was server-side rendering, and I did a follow-up blog post based on the talk I did. You can read it here:&lt;/p&gt;

&lt;p&gt;Read Now: &lt;a href=&quot;https://meteorhacks.com/meteor-server-sider-rendering-for-seo-purpose.html&quot;&gt;Meteor Server-Side Rendering for SEO Purposes&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We’ll be doing the next episode in January, most probably on Meteor security. Expect some surprises from us. :)&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <link>http://localhost:4000/meteorhacks-show-recording-and-follow-up-blog-post</link>
      <guid isPermaLink="true">http://localhost:4000/meteorhacks-show-recording-and-follow-up-blog-post</guid>
      <pubDate>2014-12-18 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Meteor Server-Side Rendering for SEO Purposes</title>
      <description>&lt;blockquote&gt;
  &lt;p&gt;This is the follow-up blog post for the talk I did on the MeteorHacks Show 2.
You can watch the talk through &lt;a href=&quot;https://www.youtube.com/watch?v=rcQaNl3qaXc&quot;&gt;this link&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before starting anything, we need to understand why server-side rendering is important for apps like Meteor. There are two main reasons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;To improve initial loading performance&lt;/li&gt;
  &lt;li&gt;For SEO purposes&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/meteorhacks/fast-render&quot;&gt;Fast Render&lt;/a&gt; tackles the initial loading problem, and it works great. However, we can improve it even further with server-side rendering.&lt;/p&gt;

&lt;p&gt;We can also use server-side rendering for SEO purposes and allow search engines to see the content in our apps. This is the purpose of this blog post.&lt;/p&gt;

&lt;h2 id=&quot;meteor-and-seo--current-state&quot;&gt;Meteor and SEO – Current State&lt;/h2&gt;

&lt;p&gt;We know that Meteor does not send HTML over the wire. Search engines usually only read HTML and never execute JavaScript. Thus, it’s nearly impossible for search engines to see what’s available inside the Meteor app.&lt;/p&gt;

&lt;p&gt;To fix this issue, Meteor uses a protocol called &lt;a href=&quot;https://developers.google.com/webmasters/ajax-crawling/docs/getting-started&quot;&gt;AJAX crawling&lt;/a&gt; to allow search engines to see the content inside the Meteor app. This is how it works:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cldup.com/4cHYcVvd23.jpg&quot;&gt;&lt;img src=&quot;https://cldup.com/4cHYcVvd23.jpg&quot; alt=&quot;Meteor's AJAX Crawling&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above graph, you can see the usage of PhantomJS. &lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJS&lt;/a&gt; is a headless Web browser that Meteor uses to render the page and get HTML content. This solution works well.&lt;/p&gt;

&lt;h2 id=&quot;but-phantomjs-is-hard&quot;&gt;But PhantomJS is hard&lt;/h2&gt;

&lt;p&gt;Even though this solution works well, the practical use of PhantomJS is very hard. Here are some of the problems that we face:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Meteor spawns a new PhantomJS instance for every search engine request. If a search engine crawls many pages, your CPU and memory usage will suddenly spike. This might kill your app.&lt;/li&gt;
  &lt;li&gt;PhantomJS runs an older version of JavaScript, so your app might not work.&lt;/li&gt;
  &lt;li&gt;PhantomJS is not available on cloud-hosting services like modulus.io.&lt;/li&gt;
  &lt;li&gt;Sometimes you’ll see errors on the server log and PhantomJS won’t render HTML output. It’s extremely hard to debug the issue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Everyone in the Meteor community is looking for a solution.&lt;/p&gt;

&lt;h2 id=&quot;server-side-rendering-is-also-hard&quot;&gt;Server-side rendering is also hard&lt;/h2&gt;

&lt;p&gt;The ultimate version of server-side rendering is something like this.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You simply add a package&lt;/li&gt;
  &lt;li&gt;Then it will do all the hard work for you&lt;/li&gt;
  &lt;li&gt;When a new request comes it will send the HTML along with the initial request&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But it requires a lot of changes to a few core packages. Because of that, you won’t see an official server-side rendering solution soon.&lt;/p&gt;

&lt;p&gt;That being said, we still need a solution.&lt;/p&gt;

&lt;h2 id=&quot;replacing-phantomjs-with-blaze&quot;&gt;Replacing PhantomJS with Blaze&lt;/h2&gt;

&lt;p&gt;We’re going to replace PhantomJS and use Blaze to get HTML content in the aforementioned AJAX crawling flow. To do that, we need to create a separate set of HTML templates for the server side.&lt;/p&gt;

&lt;p&gt;That’s because it’s a little hard to use current client-side templates on the server. But I’m not saying it’s impossible.&lt;/p&gt;

&lt;p&gt;In this blog post, we’re going to use two versions of the templates. The first set is for the client, and the other is for the server. Let’s assume we’ve all client side templates and we’ve a working meteor app like below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/-fdsU-rvd9.png&quot; alt=&quot;Demo App for Meteor SSR&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Link: &lt;a href=&quot;http://seo-without-spiderable.meteor.com/&quot;&gt;http://seo-without-spiderable.meteor.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are also going to use the following packages in this process.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/meteorhacks/meteor-ssr&quot;&gt;meteorhacks:ssr&lt;/a&gt; – for compiling and rendering templates on the server&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/meteorhacks/picker&quot;&gt;meteorhacks:picker&lt;/a&gt; – for server-side routing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you need to learn more about these, watch this: &lt;a href=&quot;http://youtu.be/rcQaNl3qaXc?t=8m56s&quot;&gt;video&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;creating-templates&quot;&gt;Creating Templates&lt;/h2&gt;

&lt;p&gt;In the &lt;strong&gt;private&lt;/strong&gt; directory of your app, define all the templates for the server side. In our case, we have three templates:&lt;/p&gt;

&lt;h3 id=&quot;homehtml&quot;&gt;home.html&lt;/h3&gt;
&lt;p&gt;This is the template to render the home page content (post list).&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/arunoda/6e8fbe6678e16f78a9cd.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;singleposthtml&quot;&gt;singlepost.html&lt;/h3&gt;
&lt;p&gt;This is the template to render a single page.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/arunoda/0af625220d2325ece75c.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;layouthtml&quot;&gt;layout.html&lt;/h3&gt;
&lt;p&gt;This is the layout of the app.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/arunoda/1e9cf96f8c4b448a8805.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;We are using a dynamic template to render our home and single post templates in this layout.&lt;/p&gt;

&lt;p&gt;We also have a CSS file inside the private directory named &lt;code class=&quot;highlighter-rouge&quot;&gt;style.css&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;compiling-templates&quot;&gt;Compiling Templates&lt;/h2&gt;

&lt;p&gt;We can compile these templates by adding the following file to the &lt;strong&gt;ssr/server&lt;/strong&gt; directory.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;SSR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compileTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'layout'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Assets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'layout.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Blaze does not allow to render templates with DOCTYPE in it.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// This is a trick to made it possible&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;helpers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;getDocType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;!DOCTYPE html&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;SSR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compileTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'home'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Assets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'home.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;SSR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compileTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'singlepost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Assets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'singlepost.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We are getting the content of the templates that reside in the private directory via the &lt;a href=&quot;http://docs.meteor.com/#/full/assets_getText&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Assets.getText&lt;/code&gt;&lt;/a&gt; API.&lt;/p&gt;

&lt;h2 id=&quot;define-routes&quot;&gt;Define Routes&lt;/h2&gt;

&lt;p&gt;Now that we have templates on the server, it’s time to define routes. For that, we will use the meteorhacks:picker package. It has a route syntax that is very similar to that of expressjs and iron-router. But it’s a simple router made only works in the server. (It also has a very nice feature called filtering.)&lt;/p&gt;

&lt;p&gt;This route file also goes into the &lt;strong&gt;ssr/server&lt;/strong&gt; directory.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Assets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'style.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// filtering only HTTP request sent by seo via AJAX-Crawling&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// this is meteorhacks:pickers coolest feature&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;seoPicker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Picker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/_escaped_fragment_/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// route for the home page&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;seoPicker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SSR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'layout'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;home&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// route for the single post&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;seoPicker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/post/:_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SSR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'layout'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;singlepost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;one-last-step&quot;&gt;One Last Step&lt;/h2&gt;

&lt;p&gt;Now everything is ready. However, our app is not yet AJAX-crawling enabled. To enable crawling, we need to put following file into the ssr/client directory. It will contain the meta tag required in the AJAX crawling flow.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/arunoda/088ac7002f4e4c25f2e0.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;That’s all you have to to.&lt;/p&gt;

&lt;p&gt;You can get the complete source code from this &lt;a href=&quot;https://github.com/arunoda/meteor-seo-without-spiderable&quot;&gt;GitHub Repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is not as easy as adding a package like spiderable, but with this solution, you can get rid of PhantomJS, and that’ll eliminate a ton of issues. Ultimately, this solution will save you time and resources.&lt;/p&gt;

&lt;p&gt;Try to implement this in your app, and share your experience. I’m looking forward to hearing about them.&lt;/p&gt;
</description>
      <link>http://localhost:4000/meteor-server-sider-rendering-for-seo-purpose</link>
      <guid isPermaLink="true">http://localhost:4000/meteor-server-sider-rendering-for-seo-purpose</guid>
      <pubDate>2014-12-18 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>MeteorHacks Show 2 - Server Side Rendering &amp; Kadira Insight</title>
      <description>&lt;p&gt;It’s been almost an year, we did the &lt;a href=&quot;https://meteorhacks.com/whats-happended-at-the-first-meteorhacks-show.html&quot;&gt;first episode&lt;/a&gt; of the MeteorHacks Show. I don’t know why we couldn’t do it after that. Okay, let’s do it again.&lt;/p&gt;

&lt;h3 id=&quot;server-side-rendering&quot;&gt;Server Side Rendering&lt;/h3&gt;

&lt;p&gt;First, we’re going to talk about Server Side Rendering. It’s related to our recently released &lt;a href=&quot;https://github.com/meteorhacks/meteor-ssr&quot;&gt;meteorhacks:ssr&lt;/a&gt; package and how you can use it in practical scenarios. Here are some of the things we are planned to discuss:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Get rid of PhantomJS for the SEO stuff&lt;/li&gt;
  &lt;li&gt;Emails with inline CSS&lt;/li&gt;
  &lt;li&gt;PDF generation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;kadira-insight&quot;&gt;Kadira Insight&lt;/h3&gt;

&lt;p&gt;Next, we are going to show you a Kadira feature we are about to release. It’s &lt;strong&gt;Kadira Insight&lt;/strong&gt;. With that, you can identify patterns in your app. Just like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How your CPU increases with the number of sessions?&lt;/li&gt;
  &lt;li&gt;Does network impact affects CPU usage?&lt;/li&gt;
  &lt;li&gt;When users are more active?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After that, of course you can ask questions. We are happy to answer and share our experience.&lt;/p&gt;

&lt;p&gt;So, &lt;a href=&quot;http://www.crowdcast.io/e/meteorhacks-show&quot;&gt;join with us&lt;/a&gt; on 16th December on 9 AM PST.&lt;/p&gt;

&lt;p&gt;Register Here: &lt;a href=&quot;http://www.crowdcast.io/e/meteorhacks-show&quot;&gt;http://www.crowdcast.io/e/meteorhacks-show&lt;/a&gt;&lt;/p&gt;
</description>
      <link>http://localhost:4000/meteorhacks-show-server-side-rendering-kadira-insight</link>
      <guid isPermaLink="true">http://localhost:4000/meteorhacks-show-server-side-rendering-kadira-insight</guid>
      <pubDate>2014-12-14 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Meteor SEO - Google Fetch &amp; Render</title>
      <description>&lt;p&gt;Earlier this year, Google announced that Googlebot had started to &lt;a href=&quot;http://googlewebmastercentral.blogspot.com/2014/05/rendering-pages-with-fetch-as-google.html&quot;&gt;render&lt;/a&gt; web pages using a modern browser instead of just looking at HTML. This was great news for anyone using Meteor, as we’d had some difficulties with SEO.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you need to learn about basics of Meteor and SEO, refer this &lt;a href=&quot;http://www.manuel-schoebel.com/blog/meteor-and-seo&quot;&gt;article&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, alongside the launch of our course, &lt;a href=&quot;https://bulletproofmeteor.com/&quot;&gt;BulletProof Meteor&lt;/a&gt;, I decided to do an experiment to see whether Googlebot’s new feature worked with Meteor apps. Here are the results.&lt;/p&gt;

&lt;h2 id=&quot;without-spiderable&quot;&gt;Without Spiderable&lt;/h2&gt;

&lt;p&gt;First, I removed the spiderable package from the Bulletproof Meteor app and deployed it. Then I visited Google Webmaster Tools and under “Crawl”, selected “Fetch as Google”, then clicked “Fetch and Render”.&lt;/p&gt;

&lt;p&gt;Here’s what I got back:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/IFuZfWGrW1.png&quot; alt=&quot;BulletProof Meteor inside Google WebMaster Tools&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Awesome! Google had correctly rendered my app. However, if you look the bottom of the above image, you’ll notice that the SockJS connections failed. So then how did Googlebot get the data to render the page?&lt;/p&gt;

&lt;p&gt;Answer: because &lt;a href=&quot;https://github.com/meteorhacks/fast-render&quot;&gt;Fast Render&lt;/a&gt; sent the data along with the initial page load. This is an another reason you want to use Fast Render with your app :)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;br /&gt;
Even though Googlebot has the ability to render using JavaScript, it still can’t handle WebSockets or AJAX requests.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;search-results&quot;&gt;Search Results&lt;/h3&gt;

&lt;p&gt;So technically, Google was now aware of some of the content of Bulletproof Meteor without any help from spiderable. Because of that, I expected Google to index BulletProof Meteor properly. But this is what the results looked like after a few days:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/sfe3Dc1D7e.png&quot; alt=&quot;BulletProof Meteor without Spiderable&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hmm. What was going on here? There was no phrase like “BulletProof Meteor is Here!” inside the app. But I did remember posting links on crater.io and some other sites using that title.&lt;/p&gt;

&lt;p&gt;It seemed like even though Googlebot was indexing my app, it still couldn’t read my app. But wait, the app had been rendered just fine by Googlebot! I’ll come back to this again in a second.&lt;/p&gt;

&lt;h2 id=&quot;hello-again-spiderable&quot;&gt;Hello again, Spiderable&lt;/h2&gt;

&lt;p&gt;So I decided to re-add spiderable to the app and see if that made a difference. After about 24 hours, I checked Google again and this is what I saw:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/Jc_a3WqRZi.png&quot; alt=&quot;BulletProof Meteor with Spiderable&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After re-adding spiderable, it looked like Googlebot could finally index the app and see what was inside it.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I put BulletProof Meteor through the whole process a second time and the results were the same. So it seems like even though Googlebot can now render pages, it won’t do it for all websites. Maybe Google is trying to prevent fraud. That would be quite understandable as it takes a massive amount of resources to render the entire internet.&lt;/p&gt;

&lt;p&gt;So at this moment, we still need to depend on spiderable. But it’s still a good idea to add Fast Render to your app and allow Googlebot to see what’s inside. It might increase your app’s ranking.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Edited and proofread by &lt;a href=&quot;https://www.linkedin.com/profile/view?id=135477114&amp;amp;authType=name&amp;amp;authToken=xFLU&amp;amp;trk=api*a109924*s118458*&quot;&gt;Mitchell Wulfman&lt;/a&gt; (&lt;a href=&quot;https://twitter.com/wulfmeister&quot;&gt;@wulfmeister&lt;/a&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <link>http://localhost:4000/meteor-seo-google-fetch-and-render</link>
      <guid isPermaLink="true">http://localhost:4000/meteor-seo-google-fetch-and-render</guid>
      <pubDate>2014-11-17 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Meteor Day and MeteorHacks</title>
      <description>&lt;p&gt;Now we’ve &lt;a href=&quot;https://www.meteor.com&quot;&gt;Meteor 1.0&lt;/a&gt; and we are so happy about it. Everyone is getting ready to celebrate it with the &lt;a href=&quot;http://meteorday.com/&quot;&gt;Worldwide Meteor Day&lt;/a&gt; on this Thursday (November 6). We are also ready for that even though we don’t host an official meetup. So, let me tell you, what we’re up to.&lt;/p&gt;

&lt;h2 id=&quot;bullet-proof-meteor&quot;&gt;Bullet Proof Meteor&lt;/h2&gt;

&lt;p&gt;We’ll be launching &lt;a href=&quot;https://arunoda.typeform.com/to/glm9Qk&quot;&gt;BulletsProof Meteor&lt;/a&gt; on the Meteor Day. This is how it’ll be look like.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/2EyJ84-2ca.png&quot; alt=&quot;BulletsProof Meteor&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;new-projects&quot;&gt;New Projects&lt;/h2&gt;

&lt;p&gt;It’s a shame if we’ve not released a new project on the Meteor Day. Yes we’ve couple of new projects baking right now. I’m not going to tell you about them right now, but they’ll be super useful for your Meteor apps.&lt;/p&gt;

&lt;h2 id=&quot;q--a-session&quot;&gt;Q &amp;amp; A Session&lt;/h2&gt;

&lt;p&gt;We are also doing Q &amp;amp; A session on the &lt;a href=&quot;https://hub.kadira.io&quot;&gt;Kadira Hub&lt;/a&gt; and you can ask anything related to Meteor, Kadira or MeteorHacks. We’ll be there from &lt;a href=&quot;http://www.worldtimebuddy.com/?qm=1&amp;amp;lid=5391959,1248991,2643743,2147714&amp;amp;h=5391959&amp;amp;date=2014-11-6&amp;amp;sln=8-10&quot;&gt;8 AM to 10 AM (PST)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mad.ly/signups/124297/join&quot;&gt;Register Here&lt;/a&gt; for the Q &amp;amp; A and we’ll notify you when we are live.&lt;/p&gt;
</description>
      <link>http://localhost:4000/meteor-day-and-meteorhacks</link>
      <guid isPermaLink="true">http://localhost:4000/meteor-day-and-meteorhacks</guid>
      <pubDate>2014-11-03 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Profiling a Meteor app: Telescope</title>
      <description>&lt;p&gt;Meteor is &lt;a href=&quot;https://groups.google.com/forum/#!topic/meteor-core/IGORBS6GBAM&quot;&gt;reaching&lt;/a&gt; version 1.0 and stabilizing its APIs and that’s great news. So I decided to do a load test on Meteor to identify its CPU usage. Frankly, I wanted to play around with Kadira’s new CPU-profiling feature and this is what I did.&lt;/p&gt;

&lt;p&gt;I usually use &lt;a href=&quot;http://www.telesc.pe/&quot;&gt;Telescope&lt;/a&gt; to benchmark and test experiments I work with. So I decided to do a load test on Telescope to see what happens.&lt;/p&gt;

&lt;p&gt;This is a DDP-based load test, written using our unfinished load-testing tool “meteor-down”. My friend &lt;a href=&quot;https://twitter.com/mnmtanish&quot;&gt;Thanish&lt;/a&gt;, the guy behind “meteor-down”, helped me to set up the load test.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’ll talk more about “meteor-down” in another post.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The test case is pretty simple:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A user logs into Telescope.&lt;/li&gt;
  &lt;li&gt;Read a posts and some comments.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I ran this test with a concurrency of 50 which means 50 users were browsing Telescope at the same time. I did this test on my MacBook Air and my intention was not to compare Meteor with some other framework, rather to find out what was happening inside.&lt;/p&gt;

&lt;p&gt;If you are interested in looking at the load-testing script then check it out &lt;a href=&quot;https://gist.github.com/mnmtanish/fe4f7efb3db24e83c310&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;taking-the-profile&quot;&gt;Taking the Profile&lt;/h2&gt;

&lt;p&gt;Once the load test was in progress, I took a &lt;a href=&quot;https://kadira.io/academy/meteor-cpu-profiling/&quot;&gt;CPU profile&lt;/a&gt; of the Telescope instance using Kadira. You can learn more about how to take a CPU profile here. Here’s the summary:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/uUvt1EhuKi.png&quot; alt=&quot;Telescope CPU Profiling Summary&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By look at this breakdown, we can understand that over 20% of cpu is spent on sending data to the client.&lt;/p&gt;

&lt;h2 id=&quot;diving-deep&quot;&gt;Diving Deep&lt;/h2&gt;

&lt;p&gt;So let me dive deep and show you what’s really happening inside. Before that I need to explain what a flame graph is.&lt;/p&gt;

&lt;h3 id=&quot;flamegraphs&quot;&gt;Flamegraphs&lt;/h3&gt;

&lt;p&gt;A flamegraph is a way to analyze the CPU utilization of individual functions and their call stacks very easily. Here’s a sample flame graph:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/pT-YdnTfRb.png&quot; alt=&quot;Sample Flamegraph&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Each bar represents a function in the app.&lt;/li&gt;
  &lt;li&gt;The color of a bar has no meaning.&lt;/li&gt;
  &lt;li&gt;The length of a bar represents the amount of time it (the function and its children) was on the CPU.&lt;/li&gt;
  &lt;li&gt;A function can be a direct parent for one or many functions. In this example, an anonymous function is the parent for both buildPayload and HTTP.call.&lt;/li&gt;
  &lt;li&gt;The function (or part of it) on the top is known to be on the CPU. You can think about this another way: functions with a black background are those that stay in the CPU.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let me explain this further:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;countObservers&lt;/code&gt; is wholly on the CPU as it is always on the top of the stack.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_.each._.forEach&lt;/code&gt; spends some of its time on the CPU itself and it is also a parent of countSubData.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;buildPayload&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP.call&lt;/code&gt; and many others never spend time on the CPU.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://kadira.io/academy/analyze-meteor-cpu-profile/&quot;&gt;Click here&lt;/a&gt; to learn more about this.&lt;/p&gt;

&lt;p&gt;Watch this video to see how I analyze taken CPU profile.&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/vvrYX5dEARY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;1&quot;&gt;
&lt;/iframe&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Most notably Meteor spends a lot of CPU power when sending data. Additionally Meteor also spends some CPU time processing oplog data as well.&lt;/p&gt;

&lt;p&gt;Yes. Meteor adds some additional overhead but what you get from Meteor is more than this cost. But I hope Meteor will work on performance improvements after 1.0 and make it better.&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you are running a production app, I highly recommend that you &lt;a href=&quot;https://kadira.io/academy/meteor-cpu-profiling/&quot;&gt;take a CPU profile&lt;/a&gt; to see what’s really happening under the hood. And you can do this in under a minute.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://kadira.io/academy/meteor-cpu-profiling/&quot;&gt;&lt;img src=&quot;https://cldup.com/9e2Zti7psL.png&quot; alt=&quot;Meteor CPU Profiling with Kadira&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
      <link>http://localhost:4000/profiling-a-meteor-app-telescope</link>
      <guid isPermaLink="true">http://localhost:4000/profiling-a-meteor-app-telescope</guid>
      <pubDate>2014-10-20 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Server Side Rendering for Meteor</title>
      <description>&lt;p&gt;Last weekend, I was able to spend enough time on hacking meteor specially to understand the state of the Server Side Rendering (SSR).&lt;/p&gt;

&lt;p&gt;And luckily, I could be able to run blaze with it’s full power on the server after few hours of work. Let’s me show you what I’ve come up with and how useful it can be.&lt;/p&gt;

&lt;h2 id=&quot;idea&quot;&gt;Idea&lt;/h2&gt;

&lt;p&gt;My initial idea was to replace &lt;a href=&quot;https://github.com/meteorhacks/fast-render&quot;&gt;fast-render&lt;/a&gt; by rendering whole initial set of templates on the server. So, my research goes towards that. And I wanted to implement this without forking meteor. So anyone can use it right-away by adding a package.&lt;/p&gt;

&lt;h2 id=&quot;success&quot;&gt;Success&lt;/h2&gt;

&lt;p&gt;I was able to load all the client side templates on the server. That means now we can write template helpers targeting server side and render those templates on the server.&lt;/p&gt;

&lt;p&gt;For that you can use &lt;a href=&quot;https://github.com/meteorhacks/meteor-ssr#api&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SSR.render&lt;/code&gt;&lt;/a&gt; api. Let’s give it a try:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install the SSR package&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;meteor add meteorhacks:ssr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Template on the Client&lt;/strong&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/arunoda/852f7607c246eaf83c7f.js&quot;&gt;
&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Helpers written on the server&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// server/posts.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getPosts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Render it on the server&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// server/main.js&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SSR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'posts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'meteor'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;I did this, in order to get the initial HTML when the page loads for the first time. But, I couldn’t be able to get it working since it involves lot of other stuffs beside server side rendering. (Like routing, subscriptions and so on)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;challenges&quot;&gt;Challenges&lt;/h2&gt;

&lt;p&gt;What I build was a 98% working blaze in the server. That includes dynamic templates, template inclusion, mongo cursors inside helpers and few more stuff.&lt;/p&gt;

&lt;p&gt;Most of the stuff has been already done by Meteor. But I had to change few things. Once such thing is the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;Tracker&lt;/code&gt; apis. It does not works well for our purpose. I also had to implement &lt;a href=&quot;https://github.com/meteorhacks/meteor-ssr/blob/master/lib/dynamic.js&quot;&gt;dynamic templates&lt;/a&gt; support for the Server Side as well.&lt;/p&gt;

&lt;h2 id=&quot;server-side-only-templates&quot;&gt;Server Side only Templates&lt;/h2&gt;

&lt;p&gt;Normally, Meteor builds templates while you are bundling your app. But it does not build templates reside on your server directory. Because of that, we still needs to define our templates(only &lt;code class=&quot;highlighter-rouge&quot;&gt;.html&lt;/code&gt; files)  inside client directory, even though we only use them on the server.&lt;/p&gt;

&lt;p&gt;So, I’ve made it simple by introducing another API called &lt;code class=&quot;highlighter-rouge&quot;&gt;SSR.compileTemplate&lt;/code&gt; to compile templates on the server. In order to do that, you need to create your templates in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/private&lt;/code&gt; directory and you need to write &lt;code class=&quot;highlighter-rouge&quot;&gt;.html&lt;/code&gt; files with just the template content.&lt;/p&gt;

&lt;h3 id=&quot;demo-time&quot;&gt;Demo Time&lt;/h3&gt;

&lt;p&gt;Let’s say I need to create an email which contains a list of blog post titles created by a given user. This is how I’m gonna do that with &lt;a href=&quot;https://github.com/meteorhacks/meteor-ssr&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SSR&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;template on the &lt;code class=&quot;highlighter-rouge&quot;&gt;/private&lt;/code&gt; directory (assets)&lt;/strong&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/arunoda/ee8f48c471d082e2f994.js&quot;&gt;
&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;compile the template and create helpers&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// compile the template&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;SSR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compileTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'posts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Assets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'posts.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getPosts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;get the html whenever you need it&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SSR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'posts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'user@company.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;future&quot;&gt;Future&lt;/h2&gt;
&lt;p&gt;I really like to see SSR(may be not this package) natively integrated into the Meteor core in the future. But there is a ton of more stuff needed to be done before that. So, I fear SSR won’t be implemented by Meteor very soon. (even if someone sends PRs)&lt;/p&gt;

&lt;p&gt;Until that, we can use this package as a solution.&lt;/p&gt;

&lt;h2 id=&quot;things-we-can-do-with-ssr&quot;&gt;Things we can do with SSR&lt;/h2&gt;

&lt;p&gt;So, now we can do a lot of interesting stuff with SSR and Blaze. Here are some of them.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Easy emails with Blaze and inline CSS&lt;/li&gt;
  &lt;li&gt;PDF Rendering&lt;/li&gt;
  &lt;li&gt;Static Page Building&lt;/li&gt;
  &lt;li&gt;SEO without phantomjs and spiderable (I’m working on this for Telescope)&lt;/li&gt;
  &lt;li&gt;Iron Router integration (as an alternative to fast-render)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the coming weeks, I’ll work on few demos and show you the power of this module. In the meantime, let me know, what do you think about this. If you build something with this, don’t forget to share it.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://gum.co/meteor-explained&quot;&gt;&lt;img src=&quot;https://i.cloudup.com/XebhBZYIMN.png&quot; alt=&quot;Meteor Explained Book Cover&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;All main chapters&lt;/strong&gt; are available right now.&lt;/p&gt;

  &lt;p&gt;This book comes with a &lt;strong&gt;100% money-back guarantee&lt;/strong&gt; and I’ll refund without asking any questions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://gum.co/meteor-explained&quot;&gt;You can purchase &lt;strong&gt;Meteor Explained&lt;/strong&gt; for $29&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;###Table of Contents&lt;/p&gt;

&lt;h4 id=&quot;1-basics-available-now&quot;&gt;1. Basics (Available Now)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;1.1 Client–Server Architecture&lt;/li&gt;
  &lt;li&gt;1.2 DDP&lt;/li&gt;
  &lt;li&gt;1.3 Fibers&lt;/li&gt;
  &lt;li&gt;1.4 Introduction to Meteor’s Reactivity&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2-client-side-reactivity-available-now&quot;&gt;2. Client-Side Reactivity (Available Now)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;2.1 Local Collections&lt;/li&gt;
  &lt;li&gt;2.2 How Deps works&lt;/li&gt;
  &lt;li&gt;2.3 How Blaze Works&lt;/li&gt;
  &lt;li&gt;2.4 Blaze and Reactivity&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3-ddp-implementation-available-now&quot;&gt;3. DDP Implementation (Available Now)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;3.1 Default DDP Connection&lt;/li&gt;
  &lt;li&gt;3.2 Processing Incoming DDP (Client Side)&lt;/li&gt;
  &lt;li&gt;3.3 Processing Incoming DDP (Server Side)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;4-methods-available-now&quot;&gt;4. Methods (Available Now)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;4.1 Introduction to Latency Compensation&lt;/li&gt;
  &lt;li&gt;4.2 How Latency Compensation Works&lt;/li&gt;
  &lt;li&gt;4.3 WriteFence and It’s Usage&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;5-publishsubscribe-available-now&quot;&gt;5. Publish/Subscribe (Available Now)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;5.1 How Publish/Subscribe Works&lt;/li&gt;
  &lt;li&gt;5.2 Cursors and Observers&lt;/li&gt;
  &lt;li&gt;5.3 Merge Box&lt;/li&gt;
  &lt;li&gt;5.4 Deps and Subscriptions&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;6-mongodb-and-meteor-available-now&quot;&gt;6. MongoDB and Meteor (Available Now)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;6.1 Intro to the mongo Package&lt;/li&gt;
  &lt;li&gt;6.2 Polling Observe Driver&lt;/li&gt;
  &lt;li&gt;6.3 Oplog Observe Driver&lt;/li&gt;
  &lt;li&gt;6.3 MongoDB Write Operations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://gum.co/meteor-explained&quot; class=&quot;gumroad-button&quot;&gt;Purchase Now&lt;/a&gt;&lt;/p&gt;

</description>
      <link>http://localhost:4000/server-side-rendering</link>
      <guid isPermaLink="true">http://localhost:4000/server-side-rendering</guid>
      <pubDate>2014-10-01 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Managing Wait Time on Meteor methods and subscriptions</title>
      <description>
</description>
      <link>http://localhost:4000/managing-waittime</link>
      <guid isPermaLink="true">http://localhost:4000/managing-waittime</guid>
      <pubDate>2014-09-18 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Awesome Error Tracking Solution for Meteor Apps</title>
      <description>
</description>
      <link>http://localhost:4000/error-tracking-kadira</link>
      <guid isPermaLink="true">http://localhost:4000/error-tracking-kadira</guid>
      <pubDate>2014-09-09 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Understanding MergeBox</title>
      <description>&lt;p&gt;You may have heard this term somewhere before. If you haven’t, don’t worry. In this topic, we will be looking at what &lt;strong&gt;MergeBox&lt;/strong&gt; is and how it works. It is one of the major building blocks of Meteor.&lt;/p&gt;

&lt;h2 id=&quot;what-is-mergebox&quot;&gt;What is MergeBox?&lt;/h2&gt;

&lt;p&gt;MergeBox is a process that tries to identify the exact changes that need to be sent to the client, based on the data it receives from publications.&lt;/p&gt;

&lt;p&gt;To understand this properly, let’s take a look at an example. Suppose we have two publications, as shown below:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Apps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;appId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;appWithOwner&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Apps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;appId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First, let’s try to subscribe to the first publication:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'app-one'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we expect, we get the following DDP message:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;msg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;added&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;collection&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;apps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;app-one&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fields&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kadira&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next let’s try to subscribe to the second subscription for the same &lt;code class=&quot;highlighter-rouge&quot;&gt;appId&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'appWithOwner'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'app-one'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Interestingly, we get a changed DDP message with only the &lt;code class=&quot;highlighter-rouge&quot;&gt;owner&lt;/code&gt; field:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;msg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;changed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;collection&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;apps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;app-one&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fields&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;owner&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arunoda&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a result of a particular behavior of MergeBox. It has a copy of all the data available in each client. When a new subscription tries to send data to a client, MergeBox compares the subscription data with the particular client’s copy of the data. Then it will send only the differences to the client.&lt;/p&gt;

&lt;h3 id=&quot;limitations&quot;&gt;Limitations&lt;/h3&gt;

&lt;p&gt;Even though, MergeBox tries to reduce the number of data sent over the wire. It’s not perfect. MergeBox only work on the top level fields only. Let me show you that with an example.&lt;/p&gt;

&lt;p&gt;Let’s imagine MergeBox has sent the following DDP message to the client.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;msg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;added&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;collection&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arunoda&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fields&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arunoda&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;city&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Colombo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;country&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sri Lanka&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now mergeBox has received a new version of the above document with a value change &lt;code class=&quot;highlighter-rouge&quot;&gt;address.city&lt;/code&gt; to “Kandy”. 
Since MergeBox only works on top level fields, the DDP message it sends to the client looks like below:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;msg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;changed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;collection&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arunoda&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fields&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;city&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Kandy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;country&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sri Lanka&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, if you are changing the structure or values of nested documents or arrays, you won’t get the full benefit of MergeBox.&lt;/p&gt;

&lt;h2 id=&quot;why-mergebox&quot;&gt;Why MergeBox?&lt;/h2&gt;

&lt;p&gt;Now, you may be wondering: why MergeBox? Why is it in the server? Isn’t it going to consume more server resources?&lt;/p&gt;

&lt;p&gt;Yes, you are correct. It will consume some additional CPU resources. But it’ll send the minimum amount of data down the wire, saving bandwidth and making the application faster. MergeBox comes in handy when Meteor applications are used on Mobile devices.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I hope you now have a clear understanding of MergeBox. But how it works &lt;strong&gt;internally&lt;/strong&gt; is pretty awesome. You can learn more about MergeBox in my book &lt;a href=&quot;https://gumroad.com/l/meteor-explained&quot;&gt;Meteor Explained&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ve recently completed the “Publish Subscribe” Chapter and it has all the details for how publish subscribe works inside Meteor. There is a &lt;strong&gt;separate topic&lt;/strong&gt; on MergeBox where I explain how it works clearly using some pretty illustrations.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gum.co/meteor-explained&quot;&gt;&lt;img src=&quot;https://i.cloudup.com/XebhBZYIMN.png&quot; alt=&quot;Meteor Explained Book Cover&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;All main chapters&lt;/strong&gt; are available right now.&lt;/p&gt;

  &lt;p&gt;This book comes with a &lt;strong&gt;100% money-back guarantee&lt;/strong&gt; and I’ll refund without asking any questions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://gum.co/meteor-explained&quot;&gt;You can purchase &lt;strong&gt;Meteor Explained&lt;/strong&gt; for $29&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;###Table of Contents&lt;/p&gt;

&lt;h4 id=&quot;1-basics-available-now&quot;&gt;1. Basics (Available Now)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;1.1 Client–Server Architecture&lt;/li&gt;
  &lt;li&gt;1.2 DDP&lt;/li&gt;
  &lt;li&gt;1.3 Fibers&lt;/li&gt;
  &lt;li&gt;1.4 Introduction to Meteor’s Reactivity&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2-client-side-reactivity-available-now&quot;&gt;2. Client-Side Reactivity (Available Now)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;2.1 Local Collections&lt;/li&gt;
  &lt;li&gt;2.2 How Deps works&lt;/li&gt;
  &lt;li&gt;2.3 How Blaze Works&lt;/li&gt;
  &lt;li&gt;2.4 Blaze and Reactivity&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3-ddp-implementation-available-now&quot;&gt;3. DDP Implementation (Available Now)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;3.1 Default DDP Connection&lt;/li&gt;
  &lt;li&gt;3.2 Processing Incoming DDP (Client Side)&lt;/li&gt;
  &lt;li&gt;3.3 Processing Incoming DDP (Server Side)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;4-methods-available-now&quot;&gt;4. Methods (Available Now)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;4.1 Introduction to Latency Compensation&lt;/li&gt;
  &lt;li&gt;4.2 How Latency Compensation Works&lt;/li&gt;
  &lt;li&gt;4.3 WriteFence and It’s Usage&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;5-publishsubscribe-available-now&quot;&gt;5. Publish/Subscribe (Available Now)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;5.1 How Publish/Subscribe Works&lt;/li&gt;
  &lt;li&gt;5.2 Cursors and Observers&lt;/li&gt;
  &lt;li&gt;5.3 Merge Box&lt;/li&gt;
  &lt;li&gt;5.4 Deps and Subscriptions&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;6-mongodb-and-meteor-available-now&quot;&gt;6. MongoDB and Meteor (Available Now)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;6.1 Intro to the mongo Package&lt;/li&gt;
  &lt;li&gt;6.2 Polling Observe Driver&lt;/li&gt;
  &lt;li&gt;6.3 Oplog Observe Driver&lt;/li&gt;
  &lt;li&gt;6.3 MongoDB Write Operations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://gum.co/meteor-explained&quot; class=&quot;gumroad-button&quot;&gt;Purchase Now&lt;/a&gt;&lt;/p&gt;
</description>
      <link>http://localhost:4000/understanding-mergebox</link>
      <guid isPermaLink="true">http://localhost:4000/understanding-mergebox</guid>
      <pubDate>2014-09-03 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>The Meteor Packaging System – Understanding Versioning</title>
      <description>&lt;p&gt;Meteor released version 0.9 this week and everyone is busy migrating their apps and packages. So, I am not going to talk about things &lt;a href=&quot;https://www.discovermeteor.com/blog/updating-to-090/&quot;&gt;we already know&lt;/a&gt;. But this is a story, which no one has told before :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/2WvCX6UE6d.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Before we begin, we need to understand why Meteor released a packaging system and how it differs from Meteorite.&lt;/p&gt;

&lt;p&gt;Meteorite is tightly coupled to Git, it’s not baked into the Meteor core and it does not support weak dependencies. These are some of the few things the new packaging system solves. But, versioning support is the heart of the new packaging system and a lot of decisions have been taken around that.&lt;/p&gt;

&lt;h3 id=&quot;strict-semver-focus&quot;&gt;Strict Semver Focus&lt;/h3&gt;

&lt;p&gt;Meteor uses &lt;a href=&quot;http://semver.org&quot;&gt;semver&lt;/a&gt; as the backbone of its versioning support. But unlike npm (which also uses semver), the Meteor packaging system only allows a single version of a package to live inside an app. No matter what your app’s dependency tree is, Meteor will resolve all packages into a single version or it throws an error.&lt;/p&gt;

&lt;h3 id=&quot;what-is-semver&quot;&gt;What is Semver?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://semver.org&quot;&gt;Semver&lt;/a&gt; is short for “semantic versioning”. It’s a guideline for how to version your packages. It’s pretty simple. Let’s see.&lt;/p&gt;

&lt;p&gt;Basically, there are three numbers for a version:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;major.minor.patch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1.2.8&lt;/li&gt;
  &lt;li&gt;3.5.2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is what they mean:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;patch - mostly bug fixes&lt;/li&gt;
  &lt;li&gt;minor - minor feature release with a backward compatibility api&lt;/li&gt;
  &lt;li&gt;major - major releases. It’s does not need to be backward compatible between major versions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Semver has some other features, but now you know more than enough semver to continue with our story.&lt;/p&gt;

&lt;h2 id=&quot;how-meteor-uses-semver&quot;&gt;How Meteor Uses Semver&lt;/h2&gt;

&lt;p&gt;Say there are a couple of packages, like below, in the Meteor packaging repository (not inside your app):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;arunoda:foo@1.0.0&lt;/li&gt;
  &lt;li&gt;gadi:bar@1.0.0 - depends on arunoda:foo@1.0.0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let’s say you have added &lt;code class=&quot;highlighter-rouge&quot;&gt;gadi:bar&lt;/code&gt; into your app with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;meteor add gadi:bar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;.meteor/versions&lt;/code&gt; file, you can see the following versions from the above two packages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;arunoda:foo@1.0.0&lt;/li&gt;
  &lt;li&gt;gadi:bar@1.0.0&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;but-now-i-need-to-use-arunodafoo140-directly-inside-my-app&quot;&gt;But now I need to use arunoda:foo@1.4.0 directly inside my app&lt;/h3&gt;

&lt;p&gt;Some time later, you want to use &lt;code class=&quot;highlighter-rouge&quot;&gt;arunoda:foo&lt;/code&gt; directly in you app. But you want to use version 1.4.0. You type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;meteor add arunoda:foo@1.4.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now if you look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;.meteor/version&lt;/code&gt; file, you will have the following versions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;arunoda:foo@1.4.0&lt;/li&gt;
  &lt;li&gt;gadi:bar@1.0.0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wait, but &lt;code class=&quot;highlighter-rouge&quot;&gt;gadi:bar&lt;/code&gt; asked for &lt;code class=&quot;highlighter-rouge&quot;&gt;arunoda:foo&lt;/code&gt; at version 1.0.0, right?&lt;/p&gt;

&lt;p&gt;Actually, &lt;code class=&quot;highlighter-rouge&quot;&gt;gadi:bar&lt;/code&gt; mentioned that 1.0.0 is the  &lt;strong&gt;minimum version&lt;/strong&gt; that it depends on for &lt;code class=&quot;highlighter-rouge&quot;&gt;arunoda:foo&lt;/code&gt;. According to semver, minor releases must be backward compatible. Since 1.4.0 is a minor release compared with 1.0.0, &lt;code class=&quot;highlighter-rouge&quot;&gt;gadi:bar&lt;/code&gt; should work with &lt;code class=&quot;highlighter-rouge&quot;&gt;arunoda:foo@1.4.0&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;awesome-now-i-want-to-use-arunodafoo-at-version-200&quot;&gt;Awesome! Now I want to use arunoda:foo at version 2.0.0&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;arunoda:foo&lt;/code&gt; is a really cool project and there is a lot of development going on. &lt;code class=&quot;highlighter-rouge&quot;&gt;arunoda:foo@2.0.0&lt;/code&gt; is the latest release and you want to use it in your app.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;meteor add arunoda:foo@2.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But your apps will fail with a message like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conflict: arunoda:foo@1.4.0 vs arunoda:foo2.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s because &lt;code class=&quot;highlighter-rouge&quot;&gt;arunoda:foo@2.0.0&lt;/code&gt; is a major release compared with &lt;code class=&quot;highlighter-rouge&quot;&gt;arunoda:foo@1.4.0&lt;/code&gt;, which already exists in our app. So, &lt;code class=&quot;highlighter-rouge&quot;&gt;gadi:bar&lt;/code&gt; can’t work with &lt;code class=&quot;highlighter-rouge&quot;&gt;arunoda:foo@2.0.0&lt;/code&gt; according to semver. That’s why Meteor throws an error.&lt;/p&gt;

&lt;p&gt;Now, you can either remove &lt;code class=&quot;highlighter-rouge&quot;&gt;gadi:bar&lt;/code&gt; or ask Gadi to update the package for &lt;code class=&quot;highlighter-rouge&quot;&gt;arunoda:foo@2.0.0&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;note-to-package-authors&quot;&gt;Note to Package Authors&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;You must stick to semver.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because of the tight integration with semver, package authors must follow semver strictly. If not, they could break the packaging system. Let’s see some cases.&lt;/p&gt;

&lt;h3 id=&quot;introducing-version-playground&quot;&gt;Introducing Version Playground&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://version-playground.meteor.com/&quot;&gt;Version Playground&lt;/a&gt; is a little tool where you can experiment with new packaging systems and learn how versioning works.&lt;/p&gt;

&lt;p&gt;It’s backed by the same packages Meteor uses to resolve dependencies. So it’s very similar to how the actual packaging system works. Visit the version playground: &lt;a href=&quot;http://version-playground.meteor.com/&quot;&gt;http://version-playground.meteor.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See how we can use it:&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/dUBBnBOW7uc&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;1&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;Now, here’s the fun part. We are going to break the packaging system and you will learn how it happened. Then you can take action to prevent such scenarios.&lt;/p&gt;

&lt;p&gt;Okay, let’s begin.&lt;/p&gt;

&lt;h3 id=&quot;1-not-following-the-semver-specification&quot;&gt;1. Not Following the Semver Specification&lt;/h3&gt;

&lt;p&gt;Semver is new to some package developers. Previously, I also didn’t follow it. If you don’t follow semver, you might be the person who breaks the packaging system. See how:&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/usCR1s3B40k&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;1&quot;&gt;
&lt;/iframe&gt;

&lt;h3 id=&quot;2-using-exact-dependencies&quot;&gt;2. Using Exact Dependencies&lt;/h3&gt;

&lt;p&gt;By mentioning &lt;code class=&quot;highlighter-rouge&quot;&gt;arunoda:foo@1.0.0&lt;/code&gt;, you are specifying 1.0.0 as the minimum version. But you can ask for exactly version 1.0.0:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arunoda:foo@=1.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This seems like a nice feature! But this is another way to break the packaging system:&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/8niFlwNmlw8&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;1&quot;&gt;
&lt;/iframe&gt;

&lt;h3 id=&quot;3-releasing-major-versions-too-often&quot;&gt;3. Releasing Major Versions too Often&lt;/h3&gt;

&lt;p&gt;Your package development is going super fast. So, you might start releasing new major versions too often. But they are still backward compatible.&lt;/p&gt;

&lt;p&gt;In a situation like this, all the packages depending on your package also need to be updated for your major releases. Which is very hard to do in practice, unless you send Pull Requests to all those packages.&lt;/p&gt;

&lt;p&gt;If this doesn’t happen, your newest releases won’t be used with these apps.&lt;/p&gt;

&lt;h2 id=&quot;simple-guidelines-for-versioning&quot;&gt;Simple Guidelines for Versioning&lt;/h2&gt;

&lt;p&gt;I try to follow these guidelines for my packages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use 1.0.0 for your existing packages (since they’re used in production).&lt;/li&gt;
  &lt;li&gt;For new packages, start with 0.1.0.&lt;/li&gt;
  &lt;li&gt;Be strict with the semver guidelines for major, minor and patch releases.&lt;/li&gt;
  &lt;li&gt;Do pre-releases with labels like 1.1.0-alpha, 1.1.0-beta, 1.1.0-rc&lt;/li&gt;
  &lt;li&gt;(this is how the semver specification talks about pre-releases).&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;When major, minor, and patch are equal, a pre-release version has lower precedence than a normal version. Example: 1.0.0-alpha &amp;lt; 1.0.0. Precedence for two pre-release versions with the same major, minor, and patch version MUST be determined by comparing each dot separated identifier from left to right until a difference is found as follows: identifiers consisting of only digits are compared numerically and identifiers with letters or hyphens are compared lexically in ASCII sort order. Numeric identifiers always have lower precedence than non-numeric identifiers. A larger set of pre-release fields has a higher precedence than a smaller set, if all of the preceding identifiers are equal. Example: 1.0.0-alpha &amp;lt; 1.0.0-alpha.1 &amp;lt; 1.0.0-alpha.beta &amp;lt; 1.0.0-beta &amp;lt; 1.0.0-beta.2 &amp;lt; 1.0.0-beta.11 &amp;lt; 1.0.0-rc.1 &amp;lt; 1.0.0.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;and don’t forget to follow the guides on &lt;a href=&quot;http://semver.org&quot;&gt;http://semver.org&lt;/a&gt; too.&lt;/li&gt;
  &lt;li&gt;never publish a package with exact dependencies in it&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;That’s the story for today :)&lt;/p&gt;

&lt;p&gt;I hope you’ve enjoyed it. Now it’s time to take some action. Start building packages and apps for the Meteor packaging system without breaking it :)&lt;/p&gt;

&lt;p&gt;Note: All of our packages are available under the &lt;a href=&quot;http://atmospherejs.com/meteorhacks/?q=meteorhacks&quot;&gt;meteorhacks&lt;/a&gt; namespace.&lt;/p&gt;

&lt;hr /&gt;

&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;a href=&quot;https://kadira.io/?utm_source=meteorhacks&amp;amp;utm_medium=banner&amp;amp;utm_term=kadira&amp;amp;utm_content=footer&amp;amp;utm_campaign=packagin-system-article&quot;&gt;
    &lt;img alt=&quot;Kadira - Performance Monitoring for Meteor&quot; src=&quot;https://i.cloudup.com/t_cMrp-aq0.png&quot; /&gt;
  &lt;/a&gt;
&lt;/div&gt;

</description>
      <link>http://localhost:4000/meteor-packaging-system-understanding-versioning</link>
      <guid isPermaLink="true">http://localhost:4000/meteor-packaging-system-understanding-versioning</guid>
      <pubDate>2014-08-29 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>How Blaze Works - Meteor's Reactive Templating UI</title>
      <description>&lt;p&gt;We all know that Blaze is a Handlebars-compatible templating engine written specially for Meteor. But how does Blaze actually work? That’s what I am going to show you.&lt;/p&gt;

&lt;p&gt;I’ll try to explain with an example. It’s a simple Meteor application with a single template. Here’s the code for our app:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/arunoda/4cbf29357ff6547a1608.js&quot;&gt;
&lt;/script&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// app.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'posts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Blaze is a combination of several packages. Some parts of it run when you are bundling your app and some on the client.&lt;/p&gt;

&lt;p&gt;First, let me show you an overview of how Blaze renders templates. After that, I’ll explain each of these steps in detail:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/cV8L5OWJvn.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Blaze parses &lt;code class=&quot;highlighter-rouge&quot;&gt;.html&lt;/code&gt; files in your app and identifies the templates and body content (bundle-time).&lt;/li&gt;
  &lt;li&gt;It converts both the templates and body content with Spacebars and generates a client-side JavaScript file (bundle-time).&lt;/li&gt;
  &lt;li&gt;The client initializes the templates and registers the body content (client).&lt;/li&gt;
  &lt;li&gt;It renders the body and inserts it into the DOM (client).&lt;/li&gt;
  &lt;li&gt;It renders templates (client).&lt;/li&gt;
  &lt;li&gt;It renders all the individual views inside each template (e.g., “each”, “if” and nested templates) (client).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s dig in.&lt;/p&gt;

&lt;h2 id=&quot;parsing-html-when-bundling&quot;&gt;Parsing HTML (When Bundling)&lt;/h2&gt;

&lt;p&gt;On the bundle-time, Blaze parses all your html files and generates a JavaScript file, which will get loaded into the client.&lt;/p&gt;

&lt;p&gt;This task is mainly handled by the &lt;a href=&quot;https://github.com/meteor/meteor/tree/devel/packages/templating&quot;&gt;templating&lt;/a&gt; package. This is what it does. It parses our html file (app.html) and groups the content into head, body and templates.&lt;/p&gt;

&lt;p&gt;Then it takes the body along with all templates and converts them into JavaScript. This task is done by the &lt;a href=&quot;https://github.com/meteor/meteor/tree/devel/packages/spacebars-compiler&quot;&gt;spacebars-compiler&lt;/a&gt; package. The Spacebars compiler converts html into something called &lt;a href=&quot;https://github.com/meteor/meteor/tree/devel/packages/htmljs&quot;&gt;htmljs&lt;/a&gt; and controllers (I’ll talk about controllers in a moment). You can inspect the generated file in your local Meteor bundle.&lt;/p&gt;

&lt;p&gt;The JavaScript file generated for our &lt;code class=&quot;highlighter-rouge&quot;&gt;app.html&lt;/code&gt; is located in &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;app&amp;gt;/.meteor/local/build/programs/client/app/&lt;/code&gt; in a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;template.app.js&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’ve formatted the generated file a little bit for readability:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// body content&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bodyContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__body__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__contentParts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;bodyContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Blaze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'body_content_'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bodyContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;Spacebars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lookupTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;postList&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})));&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// loading body when page loaded&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__body__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__instantiate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// postList template&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__define__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;postList&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;HTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;h1&amp;gt;Post List&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;n  &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;HTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;UL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;n    &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Blaze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Spacebars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lookup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;posts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;n      &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Blaze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Spacebars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mustache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lookup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})),&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;n    &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;n  &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s a little complex. I’ll explain each part of it very clearly. Now, Blaze’s bundle-time responsibility is over; it’s time to let the client take control and render the page.&lt;/p&gt;

&lt;h2 id=&quot;client-side-blaze&quot;&gt;Client-Side Blaze&lt;/h2&gt;

&lt;p&gt;Our JavaScript template file loads like a usual JavaScript file but it will be loaded after all the packages have been loaded. Then the Blaze-related packages in the client will take care of the rendering templates in the UI.&lt;/p&gt;

&lt;p&gt;In this article, I’m not going to go deep into Blaze and show you everything. Instead, I’ll show you the stuff that matters the most to help you to understand what’s really happening inside. For that, we need to understand a few important terms and APIs first.&lt;/p&gt;

&lt;h3 id=&quot;spacebars&quot;&gt;Spacebars&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/meteor/meteor/tree/devel/packages/spacebars&quot;&gt;Spacebars&lt;/a&gt; is Meteor’s implementation of Handlebars. It has all the features of Handlebars plus it is reactive and plays nicely with Meteor.&lt;/p&gt;

&lt;h3 id=&quot;blazeview&quot;&gt;Blaze.View&lt;/h3&gt;

&lt;p&gt;Blaze.View is the main building block of the reactive DOM. Handlebars helpers like &lt;code class=&quot;highlighter-rouge&quot;&gt;#each&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;#if&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;#with&lt;/code&gt; can be considered as builtin views. All of our templates will be converted into views, before they will be rendered to the UI. &lt;a href=&quot;http://goo.gl/qTzEfo&quot;&gt;Click here&lt;/a&gt; to learn more about Blaze.View.&lt;/p&gt;

&lt;h3 id=&quot;htmljs&quot;&gt;HtmlJS&lt;/h3&gt;

&lt;p&gt;HtmlJS is a DSL for representing DOM like structure in JavaScript. Meteor use HtmlJS(along with Spacebars) to convert HTML in your into JavaScript and send them to client. (see &lt;code class=&quot;highlighter-rouge&quot;&gt;template.app.js&lt;/code&gt;)&lt;/p&gt;

&lt;h3 id=&quot;dom-range&quot;&gt;DOM Range&lt;/h3&gt;

&lt;p&gt;DOM Range is a way to track dynamically changing set of dom nodes. Each view has it’s own DOM Range and views will alter them reactively. We can insert a DOM Range into the actual DOM whenever we want.&lt;/p&gt;

&lt;h3 id=&quot;templatebody&quot;&gt;Template.&lt;strong&gt;body&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;This is the main template in our app. It’s where all the body parts will be merged into. Did you notice I said “all the body parts”? That’s because with Meteor we can have multiple html files with a &lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt; tag in each of them.&lt;/p&gt;

&lt;h3 id=&quot;blazerenderview&quot;&gt;Blaze.render(view)&lt;/h3&gt;

&lt;p&gt;This is one of the core APIs of Blaze. It transform a view into a reactive view. This API will generate a DOM Range for the view. DomRange will be returned from the API call and it can be also accessed from &lt;code class=&quot;highlighter-rouge&quot;&gt;view.domrange&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;domrangeattachparentdom&quot;&gt;DomRange.attach(parentDom)&lt;/h3&gt;

&lt;p&gt;Every DomRange has a method called &lt;code class=&quot;highlighter-rouge&quot;&gt;attach&lt;/code&gt; which attach the domRange into parentDom element.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;With this information, we can now understand how it generates a JavaScript file and learn more about Blaze. First let’s look at the following code from the &lt;code class=&quot;highlighter-rouge&quot;&gt;template.app.js&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bodyContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__body__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__contentParts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;bodyContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Blaze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'body_content_'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bodyContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Spacebars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lookupTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;postList&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will create a Blaze view with our body content and push it into &lt;code class=&quot;highlighter-rouge&quot;&gt;Template.__body__.__contentParts&lt;/code&gt;. When the &lt;code class=&quot;highlighter-rouge&quot;&gt;Template.__body__&lt;/code&gt; is rendering, it will look for a template called “postList” and render it to the UI also:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c1&quot;&gt;// postList template&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__define__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;postList&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;HTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;h1&amp;gt;Post List&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;n  &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;HTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;UL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;n    &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Blaze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Spacebars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lookup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;posts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;n      &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Blaze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Spacebars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mustache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lookup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})),&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;n    &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;n  &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is our actual handlebars template with htmljs and views. The function &lt;code class=&quot;highlighter-rouge&quot;&gt;Template.__define__&lt;/code&gt; converts it into a template, which can be accessed from &lt;code class=&quot;highlighter-rouge&quot;&gt;Template.postList&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__body__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__instantiate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In order to get a clear picture, let’s have a look at the content of &lt;code class=&quot;highlighter-rouge&quot;&gt;Template.__body__.__instantiate&lt;/code&gt; function.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__body__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__instantiate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__body__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__isInstantiated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__body__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__isInstantiated&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// render body template into a DomRange&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Blaze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__body__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__body__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// attach DomRange into the document.body&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now here is the final part. It will render the UI.body and insert it into the actual DOM(document.body) after Meteor has initialized on the client. That’s when you can see the page being displayed on the browser.&lt;/p&gt;

&lt;p&gt;I hope now you are pretty clear about Blaze and how it really works. I’ve not shown you everything, but this information is more than enough to understand Blaze. Most importantly, now you know Blaze is not magic but a well-designed piece of technology :)&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s Next&lt;/h2&gt;

&lt;p&gt;Another important thing about Blaze is how it reactively renders data on the screen. That’s very interesting and you can explore more about it in my book &lt;a href=&quot;https://gum.co/meteor-explained&quot;&gt;Meteor Explained&lt;/a&gt;. It’s in the “Client-Side Reactivity” chapter and you can access it from today.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gum.co/meteor-explained&quot;&gt;&lt;img src=&quot;https://i.cloudup.com/XebhBZYIMN.png&quot; alt=&quot;Meteor Explained Book Cover&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;All main chapters&lt;/strong&gt; are available right now.&lt;/p&gt;

  &lt;p&gt;This book comes with a &lt;strong&gt;100% money-back guarantee&lt;/strong&gt; and I’ll refund without asking any questions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://gum.co/meteor-explained&quot;&gt;You can purchase &lt;strong&gt;Meteor Explained&lt;/strong&gt; for $29&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;###Table of Contents&lt;/p&gt;

&lt;h4 id=&quot;1-basics-available-now&quot;&gt;1. Basics (Available Now)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;1.1 Client–Server Architecture&lt;/li&gt;
  &lt;li&gt;1.2 DDP&lt;/li&gt;
  &lt;li&gt;1.3 Fibers&lt;/li&gt;
  &lt;li&gt;1.4 Introduction to Meteor’s Reactivity&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2-client-side-reactivity-available-now&quot;&gt;2. Client-Side Reactivity (Available Now)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;2.1 Local Collections&lt;/li&gt;
  &lt;li&gt;2.2 How Deps works&lt;/li&gt;
  &lt;li&gt;2.3 How Blaze Works&lt;/li&gt;
  &lt;li&gt;2.4 Blaze and Reactivity&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3-ddp-implementation-available-now&quot;&gt;3. DDP Implementation (Available Now)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;3.1 Default DDP Connection&lt;/li&gt;
  &lt;li&gt;3.2 Processing Incoming DDP (Client Side)&lt;/li&gt;
  &lt;li&gt;3.3 Processing Incoming DDP (Server Side)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;4-methods-available-now&quot;&gt;4. Methods (Available Now)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;4.1 Introduction to Latency Compensation&lt;/li&gt;
  &lt;li&gt;4.2 How Latency Compensation Works&lt;/li&gt;
  &lt;li&gt;4.3 WriteFence and It’s Usage&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;5-publishsubscribe-available-now&quot;&gt;5. Publish/Subscribe (Available Now)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;5.1 How Publish/Subscribe Works&lt;/li&gt;
  &lt;li&gt;5.2 Cursors and Observers&lt;/li&gt;
  &lt;li&gt;5.3 Merge Box&lt;/li&gt;
  &lt;li&gt;5.4 Deps and Subscriptions&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;6-mongodb-and-meteor-available-now&quot;&gt;6. MongoDB and Meteor (Available Now)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;6.1 Intro to the mongo Package&lt;/li&gt;
  &lt;li&gt;6.2 Polling Observe Driver&lt;/li&gt;
  &lt;li&gt;6.3 Oplog Observe Driver&lt;/li&gt;
  &lt;li&gt;6.3 MongoDB Write Operations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://gum.co/meteor-explained&quot; class=&quot;gumroad-button&quot;&gt;Purchase Now&lt;/a&gt;&lt;/p&gt;

</description>
      <link>http://localhost:4000/how-blaze-works</link>
      <guid isPermaLink="true">http://localhost:4000/how-blaze-works</guid>
      <pubDate>2014-08-07 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Introduction to Latency Compensation</title>
      <description>&lt;p&gt;If you’ve browsed &lt;a href=&quot;http://www.meteor.com&quot;&gt;meteor.com&lt;/a&gt; carefully or watched some Meteor videos, you will definitely have heard the term “latency compensation”. Some people think this is just a buzzword and frankly I have not heard this term used anywhere else. But actually, it is very useful and adds a pleasant user experience to your app. Let me help you to understand it and show you how to use it correctly.&lt;/p&gt;

&lt;h2 id=&quot;latency-compensation-101&quot;&gt;Latency compensation 101&lt;/h2&gt;

&lt;p&gt;In a traditional application, when a user does some action on an app, they have to wait until the request is processed on the server before the changes are reflected by the UI. But with latency compensation, users no longer need to wait. The result of an action is reflected by the browser immediately. This is a built-in feature of Meteor and you can use it very easily. Let me explain more about it with an example.&lt;/p&gt;

&lt;p&gt;We’ll be using a simple blog app as an example. Here’s the JavaScript code for our app:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// File: /lib/collections.js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'posts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;addPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// add a delay to mimic the network time&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_sleepForMs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;postId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;postId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// File: /client/app.js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;click button&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#title'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#content'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'addPost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;postId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reason&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/post/'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;postId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can read the full source code from &lt;a href=&quot;https://github.com/meteorhacks-samples/simple-blog&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;without-latency-compensation&quot;&gt;Without latency compensation&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/cGFO63m3qk.png&quot; alt=&quot;Without latency compensation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When a user adds a new post, a request will be initiated to the server. The server will process the request and send back the document changes. After that it will send the method response and it will fire the callback. Only then will the user be redirected to the actual post added.&lt;/p&gt;

&lt;p&gt;There is a wait time between the request initiation and delivery of the result. The user has no clue whether the action has been successfully initiated or not. We can add a loading indicator to get rid of this uncertainty, but there is a better way.&lt;/p&gt;

&lt;h3 id=&quot;with-latency-compensation&quot;&gt;With latency compensation&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/LgntBPnyDI.png&quot; alt=&quot;With latency compensation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the user adds a new post, a request will be sent immediately to the server as usual. But now, the result of the request will be instantly reflected on the client. Meteor detects the document changes on the client side and reflects the changes on the UI.&lt;/p&gt;

&lt;p&gt;The server will process the request and send back the changes as usual. But this time, Meteor will diff and merge the server changes with the changes it has detected from the client. Most of the time, both of these are the same unless the server adds some additional fields to the post before inserting it.&lt;/p&gt;

&lt;p&gt;So, now all the user actions are reflected immediately and there is no need to wait for the server result. Isn’t that nice?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Latency compensation is not supported in our example app yet!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;wait-what-if-the-server-rejects-the-request&quot;&gt;Wait, what if the server rejects the request?&lt;/h3&gt;

&lt;p&gt;It is possible for the server to reject the request or throw some error. In this scenario, the Meteor client will detect it and revert the changes. This might surprise the user, but there are ways to deal with situations like this. I will explain these later.&lt;/p&gt;

&lt;h2 id=&quot;implementing-latency-compensation&quot;&gt;Implementing latency compensation&lt;/h2&gt;

&lt;p&gt;Implementing latency compensation in your app is pretty easy. Meteor has done most of the hard work for you. Let’s begin.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Latency compensation works only if you are doing write operations to a data store supported by Meteor (currently only MongoDB and Redis).&lt;/li&gt;
  &lt;li&gt;If you are relying on content from a third-party service like Twitter, there is no way to implement latency compensation directly.&lt;/li&gt;
  &lt;li&gt;There are only two places where you can do a write operation to a data store: inside a method call or directly via a local collection.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are using a local collection, you don’t have to do anything. But if you are using a method, you need to implement your method on both the server and the client.&lt;/p&gt;

&lt;p&gt;On the client side, Meteor will evaluate your method and pick out only the data store changes. It will reject the method result or any errors that have occurred. Your method on the client is known as the method stub and the evaluation of it is known as the method simulation.&lt;/p&gt;

&lt;p&gt;You might have noticed that our example app has defined its &lt;code class=&quot;highlighter-rouge&quot;&gt;addPost&lt;/code&gt; method inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;lib&lt;/code&gt; directory. In this way, it should be available on both the server and the client. So, our example has latency compensation support.&lt;/p&gt;

&lt;p&gt;But wait… I mentioned earlier that our app doesn’t have latency compensation support. Why?&lt;/p&gt;

&lt;p&gt;That’s because, we are explicitly waiting for the server result and only then do we route the user to the post. Even though latency compensation works, we simply ignored it by waiting for the server response.&lt;/p&gt;

&lt;p&gt;Let’s try to fix our app and add latency compensation support.&lt;/p&gt;

&lt;h3 id=&quot;the-fix&quot;&gt;The fix&lt;/h3&gt;

&lt;p&gt;We can simply fix our app by adding &lt;code class=&quot;highlighter-rouge&quot;&gt;_id&lt;/code&gt; to the post inside the client. By doing this, we no longer rely on the server result to get the postId. Now we can route the user to the newly added post just after the method call has been invoked.&lt;/p&gt;

&lt;p&gt;Still, it’s possible for the server to reject the request or throw an error. So, we need to add a callback and watch for an error. If there is an error, Meteor will revert the changes made in the client. You will also get notified about the error via the callback. Then, you can simply display an error message to the user.&lt;/p&gt;

&lt;p&gt;This is the code, after I made the fix:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// File: /client/app.js
Template.addPost.events({
  &quot;click button&quot;: function() {
    var title = $('#title').val();
    var content = $('#content').val();

    var post = {
      title: title,
      content: content,
      _id: Random.id()
    };

    Meteor.call('addPost', post, function(err) {
      if(err) {
        alert(err.reason);
      }
    });

    Router.go('/post/' + post._id);
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is the diff view of the fix:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/iRnmkAJJqP.png&quot; alt=&quot;Fix for the latency compensation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can have a look at the complete fixed app from &lt;a href=&quot;https://github.com/meteorhacks-samples/simple-blog/tree/latency-compensation&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;when-to-use-latency-compensation&quot;&gt;When to use latency compensation&lt;/h2&gt;

&lt;p&gt;This completely depends on your app and what you need to achieve. If there is a mission critical task, you may need the users to wait for the server response.&lt;/p&gt;

&lt;p&gt;In Kadira, when a user adds an &lt;a href=&quot;https://kadira.io/blog/stay-alert-with-your-meteor-app/&quot;&gt;alert&lt;/a&gt;, they need to wait until it gets processed on the server. So there is no latency compensation. That’s a design decision we’ve chosen for Kadira alerts since we think it’s important for the user to know the result before continuing.&lt;/p&gt;

&lt;p&gt;But for an app like Telescope, latency compensation is a must and it will increase user engagement.&lt;/p&gt;

&lt;p&gt;So, this is a subjective question and it’s up to you to decide whether to support latency compensation or not.&lt;/p&gt;

&lt;h2 id=&quot;common-issues&quot;&gt;Common Issues&lt;/h2&gt;

&lt;h3 id=&quot;i-forgot-to-add-the-client-side-method-stub&quot;&gt;I forgot to add the client-side method stub&lt;/h3&gt;

&lt;p&gt;Check your code and implement the method on both the client and the server. You can easily do this by implementing your method somewhere where it is accessible from both the client and the server. You can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Meteor.isSimulation&lt;/code&gt; flag to determine whether your code runs inside a simulation or not. That may help you to tweak your method to behave differently on different environments.&lt;/p&gt;

&lt;h3 id=&quot;i-have-some-secret-logic-in-my-method-and-i-dont-want-the-client-to-see-it&quot;&gt;I have some secret logic in my method and I don’t want the client to see it&lt;/h3&gt;

&lt;p&gt;Yes, that’s a valid question. But we only need to implement data store changes. So, you can create a method on the server with all the secret logic. Just implement data store changes in a separate method with the same name inside your client code.&lt;/p&gt;

&lt;h3 id=&quot;i-need-to-rely-on-the-server-response&quot;&gt;I need to rely on the server response&lt;/h3&gt;

&lt;p&gt;If you wait for the server result (using callback), you won’t get the benefit of the latency compensation. So, design your application to not rely on the server response. Actually, this is always possible, and I don’t believe it’s impossible.&lt;/p&gt;

&lt;h3 id=&quot;im-using-a-third-party-service&quot;&gt;I’m using a third-party service&lt;/h3&gt;

&lt;p&gt;Let’s say you are building a Twitter client and the user just created a new tweet. Now, you may invoke an API call to Twitter. But still, it’s a good idea to store all the tweets that have been created from your app in a collection. Then you can implement latency compensation.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I think you now have a better understanding of latency compensation and know how to use it correctly. Try it out with your application and share your experience.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Thanks &lt;a href=&quot;https://twitter.com/imslavko&quot;&gt;Slava Kim&lt;/a&gt; for reviewing the article&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;If you’d like to learn exactly how &lt;strong&gt;latency compensation&lt;/strong&gt; works inside Meteor, buy my book &lt;a href=&quot;https://gumroad.com/l/meteor-explained&quot;&gt;Meteor Explained&lt;/a&gt;. I discuss latency compensation in &lt;strong&gt;Chapter 4&lt;/strong&gt;, where I talk about Methods.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gum.co/meteor-explained&quot;&gt;&lt;img src=&quot;https://i.cloudup.com/XebhBZYIMN.png&quot; alt=&quot;Meteor Explained Book Cover&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;All main chapters&lt;/strong&gt; are available right now.&lt;/p&gt;

  &lt;p&gt;This book comes with a &lt;strong&gt;100% money-back guarantee&lt;/strong&gt; and I’ll refund without asking any questions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://gum.co/meteor-explained&quot;&gt;You can purchase &lt;strong&gt;Meteor Explained&lt;/strong&gt; for $29&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;###Table of Contents&lt;/p&gt;

&lt;h4 id=&quot;1-basics-available-now&quot;&gt;1. Basics (Available Now)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;1.1 Client–Server Architecture&lt;/li&gt;
  &lt;li&gt;1.2 DDP&lt;/li&gt;
  &lt;li&gt;1.3 Fibers&lt;/li&gt;
  &lt;li&gt;1.4 Introduction to Meteor’s Reactivity&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2-client-side-reactivity-available-now&quot;&gt;2. Client-Side Reactivity (Available Now)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;2.1 Local Collections&lt;/li&gt;
  &lt;li&gt;2.2 How Deps works&lt;/li&gt;
  &lt;li&gt;2.3 How Blaze Works&lt;/li&gt;
  &lt;li&gt;2.4 Blaze and Reactivity&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3-ddp-implementation-available-now&quot;&gt;3. DDP Implementation (Available Now)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;3.1 Default DDP Connection&lt;/li&gt;
  &lt;li&gt;3.2 Processing Incoming DDP (Client Side)&lt;/li&gt;
  &lt;li&gt;3.3 Processing Incoming DDP (Server Side)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;4-methods-available-now&quot;&gt;4. Methods (Available Now)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;4.1 Introduction to Latency Compensation&lt;/li&gt;
  &lt;li&gt;4.2 How Latency Compensation Works&lt;/li&gt;
  &lt;li&gt;4.3 WriteFence and It’s Usage&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;5-publishsubscribe-available-now&quot;&gt;5. Publish/Subscribe (Available Now)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;5.1 How Publish/Subscribe Works&lt;/li&gt;
  &lt;li&gt;5.2 Cursors and Observers&lt;/li&gt;
  &lt;li&gt;5.3 Merge Box&lt;/li&gt;
  &lt;li&gt;5.4 Deps and Subscriptions&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;6-mongodb-and-meteor-available-now&quot;&gt;6. MongoDB and Meteor (Available Now)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;6.1 Intro to the mongo Package&lt;/li&gt;
  &lt;li&gt;6.2 Polling Observe Driver&lt;/li&gt;
  &lt;li&gt;6.3 Oplog Observe Driver&lt;/li&gt;
  &lt;li&gt;6.3 MongoDB Write Operations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://gum.co/meteor-explained&quot; class=&quot;gumroad-button&quot;&gt;Purchase Now&lt;/a&gt;&lt;/p&gt;

</description>
      <link>http://localhost:4000/introduction-to-latency-compensation</link>
      <guid isPermaLink="true">http://localhost:4000/introduction-to-latency-compensation</guid>
      <pubDate>2014-07-31 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Client-Side Debugging For Meteor Apps</title>
      <description>&lt;blockquote&gt;
  &lt;p&gt;Update: We’ve released our &lt;a href=&quot;https://kadira.io/blog/awesome-error-tracking-solution-for-meteor-apps-with-kadira/&quot;&gt;Error Tracking Solution for Meteor&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;It comes with Kadira. &lt;a href=&quot;https://kadira.io/blog/awesome-error-tracking-solution-for-meteor-apps-with-kadira/&quot;&gt;Check it out!&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Last weekend at MeteorHacks, we did some research into client-side error tracking and found some very useful resources and techniques. We’ve integrated some of them with Meteor. Let me share our experiences with you.&lt;/p&gt;

&lt;p&gt;There are several ways we can debug client-side errors effectively. I will walk you through some of them and show you how to debug client-side errors for Meteor apps very easily.&lt;/p&gt;

&lt;h2 id=&quot;our-app&quot;&gt;Our App&lt;/h2&gt;
&lt;p&gt;We will be using a simple Meteor app with a single method called getData, which returns &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;. Here’s the code for the app:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;click button&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'getData'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;afterGetData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;


  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;afterGetData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;avg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;avg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/meteorhacks/zones-simple-example&quot;&gt;Click here&lt;/a&gt; to get the complete code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you click on the button, a Meteor method call will be invoked. When the result comes back, the app tries to do a calculation using the method result, but since the result is &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;, it will throw an exception. The calculation happens inside a setTimeout (just to mimic the async aspect).&lt;/p&gt;

&lt;h2 id=&quot;inspecting-errors-in-the-browser-console&quot;&gt;Inspecting Errors in the Browser Console&lt;/h2&gt;

&lt;p&gt;When you simply click on the button, you’ll get an error message in the console:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://i.cloudup.com/F1RerfBJiT.png&quot;&gt;&lt;img src=&quot;https://i.cloudup.com/F1RerfBJiT.png&quot; alt=&quot;Error in the Browser Console&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The message does not help much since it only shows us where the error was thrown. We have no clues to identify what caused the error or to find the root cause.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Let me give you some background information.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;All our JavaScript code runs inside an eventLoop in the browser. It can only get the stack trace of the current running loop. If there are async operations, they are run in different loops. Since the flow of our example code is async, our error only has the stack trace for the current running loop. Which is not helpful for debugging.&lt;/p&gt;

&lt;h2 id=&quot;chromes-async-debugger&quot;&gt;Chrome’s Async Debugger&lt;/h2&gt;

&lt;p&gt;Chrome now has an async debugger, which helps to track the async call stack. We can use it to learn more about our error and find out which action caused it. See the following video:&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/xSXAmluDuJY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;1&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;Now, Chrome’s async debugger shows us the place where the issue initiated (inside the Meteor.call result callback). That information helps us a bit more to figure out the reason. But still, we don’t really know what the user did to get this error. We can guess or ask the user directly, but we need something better.&lt;/p&gt;

&lt;h2 id=&quot;debugging-with-zonejs&quot;&gt;Debugging with Zone.Js&lt;/h2&gt;

&lt;p&gt;We’ve a better way to debug errors thanks to the &lt;a href=&quot;https://github.com/angular/zone.js&quot;&gt;Zone.Js&lt;/a&gt; project from the Angular team. Zone.Js is an execution context that allows us to group a set of async code flows and manage them. It is very easy to get an async stack trace with Zone.Js. We recently integrated Zone.Js into Meteor, which is available on Atmosphere as &lt;a href=&quot;https://atmospherejs.com/package/zones&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;zones&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s try to debug our app with Zone.Js. Install the &lt;a href=&quot;https://atmospherejs.com/package/zones&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;zones&lt;/code&gt;&lt;/a&gt; package into our app with &lt;code class=&quot;highlighter-rouge&quot;&gt;mrt add zones&lt;/code&gt; and let’s generate the error:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://i.cloudup.com/aAwUHcJedQ.png&quot;&gt;&lt;img src=&quot;https://i.cloudup.com/3sZMoRt2GX.png&quot; alt=&quot;Meteor Error Stack Trace with Zones&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://simple-example-zones.meteor.com/&quot;&gt;Click here&lt;/a&gt; to see the deployed version&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wow! That’s awesome. Now we’ve the whole stack trace from where the user invoked the action. We can use Chrome’s debugging tools with this stack to find out the root cause very effectively. Watch the following video:&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/CtkN9QXyUmQ&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;1&quot;&gt;
&lt;/iframe&gt;

&lt;h3 id=&quot;try-zones-based-error-tracing&quot;&gt;Try Zones based Error Tracing&lt;/h3&gt;

&lt;p&gt;Check &lt;a href=&quot;http://zones-example.meteor.com/&quot;&gt;this deployed app&lt;/a&gt; and see how zones can track errors in difference places inside a Meteor app.&lt;/p&gt;

&lt;p&gt;(Use Google Chrome for better results)&lt;/p&gt;

&lt;h2 id=&quot;debugging-in-production&quot;&gt;Debugging in Production&lt;/h2&gt;

&lt;p&gt;Debugging in production is a little bit more tricky:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;All our JavaScript code is minified.&lt;/li&gt;
  &lt;li&gt;Errors are thrown on the user’s browser.&lt;/li&gt;
  &lt;li&gt;It’s hard to reproduce errors.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With our &lt;code class=&quot;highlighter-rouge&quot;&gt;zones&lt;/code&gt; package, we can still get an idea of what’s happening but we can’t debug the error using Chrome’s debugging tools (similarly with other browsers). So we need some help. Let me talk about this.&lt;/p&gt;

&lt;p&gt;In Kadira, we implemented server-side error tracking from the very beginning. We are able to show you an actual trace of what really happened when an error is thrown:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/vDDQlx00_j.png&quot; alt=&quot;Kadira Server-Side Error Tracking&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Trace is very helpful to figure out the root cause and apply a fix. Now we are working on doing the same for client-side errors.&lt;/p&gt;

&lt;p&gt;With Kadira’s new client error tracking, we can show you the following additional information along with the async stack trace (yes, we are using Zones):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;URL&lt;/li&gt;
  &lt;li&gt;UserId&lt;/li&gt;
  &lt;li&gt;Browser information&lt;/li&gt;
  &lt;li&gt;Method call traces (arguments and result)&lt;/li&gt;
  &lt;li&gt;Subscription traces (arguments and result)&lt;/li&gt;
  &lt;li&gt;Collection method invocations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then it’s very easy to find the root cause for the error and you can apply a fix very quickly. Even though we show you a lot of information, you don’t actually need to do anything. All you have to do is simply connect to Kadira.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Update: This is our new &lt;a href=&quot;https://kadira.io/blog/awesome-error-tracking-solution-for-meteor-apps-with-kadira/&quot;&gt;Error Tracking Solution for Meteor&lt;/a&gt; comes with Kadira!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kadira.io/blog/awesome-error-tracking-solution-for-meteor-apps-with-kadira/&quot;&gt;&lt;img src=&quot;https://cldup.com/iS7yufivIz.png&quot; alt=&quot;Error Tracking for Meteor&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
      <link>http://localhost:4000/client-side-debugging-for-meteor-apps</link>
      <guid isPermaLink="true">http://localhost:4000/client-side-debugging-for-meteor-apps</guid>
      <pubDate>2014-07-11 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Journey into Meteor's Reactivity</title>
      <description>&lt;p&gt;For some developers, Meteor is a superb framework, which they use to build awesome apps like &lt;a href=&quot;https://lookback.io/&quot;&gt;LookBack&lt;/a&gt;, &lt;a href=&quot;https://respond.ly/&quot;&gt;Respondly&lt;/a&gt; and &lt;a href=&quot;https://www.streem.com/&quot;&gt;Streem&lt;/a&gt;. But for some, it’s like magic. Especially how Meteor makes MongoDB reactive in real time.&lt;/p&gt;

&lt;p&gt;Watch this video:&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/1h8hvQgt2wA&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;1&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;It’s a simple real-time to-do application built with Meteor. As you saw on the video, all the changes are reflected reactively on all connected browsers. This is the JavaScript code for the above application. It’s just a few lines of code:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Todos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'todos'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;allow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;addTodo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'title'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'todos'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'todos'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'click #add-todo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todoText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#input-todo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todoText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'addTodo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todoText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#input-todo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;s1&quot;&gt;'click .delete-todo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;Todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;s1&quot;&gt;'change .todo-done '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isDone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;':checked'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;Todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isDone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isDone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;checkedState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isDone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;checked&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todosList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’m not going to explain the code because I hope you are quite familiar with Meteor. If not, I highly recommend reading &lt;a href=&quot;https://www.discovermeteor.com/&quot;&gt;DiscoverMeteor&lt;/a&gt; or watch this &lt;a href=&quot;https://www.youtube.com/watch?v=q9pA2xApdY0&quot;&gt;Introduction to Meteor&lt;/a&gt; talk by Sacha.&lt;/p&gt;

&lt;h2 id=&quot;basics&quot;&gt;Basics&lt;/h2&gt;

&lt;h3 id=&quot;client-and-server-architecture&quot;&gt;Client and Server Architecture&lt;/h3&gt;

&lt;p&gt;Meteor is a full-stack JavaScript framework. It runs on both the &lt;a href=&quot;http://meteorhacks.com/understanding-meteor-internals.html&quot;&gt;client and the server&lt;/a&gt;. The client communicates with the server using a protocol called DDP.&lt;/p&gt;

&lt;h3 id=&quot;ddp&quot;&gt;DDP&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://meteorhacks.com/introduction-to-ddp.html&quot;&gt;DDP&lt;/a&gt; is a tiny protocol, which is optimized for real-time communication. It can be implemented over any duplex transport. The current implementation is built on top of SockJS, which is a WebSocket emulation transport.&lt;/p&gt;

&lt;p&gt;DDP can basically do two things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Remote procedure calls (methods)&lt;/li&gt;
  &lt;li&gt;Stream real-time data changes (pub/sub)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-magic&quot;&gt;The Magic&lt;/h2&gt;

&lt;p&gt;As I said before, some people think Meteor generates codes on the fly or does some magic behind the scenes. But it does not. It’s a combination of carefully crafted technologies built into a single framework. It’s extensible and very easy to use.&lt;/p&gt;

&lt;p&gt;I’ll help you to understand what’s really inside Meteor and what it’s made of.&lt;/p&gt;

&lt;p&gt;To start our journey, let’s think about the following scenario for the above to-do application:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The user types a new to-do item.&lt;/li&gt;
  &lt;li&gt;The user clicks the “Add” button.&lt;/li&gt;
  &lt;li&gt;The new to-do item is rendered immediately on all connected browsers.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Behind the scenes, a lot of things are happening. Let me show you.&lt;/p&gt;

&lt;h2 id=&quot;behind-a-meteor-app&quot;&gt;Behind A Meteor App&lt;/h2&gt;

&lt;p&gt;I’ll show you all these things step by step with the help from some graphics.&lt;/p&gt;

&lt;p&gt;At first, all Meteor clients are subscribed to the todos publication, which sends database changes to the client from the MongoDB. It creates an observer for the Todos collection and looks for changes in the DB. We call it an “oplog observer driver”. The oplog is a real-time stream of database changes, which is used for MongoDB replication.&lt;/p&gt;

&lt;p&gt;So, if anything changes in the DB, it’s detected by the observer. And it’s smart enough to identify whether it needs to worry about the change or not. If so, it will tell Meteor to send the changes to connected clients over DDP:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/Vb9y-SJRij.png&quot; alt=&quot;Subscriptions and Observe&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Our template looks for changes with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Posts.find()&lt;/code&gt; cursor. So, if there are any changes, Blaze will render the UI accordingly:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/vNGXhagI1V.png&quot; alt=&quot;Blaze Observing Local Collection&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clicking on the “Add” button invokes a method call to add the to-do item. First, the method body on the client will get executed. It writes the DB changes to the local copy of the Posts collection. To make that happen, we have written our method body so that it is accessible from both the client and server.&lt;/p&gt;

&lt;p&gt;So, once the new document has been added to the local collection, Blaze will detect it and render it on the screen. This is what we call a method simulation and it does something fancy called **latency compensation.
**&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Latency Compensation&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;This means that you don’t need to wait until a method completes processing on the server, to render DB changes on the screen. It also handles errors and reverts to the previous version if there is an error or the server rejects the database changes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then, client-1 sends the method call to the server via DDP. Meteor executes the method body on the server and it will actually insert the to-do document into MongoDB.&lt;/p&gt;

&lt;p&gt;When the method body completes execution, Meteor simply sends a DDP message to the client with the result of the method:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/yiuX2rB-DZ.png&quot; alt=&quot;Method Call Flow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After that, the oplog observer driver will get the new document. It forwards the document to both clients. Two of our clients work differently from each other once they get the data.&lt;/p&gt;

&lt;p&gt;When client-2 gets the new document, it simply adds it into the local collection. So, Blaze will detect it and render the new to-do item on the screen.&lt;/p&gt;

&lt;p&gt;Client-1 also gets the document. But it keeps that document in memory and waits for another special message from DDP:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/0gz8eJbr-c.png&quot; alt=&quot;Observers Sending Changes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, Meteor sends a special DDP message to client-1 saying updated. This indicates that all the database changes for the method have been applied. Now Meteor will compare the document received via DDP to the document added by the simulation. If there are any differences, it will submit those changes to the local collection. Blaze will get notified and re-render the UI accordingly:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/mO4J8rnJdP.png&quot; alt=&quot;Client Receives Updated Message&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now all the clients have received the new to-do item. So, Meteor will trigger a callback for the method with the result of the method.&lt;/p&gt;

&lt;h2 id=&quot;thats-a-lot-of-stuff&quot;&gt;That’s a lot of stuff&lt;/h2&gt;

&lt;p&gt;Yeah! That’s a lot of stuff and I only gave you an overview of what’s actually happening. What’s going on in each of these components and how they work together is pretty amazing. It took me more than a year to understand most of these complex tasks that were happening behind the scenes.&lt;/p&gt;

&lt;p&gt;I will show you exactly what is happening in all those components very clearly with graphics and demos, so you will be able to understand them very easily. With that understanding, you’ll be able to understand Meteor and it won’t be a magical framework anymore. Then you’ll be able to build high-quality Meteor applications.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You don’t need to have any prior knowledge to understand any of this content. A basic knowledge of Meteor is more than enough.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I invite you to join me on a journey into meteor’s reactivity with &lt;strong&gt;Meteor Explained&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gum.co/meteor-explained&quot;&gt;&lt;img src=&quot;https://i.cloudup.com/XebhBZYIMN.png&quot; alt=&quot;Meteor Explained Book Cover&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;All main chapters&lt;/strong&gt; are available right now.&lt;/p&gt;

  &lt;p&gt;This book comes with a &lt;strong&gt;100% money-back guarantee&lt;/strong&gt; and I’ll refund without asking any questions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://gum.co/meteor-explained&quot;&gt;You can purchase &lt;strong&gt;Meteor Explained&lt;/strong&gt; for $29&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;###Table of Contents&lt;/p&gt;

&lt;h4 id=&quot;1-basics-available-now&quot;&gt;1. Basics (Available Now)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;1.1 Client–Server Architecture&lt;/li&gt;
  &lt;li&gt;1.2 DDP&lt;/li&gt;
  &lt;li&gt;1.3 Fibers&lt;/li&gt;
  &lt;li&gt;1.4 Introduction to Meteor’s Reactivity&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2-client-side-reactivity-available-now&quot;&gt;2. Client-Side Reactivity (Available Now)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;2.1 Local Collections&lt;/li&gt;
  &lt;li&gt;2.2 How Deps works&lt;/li&gt;
  &lt;li&gt;2.3 How Blaze Works&lt;/li&gt;
  &lt;li&gt;2.4 Blaze and Reactivity&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3-ddp-implementation-available-now&quot;&gt;3. DDP Implementation (Available Now)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;3.1 Default DDP Connection&lt;/li&gt;
  &lt;li&gt;3.2 Processing Incoming DDP (Client Side)&lt;/li&gt;
  &lt;li&gt;3.3 Processing Incoming DDP (Server Side)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;4-methods-available-now&quot;&gt;4. Methods (Available Now)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;4.1 Introduction to Latency Compensation&lt;/li&gt;
  &lt;li&gt;4.2 How Latency Compensation Works&lt;/li&gt;
  &lt;li&gt;4.3 WriteFence and It’s Usage&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;5-publishsubscribe-available-now&quot;&gt;5. Publish/Subscribe (Available Now)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;5.1 How Publish/Subscribe Works&lt;/li&gt;
  &lt;li&gt;5.2 Cursors and Observers&lt;/li&gt;
  &lt;li&gt;5.3 Merge Box&lt;/li&gt;
  &lt;li&gt;5.4 Deps and Subscriptions&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;6-mongodb-and-meteor-available-now&quot;&gt;6. MongoDB and Meteor (Available Now)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;6.1 Intro to the mongo Package&lt;/li&gt;
  &lt;li&gt;6.2 Polling Observe Driver&lt;/li&gt;
  &lt;li&gt;6.3 Oplog Observe Driver&lt;/li&gt;
  &lt;li&gt;6.3 MongoDB Write Operations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://gum.co/meteor-explained&quot; class=&quot;gumroad-button&quot;&gt;Purchase Now&lt;/a&gt;&lt;/p&gt;

</description>
      <link>http://localhost:4000/journey-into-meteors-reactivity</link>
      <guid isPermaLink="true">http://localhost:4000/journey-into-meteors-reactivity</guid>
      <pubDate>2014-06-27 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Optimize Your Meteor App for Oplog Integration</title>
      <description>
</description>
      <link>http://localhost:4000/optimize-your-app-for-oplog</link>
      <guid isPermaLink="true">http://localhost:4000/optimize-your-app-for-oplog</guid>
      <pubDate>2014-06-19 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Subscriptions Manager is Here!</title>
      <description>&lt;p&gt;A few months ago, I started to work on a project called Subscriptions Manager. In February, I &lt;a href=&quot;http://meteorhacks.com/subscription-manager-for-iron-router.html&quot;&gt;released&lt;/a&gt; an alpha version, which was built into Iron Router. Today, I’m happy to release &lt;a href=&quot;https://github.com/meteorhacks/subs-manager&quot;&gt;Subscriptions Manager&lt;/a&gt;, and now you can use it in any Meteor applications, even if you don’t use Iron Router (i.e., for games)&lt;/p&gt;

&lt;h2 id=&quot;why-subscriptions-manager&quot;&gt;Why Subscriptions Manager?&lt;/h2&gt;

&lt;p&gt;I’ve talked about this &lt;a href=&quot;http://meteorhacks.com/meteor-subscription-optimizations.html&quot;&gt;several times&lt;/a&gt;, but let me say it again:) When you are creating subscriptions using a &lt;code class=&quot;highlighter-rouge&quot;&gt;Deps.autorun&lt;/code&gt; computation, when it is re-running, all the previous subscriptions will be unsubscribed. Refer to the following example:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;autorun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;postId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'postId'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'post'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;postId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;If you set postId as “post1,” then there will be a subscription for “post1”.&lt;/li&gt;
  &lt;li&gt;Then, if you set postId as “post2”, then meteor will unsubscribe from “post1” and subscribe to “post2”.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a feature of &lt;code class=&quot;highlighter-rouge&quot;&gt;Meteor.subscribe&lt;/code&gt;, and you can learn more about in my previous &lt;a href=&quot;http://meteorhacks.com/meteor-subscription-optimizations.html&quot;&gt;article&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;relating-to-iron-router&quot;&gt;Relating to Iron Router&lt;/h3&gt;

&lt;p&gt;In Iron Router, all the routes run inside a Deps.autorun computation. Then, when you are switching routes, all the subscriptions made in the previous route will be unsubscribed. This causes two problems:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The user has to wait while changing routes&lt;/li&gt;
  &lt;li&gt;There is an increase in &lt;a href=&quot;http://support.kadira.io/knowledgebase/articles/347439-subrate&quot;&gt;SubRate&lt;/a&gt; of your application, a possible reason for high CPU and network usage&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;See what happens when you change routes, normally without Iron Router.&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/YZJMuJdI76E&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;1&quot;&gt;
&lt;/iframe&gt;

&lt;h2 id=&quot;welcome-to-subscriptions-manager&quot;&gt;Welcome to Subscriptions Manager&lt;/h2&gt;

&lt;p&gt;Subscription caching is the solution to the above issue. With subscription caching, you keep previously initialized subscriptions inside a Deps.autorun computation. Therefore, when you are changing routes, previous subscriptions won’t be unsubscribed.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/meteorhacks/subs-manager&quot;&gt;Subscriptions Manager&lt;/a&gt; is a general-purpose subscription caching solution with tools to manage the caching behavior. Subscriptions Manager runs its own computation, and you have full control of it. For example, this is how you can use Subscription Manage with Iron Router:&lt;/p&gt;

&lt;p&gt;First, install the subs-manager package from Atmosphere with &lt;code class=&quot;highlighter-rouge&quot;&gt;mrt add subs-manager&lt;/code&gt;.
Then, change your routes as follows:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;subs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SubsManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// will be cached only 20 recently used subscriptions&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;cacheLimit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// any subscription will be expired after 5 minutes of inactivity&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;expireIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'home'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;waitOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'postList'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'singlePost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/post/:id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;waitOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'singlePost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is what it looks like after enabling Subscriptions Manager.&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/y8t3Hiy-EUE&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;1&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;Subscriptions Manager can be used for any Meteor application even if they are not using Iron Router. Please check the &lt;a href=&quot;https://github.com/meteorhacks/subs-manager&quot;&gt;documentation&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h2 id=&quot;do-i-need-to-add-subscriptions-manager-everywhere&quot;&gt;Do I need to add Subscriptions Manager everywhere?&lt;/h2&gt;

&lt;p&gt;No, you don’t. You can use Subscriptions Manager whenever you need it. This is how to check whether you need Subscriptions Manager or not:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First, connect the app with &lt;a href=&quot;https://kadira.io&quot;&gt;Kadira&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Then, play around with your app a bit.&lt;/li&gt;
  &lt;li&gt;Visit the “PubSub Detailed View” section.&lt;/li&gt;
  &lt;li&gt;Sort your publications by “Short Lifespan”.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then, add Subscriptions Manager support for all the publications with a “Low Lifespan” and a “High SubRate” See the following image:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/9VOU29DPwP.png&quot; alt=&quot;Subscriptions Without Subscriptions Manager&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you’ve added Subscriptions Manager, play around with your app a bit again. Check it with Kadira and verify.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/Qh223Wk5ud.png&quot; alt=&quot;Subscriptions Without Subscriptions Manager&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;im-sending-1000s-of-documents-to-a-client-do-i-need-to-add-subscriptions-manager&quot;&gt;I’m sending 1000’s of documents to a client. Do I need to add Subscriptions Manager?&lt;/h2&gt;

&lt;p&gt;Of course, you must add Subscriptions Manager. Without Subscriptions Manager, you are sending a great deal of data to the client, so it wastes your bandwidth and CPU usage. Server’s memory usage is not as bad as it seems. Check my article on Kadira Academy on &lt;a href=&quot;https://kadira.io/academy/optimize-memory-usage/&quot;&gt;memory usage&lt;/a&gt;. I’ll write more about this in the next week.&lt;/p&gt;

&lt;p&gt;Play with Subscriptions Manager and let me know how it works with your app. If you find any issues, please submit an &lt;a href=&quot;https://github.com/meteorhacks/subs-manager/issues&quot;&gt;issue&lt;/a&gt;. I’ll be happy to help you out.&lt;/p&gt;
</description>
      <link>http://localhost:4000/subscriptions-manager-is-here</link>
      <guid isPermaLink="true">http://localhost:4000/subscriptions-manager-is-here</guid>
      <pubDate>2014-06-13 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>June -- a big month for us</title>
      <description>&lt;p&gt;This is June and it’s a big month for us. It’s important us for because of two reasons.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;June 2nd is our first anniversary&lt;/li&gt;
  &lt;li&gt;Launch of Kadira&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Beside that I’ve some stories to tell you, that I’ve not revealed before.&lt;/p&gt;

&lt;h2 id=&quot;our-first-anniversary&quot;&gt;Our first anniversary&lt;/h2&gt;

&lt;p&gt;June 2nd is our first anniversary. I started MeteorHacks as a simple blog, and &lt;a href=&quot;http://meteorhacks.com/meteor-cluster-introduction-and-how-it-works.html&quot;&gt;“Introduction to the Meteor Cluster”&lt;/a&gt; was my first blog post. Then I started to hack into Meteor and began working on some interesting things (not just only the well-known projects). More about that later too.&lt;/p&gt;

&lt;p&gt;##Kadira (aka: Meteor APM)&lt;/p&gt;

&lt;p&gt;As promised, we launched &lt;a href=&quot;https://kadira.io/&quot;&gt;Kadira&lt;/a&gt; on June 2nd. Kadira is a performance monitoring solution, built from the ground up, for Meteor apps. I recommend every Meteor app should use Kadira to see what’s really happening inside the app.&lt;/p&gt;

&lt;h2 id=&quot;meteorhacks-team&quot;&gt;MeteorHacks Team&lt;/h2&gt;

&lt;p&gt;MeteorHacks was just me for the first few months. Then a couple of brilliant guys started working with me to build some awesome stuff. This is the MeteorHacks team:&lt;/p&gt;

&lt;h3 id=&quot;arunoda-susiripala&quot;&gt;&lt;a href=&quot;https://twitter.com/arunoda&quot;&gt;Arunoda Susiripala&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;That’s me, and my day job is to hack Meteor and find ways to build high performance Meteor apps.&lt;/p&gt;

&lt;h3 id=&quot;pahan-sarathchandra&quot;&gt;&lt;a href=&quot;https://twitter.com/pahans&quot;&gt;Pahan Sarathchandra&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Pahan was an Android and iOS developer before joining MeteorHacks. Now he is helping me to craft beautiful Meteor apps (he wrote most of the Kadira UI) and maintain our Twitter profile.&lt;/p&gt;

&lt;h3 id=&quot;muhammed-thanish&quot;&gt;&lt;a href=&quot;https://twitter.com/mnmtanish&quot;&gt;Muhammed Thanish&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Thanish is a superb NodeJS developer and a security researcher. He is helping me to hack Meteor and build awesome stuff like Kadira.&lt;/p&gt;

&lt;h3 id=&quot;nadee-anuththara&quot;&gt;Nadee Anuththara&lt;/h3&gt;
&lt;p&gt;An artist as well as a MeteorJS developer, Nadee has helped me with the non-development stuff at MeteorHacks, which all us developers hate to do.&lt;/p&gt;

&lt;h2 id=&quot;cometengine&quot;&gt;CometEngine&lt;/h2&gt;

&lt;p&gt;I mentioned earlier that we have worked on some cool stuff. &lt;a href=&quot;https://cometengine.com/&quot;&gt;CometEngine&lt;/a&gt;, a deployment platform for Meteor, is an example. After a while, we realized that CometEngine was a subset of Galaxy. So we stopped working on CometEngine and started Meteor APM (now Kadira) instead.&lt;/p&gt;

&lt;p&gt;Then we created &lt;a href=&quot;https://github.com/arunoda/meteor-up&quot;&gt;Meteor UP&lt;/a&gt; with some of the CometEngine tooling. We wanted to provide a reliable way of deploying Meteor apps for our early CometEngine users until Galaxy available for public. I’m really thrilled to see that Meteor UP is currently one of the best ways of deploying Meteor apps.&lt;/p&gt;

&lt;h2 id=&quot;future&quot;&gt;Future&lt;/h2&gt;
&lt;p&gt;There won’t be any changes to what we are already doing. I will be hacking into Meteor as usual, and now I have a team :)&lt;/p&gt;

&lt;p&gt;Meteor Weekly will be massively improved and our &lt;a href=&quot;https://twitter.com/meteorhacks&quot;&gt;@meteorhacks&lt;/a&gt; Twitter account will be a daily Meteor news source.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Our ultimate goal&lt;/strong&gt; is to help you to develop high performance Meteor applications. So, with that goal in mind, we will be providing lots of projects, guides, and courses.&lt;/p&gt;

&lt;p&gt;Finally, I’d like to thank everyone who has helped us in various ways and all the MeteorHacks readers. We are glad to be part of the great MeteorJS community and we appreciate your help toward accomplishing our goal.&lt;/p&gt;
</description>
      <link>http://localhost:4000/june-a-big-month-for-us</link>
      <guid isPermaLink="true">http://localhost:4000/june-a-big-month-for-us</guid>
      <pubDate>2014-06-05 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>We launched Kadira: Performance Monitoring for Meteor</title>
      <description>&lt;p&gt;It’s June 2nd. As &lt;a href=&quot;http://meteorhacks.com/june-2nd-we-are-launching-meteor-apm.html&quot;&gt;promised&lt;/a&gt;, today we have launched our performance monitoring service for Meteor – &lt;a href=&quot;https://kadira.io/&quot;&gt;Kadira&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It was previously known as Meteor APM.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Just like Meteor, Kadira is not like other monitoring services. We built it from the ground up to
show you what’s really happening in your Meteor app in near real-time. Based on those metrics, we will &lt;a href=&quot;https://kadira.io/academy/&quot;&gt;help you&lt;/a&gt; optimize your app and stay out of trouble.&lt;/p&gt;

&lt;p&gt;Without further ado, connect your Meteor app with &lt;a href=&quot;https://kadira.io/&quot;&gt;Kadira&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kadira.io/&quot;&gt;&lt;img src=&quot;https://i.cloudup.com/LwrCCa_RRE.png&quot; alt=&quot;Kadira Dashboard&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I am also available on the &lt;a href=&quot;http://webchat.freenode.net/?channels=meteor&quot;&gt;Meteor IRC Channel&lt;/a&gt;. Come and ask me anything :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;note-for-our-early-users&quot;&gt;Note for our early users&lt;/h2&gt;

&lt;p&gt;Thank you for helping us find issues and trusting us to use kadira with your production apps. You do not need to sign up again. Simply use &lt;a href=&quot;https://atmospherejs.com/package/kadira&quot;&gt;kadira&lt;/a&gt; atmosphere package instead of &lt;a href=&quot;https://atmospherejs.com/package/apm&quot;&gt;apm&lt;/a&gt;. You can use existing appId and appSecret.&lt;/p&gt;

&lt;p&gt;Use the new &lt;a href=&quot;https://ui.kadira.io/&quot;&gt;Kadira dashboard&lt;/a&gt; instead of the old one. Again, you can use existing username and password.&lt;/p&gt;
</description>
      <link>http://localhost:4000/we-launched-kadira</link>
      <guid isPermaLink="true">http://localhost:4000/we-launched-kadira</guid>
      <pubDate>2014-06-02 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>June 2nd – We are launching Meteor APM</title>
      <description>&lt;p&gt;It’s not a secret that we have been working on Meteor APM over the last six months. &lt;a href=&quot;https://meteorapm.com/&quot;&gt;Meteor APM&lt;/a&gt; is an application performance monitoring service specifically built for Meteor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/rf8cYvHRvA.png&quot; alt=&quot;Meteor APM Dashboard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It can tell you exactly what is happening inside your Meteor app and show you the most important metrics that can be used to optimize your app. In addition, you can drill down into the function call level and determine the exact reason for the performance issues and errors.&lt;/p&gt;

&lt;p&gt;Don’t just take my word. Take a look at these comments by our early users:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/arunoda&quot;&gt;@arunoda&lt;/a&gt; Just tested APM locally and it already blew me away :-) Really awesome tool – Goodbye New Relic &amp;amp; Co, let&amp;#39;s do it the Meteor way !&lt;/p&gt;&amp;mdash; Dominik Guzei (@DominikGuzei) &lt;a href=&quot;https://twitter.com/DominikGuzei/statuses/464283981857701889&quot;&gt;May 8, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p&gt;Meteor APM looks awesome. Great stuff from &lt;a href=&quot;https://twitter.com/arunoda&quot;&gt;@arunoda&lt;/a&gt; again. &lt;a href=&quot;https://twitter.com/meteorjs&quot;&gt;@meteorjs&lt;/a&gt;&lt;/p&gt;&amp;mdash; William Swannell (@wswannell) &lt;a href=&quot;https://twitter.com/wswannell/statuses/458324729364230144&quot;&gt;April 21, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;p&gt;During the last six months, we have been working with more than 200 developers, and we are currently serving over 100 live apps with Meteor APM. We are thrilled with the comments we have received so far,  and our infrastructure is ready. Therefore, we’ve decided to release Meteor APM on June 2.&lt;/p&gt;

&lt;p&gt;We’ll be hosting a webinar along with the release. Join us on &lt;a href=&quot;http://www.worldtimebuddy.com/?qm=1&amp;amp;lid=8,2643743,1248991,1796236&amp;amp;h=8&amp;amp;date=2014-6-2&amp;amp;sln=9-10&quot;&gt;June 2 at 9 a.m. PDT&lt;/a&gt;. Register &lt;a href=&quot;http://mad.ly/signups/109123/join&quot;&gt;Here for the Webinar&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;surprises&quot;&gt;Surprises&lt;/h2&gt;

&lt;p&gt;June 2 is a very special day for us at MeteorHacks. Along with the Meteor APM release, we are releasing a few more performance-related projects for Meteor and a special guide.&lt;/p&gt;

&lt;p&gt;Don’t forget to &lt;a href=&quot;http://mad.ly/signups/109123/join&quot;&gt;join the Webinar&lt;/a&gt; on June 2 at 9 a.m. PDT. It will be an exciting event.&lt;/p&gt;
</description>
      <link>http://localhost:4000/june-2nd-we-are-launching-meteor-apm</link>
      <guid isPermaLink="true">http://localhost:4000/june-2nd-we-are-launching-meteor-apm</guid>
      <pubDate>2014-05-12 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Improving Meteor’s MongoDB Read Performance and CPU Usage with Find-Faster</title>
      <description>&lt;p&gt;Over the last few weeks, I have been working on improving the performance of a few Meteor apps. I started to load-test those applications and I figured out something very interesting: response time significantly increase with throughput. See the following method trace I extracted from &lt;a href=&quot;https://meteorapm.com/&quot;&gt;Meteor APM&lt;/a&gt; during a load test:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/x_nSs7vEE8.png&quot; alt=&quot;Higher Response Time&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It was pretty scary to see such response times for &lt;code class=&quot;highlighter-rouge&quot;&gt;_id&lt;/code&gt; lookups on a collection. This may be due to some delay with the network or with the concurrent handling of the node MongoDB driver. So, I began thinking about a solution.&lt;/p&gt;

&lt;h2 id=&quot;hacking-time&quot;&gt;Hacking Time&lt;/h2&gt;

&lt;p&gt;After a few hours of hacking into the Meteor core, I came up with a solution that fixes the above problem. So I &lt;a href=&quot;https://twitter.com/arunoda/status/459866024397918210&quot;&gt;tweeted&lt;/a&gt; a simple (but not realistic) benchmark. A few people became interested in the project and David Glasser from the MDG helped me to iron out some potential issues. It was a good learning time.&lt;/p&gt;

&lt;h2 id=&quot;meet-find-faster&quot;&gt;Meet Find-Faster&lt;/h2&gt;

&lt;p&gt;Now the solution is ready. It’s called &lt;a href=&quot;https://github.com/arunoda/meteor-find-faster&quot;&gt;find-faster&lt;/a&gt; and is available from &lt;a href=&quot;https://atmospherejs.com/package/find-faster&quot;&gt;Atmosphere&lt;/a&gt;. As the name implies, it finds documents from MongoDB faster than the default Meteor implementation. It simply starts a short-lived observer for each identical query and caches the results (actually the observer does the caching).&lt;/p&gt;

&lt;p&gt;So, multiple find() calls with the same query won’t hit the MongoDB server again and again; it simply utilizes the cache. Changes to the query will be updated by the observer via oplog. This reduces the response times, CPU usage and network usage without much memory impact for your app.&lt;/p&gt;

&lt;p&gt;Usage is pretty simple. All you have to do is use findFaster instead of find. Browse the &lt;a href=&quot;https://github.com/arunoda/meteor-find-faster&quot;&gt;documentation&lt;/a&gt; for more information on usage.&lt;/p&gt;

&lt;h2 id=&quot;benchmarks&quot;&gt;Benchmarks&lt;/h2&gt;

&lt;p&gt;The benchmark test I mentioned in the tweet is far from a realistic scenario. So, I wanted to create a benchmark test with a real app. So here it is.&lt;/p&gt;

&lt;p&gt;Our app is a simple group chat application. We’ll load-test two scenarios:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Just two &lt;code class=&quot;highlighter-rouge&quot;&gt;_id&lt;/code&gt; lookups in a single method call&lt;/li&gt;
  &lt;li&gt;1000 documents fetched from the DB in a single method call&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Both these queries have been optimized with the right indexes. The chat app connects to &lt;a href=&quot;https://meteorapm.com/&quot;&gt;Meteor APM&lt;/a&gt; while the load-testing is running, so we can understand what’s happening inside the app.&lt;/p&gt;

&lt;p&gt;The chat app I used and the load-testing tool are &lt;a href=&quot;https://github.com/meteorhacks/find-faster-chat-demo&quot;&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;scenario-1-just-two-_id-lookups&quot;&gt;Scenario 1: Just two &lt;code class=&quot;highlighter-rouge&quot;&gt;_id&lt;/code&gt; lookups&lt;/h3&gt;

&lt;p&gt;This is the method we run the load test against. The &lt;code class=&quot;highlighter-rouge&quot;&gt;useFindFaster&lt;/code&gt; parameter will be used by the load-testing tool to notify whether to use &lt;code class=&quot;highlighter-rouge&quot;&gt;find-faster&lt;/code&gt; or not.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;chat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useFindFaster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unblock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;methodName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;useFindFaster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;findOneFaster&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;findOne&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;methodName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;401&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Unauthorized!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userInGroup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Groups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;methodName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userInGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;Chats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;401&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Not Authorized To Post!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These are the results we got:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/cb_r-W_vAB.png&quot; alt=&quot;Results - Find Faster with `_id` lookups&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is clear that find-faster reduces the overall response time comparatively. As we increase throughput, the response time remains steady in both cases. fast-finder does a good job at reducing the response time for reads but inserting the chat takes some time. See the method trace below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/JWL4Llaxf1.png&quot; alt=&quot;Response Time Reduction with Find Faster&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is the CPU utilization of the Meteor process during the load-testing:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/0wzXYbbByr.png&quot; alt=&quot;CPU Utilization improvements of Find Faster for `_id` lookups&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Find Faster does not improve the CPU usage significantly, but the difference is something notable.&lt;/p&gt;

&lt;h3 id=&quot;scenario-2-with-1000-docs&quot;&gt;Scenario 2: With 1000 Docs&lt;/h3&gt;

&lt;p&gt;I wanted to load-test &lt;code class=&quot;highlighter-rouge&quot;&gt;find-faster&lt;/code&gt; with an extreme case. This is the code for that:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;getReport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useFindFaster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unblock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;methodName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;useFindFaster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;findFaster&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;find&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;groupData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Chats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;methodName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//do some calculation&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s look at the response time comparison.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/y7114S9efd.png&quot; alt=&quot;Find Faster Response Time Improvements for Big Queries&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s a huge win. With the default &lt;code class=&quot;highlighter-rouge&quot;&gt;find()&lt;/code&gt;, the response time increases with an increase in throughput until the throughput gets capped.&lt;/p&gt;

&lt;p&gt;But with &lt;code class=&quot;highlighter-rouge&quot;&gt;find-faster&lt;/code&gt;, even though the throughput keeps increasing, there is no corresponding increase in the response time.&lt;/p&gt;

&lt;p&gt;This is the CPU utilization while the load-testing is happening:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/kXGFStfvPj.png&quot; alt=&quot;Huge CPU gain for Meteor with find-faster&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wow! I don’t need to explain this graph.&lt;/p&gt;

&lt;h2 id=&quot;when-you-should-use-find-faster&quot;&gt;When you should use Find-Faster&lt;/h2&gt;

&lt;p&gt;I think that I don’t need to convince you anymore to use find-faster in your apps. But you can’t replace all find() queries with findFaster() for the following reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;find-faster needs an active oplog connection&lt;/li&gt;
  &lt;li&gt;find-faster reads are &lt;a href=&quot;https://github.com/arunoda/meteor-find-faster#find-faster-reads-are-eventually-consistent&quot;&gt;eventually consistent&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the places where you can use find-faster without any issues and where it shines:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you are fetching a lot of data from MongoDB.&lt;/li&gt;
  &lt;li&gt;If your collection has more reads than writes.&lt;/li&gt;
  &lt;li&gt;If your query has a considerable amount of throughput (5+ requests per second).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the places where you should think twice before using find-faster:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you really need the exact state of the DB (check the docs for more information).&lt;/li&gt;
  &lt;li&gt;If your query’s cardinality is pretty high. Then there will be more cache misses than hits.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information on the usage and to know when to use find-faster, please refer to the &lt;a href=&quot;https://github.com/arunoda/meteor-find-faster&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;If your Meteor application reads a lot of data, you should consider using &lt;code class=&quot;highlighter-rouge&quot;&gt;find-faster&lt;/code&gt;. Give it a try and let me know how it works with your apps.&lt;/p&gt;
</description>
      <link>http://localhost:4000/improving-meteors-mongodb-read-performance-and-cpu-usage-with-find-faster</link>
      <guid isPermaLink="true">http://localhost:4000/improving-meteors-mongodb-read-performance-and-cpu-usage-with-find-faster</guid>
      <pubDate>2014-05-02 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Instant Login For Meteor With Fast Render</title>
      <description>&lt;p&gt;We normally use &lt;a href=&quot;http://meteorhacks.com/fast-render/&quot;&gt;Fast-Render&lt;/a&gt; for rendering the initial page quickly in meteor apps that have public-facing interfaces. But also, Fast-Render can be pretty useful for applications that have both private and public views based on the login state.&lt;/p&gt;

&lt;p&gt;For an example, look at the following template.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/ZUqPjhYyLh.png&quot; alt=&quot;Meteor Template with Login Status Check&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If there is no user logged in, it renders a template called &lt;code class=&quot;highlighter-rouge&quot;&gt;guest&lt;/code&gt;, as shown below;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/SfWnvaAaTN.png&quot; alt=&quot;Without Logged In&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If there is a logged in user, it renders the &lt;code class=&quot;highlighter-rouge&quot;&gt;dashboard&lt;/code&gt; template:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/3dhG5-rJ2Z.png&quot; alt=&quot;With Logged In&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Even when there is a logged in user, the Guest template is always rendered when the browser is loading the application. This is because Meteor gets logged in information only when it’s connected to the DDP server. See the following video to observe this behavior:&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/IcmIPoKhuD0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;1&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;This situation applies, too, if you are routing based on the user status or displaying certain content by checking the user status with a template helper.&lt;/p&gt;

&lt;h2 id=&quot;fast-render-is-the-cure&quot;&gt;Fast-Render Is The Cure&lt;/h2&gt;

&lt;p&gt;It’s simple—all you have to do is add Fast-Render or, if you already have it, update to the newest version. If there is a logged in user, Meteor will render the template for the logged in user directly—it will never render the Guest template on the screen.&lt;/p&gt;

&lt;p&gt;Watch the following video to see how this works:&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/szWRc2ag1Xc&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;1&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;That’s what I call &lt;em&gt;&lt;strong&gt;Instant Login&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-is-this-possible&quot;&gt;How Is This Possible?&lt;/h2&gt;

&lt;p&gt;Meteor’s &lt;a href=&quot;https://github.com/meteor/meteor/tree/devel/packages/accounts-base&quot;&gt;accounts-base&lt;/a&gt; package has a very special &lt;a href=&quot;http://goo.gl/CSjTJ4&quot;&gt;publication&lt;/a&gt; which is implemented as a &lt;a href=&quot;http://docs.meteor.com/#meteor_publish&quot;&gt;null publication&lt;/a&gt; – that sends logged in user information to the client.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the publication’s name is null, it is automatically subscribed when the DDP connection is established.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Fast-Render looks for all the null publications and sends all their documents to the client with the initial HTML. So, Fast-Render really can fix the above mentioned issue.
To experience Instant Login, add Fast-Render to your project with &lt;code class=&quot;highlighter-rouge&quot;&gt;mrt add fast-render&lt;/code&gt; – it just works.&lt;/p&gt;
</description>
      <link>http://localhost:4000/instant-login-for-meteor-with-fast-render</link>
      <guid isPermaLink="true">http://localhost:4000/instant-login-for-meteor-with-fast-render</guid>
      <pubDate>2014-04-16 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Cross Site Scripting(XSS) and Meteor</title>
      <description>&lt;p&gt;Recently, I had reason to do a bit of research on Cross Site Scripting (XSS) and how it affects Meteor. This is what I found out – I hope this information will help you, too. First, let’s understand what XSS is.&lt;/p&gt;

&lt;h2 id=&quot;what-is-cross-site-scripting-xss&quot;&gt;What is Cross Site Scripting (XSS)?&lt;/h2&gt;

&lt;p&gt;XSS is a mechanism where malicious users find a way to execute JavaScript on your app without your knowledge or authorization. This is one of the most common attacks and very hard to prevent if you haven’t attended to it in advance.&lt;/p&gt;

&lt;p&gt;XSS can be caused by the response generated either by the Server or in the Client with the dynamic content generation. Since Meteor does not do Server Side Rendering yet, we will focus on Client Side XSS.&lt;/p&gt;

&lt;p&gt;As an example, let’s say I’m working on a community forum site with Meteor that allows users to post links. One of the typical templates looks like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/arunoda/728241f800a238d46fa0.js&quot;&gt;
&lt;/script&gt;

&lt;p&gt;This seems perfectly fine. But, let’s say someone adds a post with URL &lt;code class=&quot;highlighter-rouge&quot;&gt;javascript:alert('hacked')&lt;/code&gt;. Then the rendered DOM will be something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;a href='javascript:alert(&quot;hacked&quot;)'&amp;gt;
    Google has direct connections with NSA. They were lying to us.
&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When you click that link, you’ll see the alert box as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/nkemRMf91z.png&quot; alt=&quot;XSS and Meteor&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The older version of the Telescope Meteor app is also vulnerable to this hack and has avoided it with something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;a href='/out?url='&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is just one type of XSS attack. To learn more, consult the &lt;a href=&quot;https://www.owasp.org/index.php/Types_of_Cross-Site_Scripting&quot;&gt;OWASP XSS guide&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-does-xss-harm-meteor&quot;&gt;How Does XSS Harm Meteor?&lt;/h2&gt;

&lt;p&gt;This is the most important question. Of course, simply posting an alert message, as in the example above, would not do any harm.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;With XSS, malicious users have access to the logged in user’s DDP connection and can do whatever they need, including altering mongodb and the server state, where the logged in user allows it. &lt;/li&gt;
  &lt;li&gt;Since Meteor uses localStorage for the session persistent, malicious user can steal a logged in user’s identity. I’ve demonstrated this in a &lt;a href=&quot;http://meteorhacks.com/introducing-portable-meteor-user.html&quot;&gt;previous article&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;should-i-be-worried&quot;&gt;Should I Be Worried?&lt;/h2&gt;

&lt;p&gt;XSS mostly occurs when your app accepts and displays user generated content. But XSS can still happen even if you are not accepting any user generated content.&lt;/p&gt;

&lt;p&gt;For example, maybe you allow users to search your app or display something on the screen based on a URL parameter. Or maybe some of your smart packages or third party JavaScript libraries are vulnerable to XSS. These are just two situations where malicious users applying XSS can cause a lot of trouble for you and your users.&lt;/p&gt;

&lt;p&gt;So, it’s better to take any measures you can to prevent XSS and related attacks.&lt;/p&gt;

&lt;h2 id=&quot;xss-prevention&quot;&gt;XSS Prevention&lt;/h2&gt;

&lt;h3 id=&quot;be-cautious-when-adding-user-content-in-untrusted-areas&quot;&gt;Be Cautious When Adding User Content in Untrusted Areas&lt;/h3&gt;

&lt;p&gt;The OWASP XSS guide shows some &lt;a href=&quot;http://bit.ly/R92c8z&quot;&gt;untrusted areas&lt;/a&gt; in the HTML where you might need to focus when adding user content. If your app uses one of those areas, use some defense mechanism to deal with XSS.&lt;/p&gt;

&lt;h3 id=&quot;use-content-security-policy-csp&quot;&gt;Use Content Security Policy (CSP)&lt;/h3&gt;

&lt;p&gt;Even if you have made sure to cover all the untrusted code shown above, there is still a chance that you might miss some places.&lt;/p&gt;

&lt;p&gt;Sometimes a package you install or a third party library can cause vulnerability to XSS or might do something unintended.&lt;/p&gt;

&lt;p&gt;That’s where the W3C standard, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Security/CSP/Introducing_Content_Security_Policy&quot;&gt;Content Security Policy&lt;/a&gt;, comes in handy. With CSP, a web server can ask the browser to limit some of the actions that cause XSS.&lt;/p&gt;

&lt;p&gt;These actions include different methods of JavaScript execution and loading of resources like images, script, and even WebSockets.&lt;/p&gt;

&lt;p&gt;Click &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Security/CSP/CSP_policy_directives&quot;&gt;here&lt;/a&gt; learn more about CSP directives.&lt;/p&gt;

&lt;h4 id=&quot;meteor-and-csp&quot;&gt;Meteor and CSP&lt;/h4&gt;

&lt;p&gt;Meteor has a package called &lt;a href=&quot;http://docs.meteor.com/#browserpolicy&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;browser-policy&lt;/code&gt;&lt;/a&gt;, which helps you to create CSP rules very easily.&lt;/p&gt;

&lt;p&gt;Once you add the package, you will get the following CSP policies by default.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;default-src 'self'; script-src 'self' 'unsafe-inline'; connect-src * 'self'; img-src data: 'self'; style-src 'self' 'unsafe-inline';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is how we can interpret the above rules, in plain text:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You will only be able to load resources from the current origin of your app&lt;/li&gt;
  &lt;li&gt;You won’t be able to execute eval or similar functionalities&lt;/li&gt;
  &lt;li&gt;You will be able to use inline scripts and so your app is vulnerable to potential XSS attacks, as I showed in the beginning of the article.&lt;/li&gt;
  &lt;li&gt;You will be able connect to any external service via AJAX, WebSockets, and similar techniques, which also makes your app vulnerable to potential XSS attacks.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These restrictions add some level of protection, but the third and fourth points make your app still vulnerable to XSS.&lt;/p&gt;

&lt;h4 id=&quot;block-everything-then-allow-as-necessary&quot;&gt;Block Everything, then Allow As Necessary&lt;/h4&gt;

&lt;p&gt;Add the following code in the server side of your app to remove potential vulnerabilities:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BrowserPolicy.content.disallowInlineScripts();
BrowserPolicy.content.disallowConnect();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Adding this code will prevent you from using Meteor’s DDP connection, so you should also add the following rules:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var rootUrl = __meteor_runtime_config__.ROOT_URL;
BrowserPolicy.content.allowConnectOrigin(rootUrl);
BrowserPolicy.content.allowConnectOrigin(rootUrl.replace('http', 'ws'));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you are hosting on meteor.com, you need to add rules like the ones shown below. This is not an ideal solution, since your app is allowed to connect to any app hosted on meteor.com.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BrowserPolicy.content.allowConnectOrigin(&quot;https://*.meteor.com&quot;);
BrowserPolicy.content.allowConnectOrigin(&quot;wss://*.meteor.com&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;allow-trusted-origins--resources&quot;&gt;Allow Trusted Origins &amp;amp; Resources&lt;/h4&gt;

&lt;p&gt;Since we blocked all the origins, you will need to allow resources as shown below. Adding something like Google Analytics is tricky, since you need to expand its asynchronous code and allow it to run without inline scripts and eval.&lt;/p&gt;

&lt;p&gt;To do this, first add the following code inside the HTML head:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script type=&quot;text/javascript&quot; src=&quot;//www.google-analytics.com/analytics.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot; src=&quot;/ga.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now create a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;ga.js&lt;/code&gt; into your public folder and add following content:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ga(&quot;create&quot;, &quot;YOUR_GA_ID&quot;, &quot;YOUR_WEBSITE&quot;);
ga(&quot;send&quot;, &quot;pageview&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, add the following CSP permissions:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//for the script
BrowserPolicy.content.allowScriptOrigin(&quot;*.google-analytics.com&quot;);
//for the tracking pixel
BrowserPolicy.content.allowImageOrigin(&quot;*.google-analytics.com&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Use the &lt;a href=&quot;docs.meteor.com/#browserpolicy&quot;&gt;Browser Policy API&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Security/CSP/CSP_policy_directives&quot;&gt;CSP Docs&lt;/a&gt; to allow origins for all the external resources you load. I know this seems hard, but it’s well worth the trouble to prevent XSS.&lt;/p&gt;

&lt;h3 id=&quot;fast-render-and-csp&quot;&gt;Fast Render and CSP&lt;/h3&gt;

&lt;p&gt;Since we blocked inline scripts, Fast Render won’t work. I’ve already decided on a fix and I plan to release it in the next week.&lt;/p&gt;

&lt;h3 id=&quot;beware-of-browser-extensions&quot;&gt;Beware of Browser Extensions&lt;/h3&gt;

&lt;p&gt;Although CSP saves us from XSS, browser extensions can defeat CSP.  Refer to &lt;a href=&quot;https://www.planbox.com/blog/development/coding/bypassing-githubs-content-security-policy-chrome-extension.html&quot;&gt;this&lt;/a&gt; article for more information about this. Although it’s not something we should worry much about, it is possible to completely turn off CSP from a browser extension.&lt;/p&gt;

&lt;p&gt;Unfortunately, Chrome does not show these modified headers in its developer console. Instead it shows the original headers. Because of this, detecting these kinds of issues is very hard. Since these extensions are installed by the user, we can’t do much about it.&lt;/p&gt;

&lt;p&gt;In this post I’ve covered XSS basics and how XSS can be prevented with Meteor. I’ve also talked about Content Security Policy and how you can implement CSP with Meteor, along with some other facts. I hope this information is useful for you as you work on improving your app’s security. I’ll post more security related topics in upcoming weeks.&lt;/p&gt;
</description>
      <link>http://localhost:4000/xss-and-meteor</link>
      <guid isPermaLink="true">http://localhost:4000/xss-and-meteor</guid>
      <pubDate>2014-04-11 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Understanding Meteor Wait Time &amp; this.unblock</title>
      <description>&lt;p&gt;You’ve probably experienced a situation where some of your methods are processing very slowly, even if there is no issue with the methods themselves. This is quite common if you are interacting with third party services or doing some heavy DB operations.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;With &lt;a href=&quot;https://meteorapm.com/&quot;&gt;Meteor APM&lt;/a&gt;, you can check this very easily. Meteor APM detects the waitTime and shows you what caused it.&lt;/p&gt;

  &lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/QpP86FJXaI.png&quot; alt=&quot;Meteor APM can detect waitTime&quot; /&gt;
&lt;img src=&quot;https://i.cloudup.com/36w9qEBk8I.png&quot; alt=&quot;Meteor APM can detect waitTime&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Wait time is not good—we all hate waiting. If you have looked for a solution, the common answer is to use &lt;code class=&quot;highlighter-rouge&quot;&gt;this.unblock&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now you might ask, if that’s the answer, then why doesn’t Meteor do it by default?
Well, it’s not as simple as that.&lt;/p&gt;

&lt;h2 id=&quot;ddp-messages-are-processed-in-a-sequence&quot;&gt;DDP messages are processed in a sequence&lt;/h2&gt;

&lt;p&gt;Meteor processes DDP messages for a client in a sequence. All other messages are queued before the current one is completed. This applies not only to methods, but to all DDP messages, including subscriptions.&lt;/p&gt;

&lt;p&gt;By taking this approach, Meteor can ensure that all the subscriptions and methods you call are executed in order, so you can delete a document and insert it back into the queue without causing any errors. This is how things work naturally in many places, not just within Meteor.&lt;/p&gt;

&lt;h2 id=&quot;why-use-thisunblock&quot;&gt;Why use “this.unblock”&lt;/h2&gt;

&lt;p&gt;Still, some methods will take more time to complete than others, particularly methods with third party API requests. So &lt;code class=&quot;highlighter-rouge&quot;&gt;this.unblock&lt;/code&gt; will allow the next available DDP message to process without waiting for the current method. This is all on a per client basis: there no blocking involved globally.&lt;/p&gt;

&lt;h2 id=&quot;why-thisunblock-does-not-always-work&quot;&gt;Why “this.unblock” does not always work&lt;/h2&gt;

&lt;p&gt;You can’t always use &lt;code class=&quot;highlighter-rouge&quot;&gt;this.unblock&lt;/code&gt; because sometimes it leads to unpredictable results. See the following example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Meteor.methods({
  //pick a given username from the twitter and update the DB
  pickProfile: function(username) {
    var profile = TwitterAPI.getProfile(username);
    ProfileCollection.upsert(username, {$set: {
      profile: profile
    }});
  },

  //notify all the users about a given email
  notifyUsers: function(username) {
    var profile = ProfileCollection.findOne(username);
    sendEmails(profile);
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above two methods are designed to be used independently, and are used in many places in the app. For example, in the following scenario both of them are used at once:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Meteor.call('pickProfile', 'arunoda');
Meteor.call('notifyUsers', 'arunoda');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example, the app will update the DB first and send the emails after that. If I put &lt;code class=&quot;highlighter-rouge&quot;&gt;this.unblock&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;pickProfile&lt;/code&gt; method, the emails would be sent; but with the old profile. And that’s not what we wanted.&lt;/p&gt;

&lt;p&gt;So, think twice when you are applying &lt;code class=&quot;highlighter-rouge&quot;&gt;this.unblock&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here’s the rule of thumb to use when you’re deciding whether to apply &lt;code class=&quot;highlighter-rouge&quot;&gt;this.unblock&lt;/code&gt; or not.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If a method will cause side effects and subsequent methods will depend on those side effects, do not invoke &lt;code class=&quot;highlighter-rouge&quot;&gt;this.unblock&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;waiting-for-subscriptions&quot;&gt;Waiting for subscriptions&lt;/h2&gt;

&lt;p&gt;If your methods are waiting for a subscription, there is no way you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;this.unblock&lt;/code&gt;. The only solution is to improve the responseTime of the subscription.&lt;/p&gt;

&lt;p&gt;To do that, you can add proper indexes for slow queries and try to minimize the DB interaction, if that’s possible. It is very rare to use an HTTP or Async task inside a publication, but in that case you’ll see show waitTime on your app frequently.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is good idea to avoid using HTTP and Async tasks inside publications, since they can cause security issues with FastRender. If Meteor implemented Server Side Rendering, that would also be affected. You can learn more about this issue in the FastRender &lt;a href=&quot;http://meteorhacks.com/fast-render/security-measures/&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now you have a better understanding of the reason for a wait time. Most importantly, now you know how to handle it properly.&lt;/p&gt;
</description>
      <link>http://localhost:4000/understanding-meteor-wait-time-and-this-unblock</link>
      <guid isPermaLink="true">http://localhost:4000/understanding-meteor-wait-time-and-this-unblock</guid>
      <pubDate>2014-03-28 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Meteor.js - A web framework for everyone</title>
      <description>&lt;p&gt;First of all, I want to mention that no solution works everywhere. That doesn’t change with &lt;a href=&quot;https://www.meteor.com/&quot;&gt;Meteor&lt;/a&gt; even. It is, though, a general purpose web framework built for everyone, regardless of whether you are an absolute beginner or a super duper ninja.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/vGGDKzejb7.png&quot; alt=&quot;MeteorJS&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;meteor-for-absolute-beginners&quot;&gt;Meteor for absolute beginners&lt;/h2&gt;

&lt;p&gt;You might have no prior experience in web development, but if you want to building an app based on your other expertise, like in mathematics or chemistry, then Meteor is the best framework for you. You can build your app without worrying too much about the technology behind it. Books like &lt;a href=&quot;https://www.discovermeteor.com/&quot;&gt;DiscoverMeteor&lt;/a&gt; will help you to jump-start the development.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/yaliceme&quot;&gt;Alice’s&lt;/a&gt; Rubic app is a good example of this. She is a community manager of Meteor and she had no previous web development experience. With some help from a co-worker, she built &lt;a href=&quot;http://rubiety.meteor.com/&quot;&gt;this&lt;/a&gt; Rubic app. Watch this &lt;a href=&quot;https://www.youtube.com/watch?v=f83ilGZakwE&amp;amp;feature=youtu.be&quot;&gt;video&lt;/a&gt; where she talks about her experience. It’s inspiring.&lt;/p&gt;

&lt;h2 id=&quot;meteor-for-front-end-developers&quot;&gt;Meteor for front-end developers&lt;/h2&gt;

&lt;p&gt;If you are a front-end developer and struggling to build a web app with Node (or a similar framework), Meteor is the answer for you. With Meteor’s &lt;a href=&quot;https://github.com/meteor/meteor/wiki/Using-Blaze&quot;&gt;template engine&lt;/a&gt; (aka Blaze) and it’s super simple &lt;a href=&quot;http://docs.meteor.com/&quot;&gt;APIs&lt;/a&gt; you can build your app very easily in less time.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/SachaGreif&quot;&gt;Sacha&lt;/a&gt; is a success story. He is a top-notch designer, who &lt;a href=&quot;http://work.sachagreif.com/&quot;&gt;worked&lt;/a&gt; for companies like RubyMotion &amp;amp; Hipmunk. He has never written a Node app before. But now he is managing one of most popular Meteor apps, &lt;a href=&quot;http://telesc.pe/&quot;&gt;Telescope&lt;/a&gt;, and he is the co-author of the &lt;a href=&quot;https://www.discovermeteor.com/&quot;&gt;DiscoverMeteor&lt;/a&gt; book I mentioned above.&lt;/p&gt;

&lt;p&gt;Another example is &lt;a href=&quot;https://twitter.com/marbemac&quot;&gt;Marc’s&lt;/a&gt; &lt;a href=&quot;https://itunes.apple.com/us/app/ralph-chat/id782873767?mt=8&quot;&gt;RalphChat&lt;/a&gt;. It’s a mobile and web chat app and this was Marc’s first attempt with Meteor.&lt;/p&gt;

&lt;h2 id=&quot;meteor-for-node-and-javascript-ninjas&quot;&gt;Meteor for Node and JavaScript ninjas&lt;/h2&gt;

&lt;p&gt;If you a ninja with a lot of experience with Node and JavaScript, Meteor is also a framework for you.&lt;/p&gt;

&lt;p&gt;You can change any part of your Meteor app as you want. You can define a custom-build system or change its real-time behavior. Meteor comes with very good public and internal APIs where you can customize as you please.&lt;/p&gt;

&lt;p&gt;For an example, I have written an &lt;a href=&quot;https://github.com/arunoda/meteor-smart-collections&quot;&gt;alternative&lt;/a&gt; real-time Mongo connector for Meteor, a &lt;a href=&quot;http://meteorhacks.com/fast-render/&quot;&gt;fast page-loading&lt;/a&gt; system, &lt;a href=&quot;https://github.com/arunoda/meteor-npm&quot;&gt;NPM integration&lt;/a&gt; and many other projects. There are many people in the Meteor community who are building amazing packages and solutions. You too can do marvelous stuff with this framework.&lt;/p&gt;

&lt;h2 id=&quot;amazing-core-team&quot;&gt;Amazing core team&lt;/h2&gt;
&lt;p&gt;Meteor has an amazing &lt;a href=&quot;https://www.meteor.com/about/people&quot;&gt;core team&lt;/a&gt;, comprising superstar engineers who worked or studied for Google, MIT and Asana. They are brilliant and work very closely with the community. If you look at the GitHub commit log, you will see how active they are.&lt;/p&gt;

&lt;h2 id=&quot;meteor-has-an-amazing-community-too&quot;&gt;Meteor has an amazing community too&lt;/h2&gt;

&lt;p&gt;Meteor’s &lt;a href=&quot;https://groups.google.com/forum/#!forum/meteor-talk&quot;&gt;community&lt;/a&gt; may not be the biggest and the greatest. But it has an amazing set of people from all over the world. One of the good things about the Meteor community is that we are like a family and like to help each other. There is no politics or bullshit.&lt;/p&gt;

&lt;p&gt;This is the right time to join the Meteor movement. Meteor will not be the next PHP or RoR but it will become something bigger and the first of its kind.&lt;/p&gt;
</description>
      <link>http://localhost:4000/meteor-js-web-framework-for-everyone</link>
      <guid isPermaLink="true">http://localhost:4000/meteor-js-web-framework-for-everyone</guid>
      <pubDate>2014-03-21 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>How to Use The New Meteor Retry Package</title>
      <description>&lt;p&gt;If you are building a somewhat large Meteor application, you might be using at least a single HTTP/REST API or a third-party service. Sometimes these services fail due to several reasons, so we need to implement retry logic to complete our task.&lt;/p&gt;

&lt;p&gt;Meteor 0.7.x comes with a nice package which helps us to build retry logic very quickly. It doesn’t do much else other than help us timeout and try again correctly. It implements &lt;a href=&quot;http://en.wikipedia.org/wiki/Exponential_backoff&quot;&gt;exponential backoff&lt;/a&gt; into the algorithm and allow many other &lt;a href=&quot;http://goo.gl/wMfxjg&quot;&gt;options&lt;/a&gt;. It is a general purpose package and can be used with both client and server.&lt;/p&gt;

&lt;h2 id=&quot;simple-demo&quot;&gt;Simple Demo&lt;/h2&gt;
&lt;p&gt;First add the retry package to your app.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;meteor add retry
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s how we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;retry&lt;/code&gt; package to get some data from an HTTP endpoint. This is implemented inside the &lt;em&gt;&lt;strong&gt;client&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var retry = new Retry({
  baseTimeout: 100, //starting from 100ms and starting
  maxTimeout: 1000, //max timeout will be 1 sec 
});
var retries = 0;

function getMeteorHacks() {
  HTTP.get('http://meteorhacks.com',function(err, res) {
    if(err) {
      if(retries &amp;lt; 5) {
        console.log('retring due to: ', err.message);
        retry.retryLater(++retries, getMeteorHacks);
      } else {
        console.log('failed after maximum retries: ', err.message);
      }
    } else {
      console.log(res.content);
    }
  });
}

getMeteorHacks();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;retrying-within-a-meteor-method&quot;&gt;Retrying Within a Meteor Method&lt;/h2&gt;

&lt;p&gt;The current version of the &lt;code class=&quot;highlighter-rouge&quot;&gt;retry&lt;/code&gt; package (which comes with 0.7.1.2) is not Fiber aware, but there is already a fix in the &lt;code class=&quot;highlighter-rouge&quot;&gt;devel&lt;/code&gt; branch. In the meantime, we can use a simple workaround to enable Fiber support. See, how we can use the retry package inside a Meteor method.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Meteor.methods({
  &quot;getSiteCopy&quot;: function() {
    var Future = Npm.require('fibers/future');
    var retry = new Retry({
      baseTimeout: 100, //starting from 100ms and starting
      maxTimeout: 1000, //max timeout will be 1 sec 
    });
    var retries = 0;
    var f = new Future();

    var getMeteorHacks = function () {
      try {
        var res = HTTP.get('http://meteorhacks2.com');
        f.return(res.content);
      } catch(ex) {
        if(retries &amp;lt; 5) {
          console.log('retring due to: ', ex.message);
          retry.retryLater(++retries, getMeteorHacks);
        } else {
          console.log('failed after maximum retries: ', ex.message);
          f.throw(ex);
        } 
      }
    }

    //you don't need to use this in the future Meteor versions  
    //Fiber supported version is already in the devel branch
    getMeteorHacks = Meteor.bindEnvironment(getMeteorHacks, function(err) {
      throw err;
    });

    getMeteorHacks();
    return f.wait();
  }
}); 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I wish, we can come up with a much simpler API to use this inside Meteor methods. But this is something we can use at this stage too, especially for package authors.&lt;/p&gt;
</description>
      <link>http://localhost:4000/how-to-use-the-new-meteor-retry-package</link>
      <guid isPermaLink="true">http://localhost:4000/how-to-use-the-new-meteor-retry-package</guid>
      <pubDate>2014-03-13 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Recent Changes on The Meteor Roadmap</title>
      <description>&lt;blockquote&gt;
  &lt;p&gt;This is not an official Meteor announcement, but a close look at the recent changes on the Meteor Roadmap on Trello.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you follow the &lt;a href=&quot;https://trello.com/b/hjBDflxp/meteor-roadmap&quot;&gt;Meteor Roadmap&lt;/a&gt; on Trello, you might have seen some notable changes today. Some of the major features like &lt;a href=&quot;https://trello.com/c/BQ3gu0no/12-official-testing-framework&quot;&gt;Testing&lt;/a&gt;, &lt;a href=&quot;https://trello.com/c/ZMvnfMfI/11-official-windows-support&quot;&gt;Windows&lt;/a&gt; and notably &lt;a href=&quot;https://trello.com/c/FMdB7GAu/78-galaxy-managed-meteor-deploy-to-your-own-servers&quot;&gt;Galaxy&lt;/a&gt; has been moved to &lt;em&gt;&lt;strong&gt;Under Consideration for 1.1+&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now, most of the Meteor Core team is assigned to &lt;a href=&quot;https://trello.com/c/d2Hd1Jo1/9-operate-an-official-package-server-and-fold-meteorite-into-meteor&quot;&gt;Atmosphere Integration&lt;/a&gt;. That is the major feature Meteor has left to do in it’s roadmap to Meteor 1.0. After that we can expect to see Meteor 1.0, specially &lt;em&gt;&lt;strong&gt;without&lt;/strong&gt;&lt;/em&gt; Galaxy. I assume, it will be released around end of the April or may be sometimes around May.&lt;/p&gt;

&lt;p&gt;Previously, In the &lt;a href=&quot;https://trello.com/c/FMdB7GAu/78-galaxy-managed-meteor-deploy-to-your-own-servers&quot;&gt;description&lt;/a&gt; of Galaxy, it was about an alpha version. But now, it has been changed to General Availability. So we can expect a stable version of Galaxy when it will be released.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Shameless Plug: &lt;a href=&quot;http://meteorhacks.com/meteor-weekly/&quot;&gt;Subscribe to MeteorWeekly&lt;/a&gt; for hot Meteor news like this :)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://trello.com/b/hjBDflxp/meteor-roadmap&quot;&gt;Checkout the all recent changes on Trello&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://trello.com/b/hjBDflxp/meteor-roadmap&quot;&gt;&lt;img src=&quot;https://i.cloudup.com/ka5BCiYFth.png&quot; alt=&quot;Recent Changes to Meteor Roadmap&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
      <link>http://localhost:4000/recent-changes-on-the-meteor-roadmap</link>
      <guid isPermaLink="true">http://localhost:4000/recent-changes-on-the-meteor-roadmap</guid>
      <pubDate>2014-03-07 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Subscription Manager for Iron Router</title>
      <description>&lt;p&gt;Iron Router has made a significant change to the way we handle subscriptions with its waitOn functionality. Most of the time now we handle subscriptions directly from Iron Router.&lt;/p&gt;

&lt;p&gt;But this comes at a cost. When we switch between routes, we lose the previous route’s subscriptions. This means that the meteor has to load the subscriptions again when switching back to that route. This is not problem of Iron Router itself; it is simply how subscriptions behave inside a &lt;code class=&quot;highlighter-rouge&quot;&gt;Deps.autorun&lt;/code&gt; computation. You can learn more about this in my &lt;a href=&quot;http://meteorhacks.com/meteor-subscription-optimizations.html&quot;&gt;Subscription Optimization&lt;/a&gt; presentation.&lt;/p&gt;

&lt;h2 id=&quot;here-comes-the-solution&quot;&gt;Here comes the solution&lt;/h2&gt;

&lt;p&gt;Last month at the first Meteor Hacks Show, I demonstrated how &lt;a href=&quot;http://www.youtube.com/watch?v=xzPg0-_TcXU&quot;&gt;Subscription Manager&lt;/a&gt; is able to handle this issue correctly. Since then I have experimented with several ways of integrating Subscription Manager into Iron Router (of course, with suggestions from Chris and Tom). Now we have the first preview of it.&lt;/p&gt;

&lt;p&gt;See the following demo:&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/hLnb4uxJmqk&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;1&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;Here is the app shown in the demo: &lt;a href=&quot;http://ir-sub-manager.meteor.com&quot;&gt;http://ir-sub-manager.meteor.com&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-add-subscription-manager-to-your-app&quot;&gt;How to add Subscription Manager to your app?&lt;/h2&gt;

&lt;p&gt;First of all let’s get familiar with some of the concepts used in Subscription Manager.&lt;/p&gt;

&lt;h3 id=&quot;its-based-on-routes&quot;&gt;It’s based on routes&lt;/h3&gt;

&lt;p&gt;Subscriptions are typically handled under routes, so it makes sense that the best place to add rules is directly into the routes. This way all the subscriptions underneath the routes will inherit those rules. This is a very important point, as it means that we don’t need to think about subscriptions, only routes.&lt;/p&gt;

&lt;p&gt;###Caching&lt;/p&gt;

&lt;p&gt;Subscription Manager allows subscriptions inside a route to be cached. You can specify how many instances of a route you want to be cached.&lt;/p&gt;

&lt;p&gt;For example, a typical blog will have a route like this: &lt;code class=&quot;highlighter-rouge&quot;&gt;/post/:_id&lt;/code&gt;. With Subscription Manager you can ask to cache 5 recent blog posts.&lt;/p&gt;

&lt;p&gt;If you find the term caching confusing, note that it relates here not to caching the documents inside a subscription, but to caching the subscriptions between routes.&lt;/p&gt;

&lt;p&gt;###Expiration&lt;/p&gt;

&lt;p&gt;Because we are now able to cache subscriptions, we may also cache subscriptions that are not used often. We need to find a way to remove these or get rid of them.&lt;/p&gt;

&lt;p&gt;We do this with expirations: you can explicitly ask Subscription Manager to expire subscriptions for a particular route after n number of minutes.&lt;/p&gt;

&lt;h2 id=&quot;putting-all-this-together&quot;&gt;Putting all this together&lt;/h2&gt;

&lt;p&gt;Now that you have a sound understanding of the terms and concepts used in Subscription Manager, it’s time to try an example. This is how we define routes for a simple blog with Subscription Manager enabled.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'home'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'home'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;waitOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'postList'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'postPage'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/post/:_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'postPage'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;waitOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'post'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//cache 5 blog posts&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;expire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//expire them if inactive for 3 minutes&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can learn more about the &lt;a href=&quot;https://github.com/EventedMind/iron-router/tree/sub-manager&quot;&gt;API here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;why-is-subscription-manager-built-into-iron-router&quot;&gt;Why is Subscription Manager built into Iron Router?&lt;/h2&gt;

&lt;p&gt;Initially, I started Subscription Manager as an independent project. Chris invited me to integrate it into Iron Router and I liked it, since most of the apps are built with Iron Router and it is the ideal place for Subscription Manager.&lt;/p&gt;

&lt;p&gt;I’m sure there will be some use cases where Subscription Manager will be useful outside Iron Router too. Let’s discuss what we could do for that.&lt;/p&gt;

&lt;h2 id=&quot;give-it-a-try-and-bug-me&quot;&gt;Give it a try and bug me&lt;/h2&gt;

&lt;p&gt;This project is available on Iron Router’s &lt;a href=&quot;https://github.com/EventedMind/iron-router/tree/sub-manager&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sub-manager&lt;/code&gt;&lt;/a&gt; branch. You can use this with your app by &lt;a href=&quot;https://github.com/EventedMind/iron-router/tree/sub-manager#installation&quot;&gt;tweeking the &lt;code class=&quot;highlighter-rouge&quot;&gt;smart.json&lt;/code&gt;&lt;/a&gt; a bit. Give it a try and let me know your suggestions. Most importantly, file &lt;a href=&quot;https://github.com/EventedMind/iron-router/issues&quot;&gt;issues&lt;/a&gt; and send me patches :)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Due to the alpha nature of this project, API and semantics can be changed rapidly. So, if you join with &lt;a href=&quot;http://mad.ly/signups/102205/join&quot;&gt;this email list&lt;/a&gt;, I can send you an email with every change that might break your app.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <link>http://localhost:4000/subscription-manager-for-iron-router</link>
      <guid isPermaLink="true">http://localhost:4000/subscription-manager-for-iron-router</guid>
      <pubDate>2014-02-20 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Meteor in Production - A Case Study</title>
      <description>&lt;blockquote&gt;
  &lt;p&gt;This is the very first guest post on MeteorHacks by &lt;a href=&quot;http://cn.linkedin.com/pub/brent-abrahams/87/372/ba1&quot;&gt;Brent Abrahams&lt;/a&gt;. He talks about how &lt;a href=&quot;http://meteorhacks.com/introducing-smart-collections.html&quot;&gt;SmartCollections&lt;/a&gt; help him to run his app – &lt;a href=&quot;http://www.standbench.com/&quot;&gt;Standbench&lt;/a&gt; – in production. He also talks about how Standbench started and how he scaled it step by step.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;This article has been written prior to the release of &lt;a href=&quot;https://www.meteor.com/blog/2014/03/18/meteor-072-scaling-realtime-mongodb&quot;&gt;Meteor 0.7.2&lt;/a&gt;. Author has mentioned some performance issues with Meteor Collection at the time article was written. But now it’s all gone and you can use Meteor’s Collection implementation with trust.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;I teach mathematics at an international school. Last year, our administrators were looking for online curriculum management software for the organization.  I didn’t like any of the existing solutions, and had just discovered Meteor.&lt;/p&gt;

&lt;p&gt;It just happened that I had a nine-day holiday coming up. So I wrote an extremely ambitious list of features for such a system and started hacking. To my amazement, I was able to tick off almost all the items in just over a week, leaving me with a pretty impressive prototype on my hands.&lt;/p&gt;

&lt;h2 id=&quot;the-fun-part&quot;&gt;The Fun Part&lt;/h2&gt;

&lt;p&gt;Back at school, I pitched the prototype to the administration and they went for it. So I spent two months over the summer writing a role based access control system, an undo-redo stack for all user transactions, and a bunch of widgets that gave me, among other things, one-line-in-a-template editable text, editable lists, routed tabs, and reactive dialogs.&lt;/p&gt;

&lt;p&gt;With everything refactored, secure and more feature-complete, we launched “&lt;a href=&quot;http://www.standbench.com/&quot;&gt;Standbench&lt;/a&gt;” in mid-August. Plaudits were rolling in and everyone was very pleased. Until disaster struck…&lt;/p&gt;

&lt;h2 id=&quot;trouble-in-paradise&quot;&gt;Trouble in Paradise&lt;/h2&gt;

&lt;p&gt;During a practical teacher training session that created a lot of simultaneous database writes, the server started crashing … hard. We were hosting &lt;a href=&quot;http://www.standbench.com/&quot;&gt;Standbench&lt;/a&gt; at school, and the server couldn’t cope with the massive CPU hit that &lt;a href=&quot;http://www.standbench.com/&quot;&gt;Standbench&lt;/a&gt; was dishing out (having to diff multiple subscriptions across numerous collections, all unique to each user).&lt;/p&gt;

&lt;p&gt;So we had a problem.&lt;/p&gt;

&lt;h2 id=&quot;searching-for-help&quot;&gt;Searching for Help&lt;/h2&gt;

&lt;p&gt;In an &lt;a href=&quot;http://book.discovermeteor.com/interview/nick-martin/&quot;&gt;extremely informative interview&lt;/a&gt; published in &lt;a href=&quot;http://book.discovermeteor.com/&quot;&gt;Discover Meteor&lt;/a&gt; (Premium Edition only), Nick Martin (Meteor core dev), says “I wrote a benchmark app that very heavily used data, and I got about &lt;strong&gt;three&lt;/strong&gt; concurrent users,” but he also says that apps without much data can serve &lt;strong&gt;thousands&lt;/strong&gt; of concurrent users.&lt;/p&gt;

&lt;p&gt;In the case of &lt;a href=&quot;http://www.standbench.com/&quot;&gt;Standbench&lt;/a&gt;, we were crashing at about &lt;strong&gt;ten&lt;/strong&gt; concurrent users, which obviously isn’t acceptable for a production scenario where we could very well have 200+.&lt;/p&gt;

&lt;h2 id=&quot;running-out-of-options&quot;&gt;Running out of Options&lt;/h2&gt;

&lt;p&gt;The solution to the issue of CPU use is not easy. After scaling vertically as far as possible, you’re still stuck with the fact that a node process runs in a single thread on a single core. And one CPU core can only do so much on its own.&lt;/p&gt;

&lt;p&gt;So … I optimized the codebase as much as I knew how, using some principles from &lt;a href=&quot;http://projectricochet.com/blog/things-you-need-know-when-scaling-meteor-js&quot;&gt;this post&lt;/a&gt; and others gleaned from that &lt;a href=&quot;http://book.discovermeteor.com/interview/nick-martin/&quot;&gt;extremely informative interview&lt;/a&gt;.  And … we were still crashing at &lt;strong&gt;ten&lt;/strong&gt; concurrent users.&lt;/p&gt;

&lt;h2 id=&quot;meteorhacks-to-the-rescue&quot;&gt;MeteorHacks to the Rescue&lt;/h2&gt;

&lt;p&gt;Enter &lt;a href=&quot;http://meteorhacks.com/&quot;&gt;Arunoda Susiripala and MeteorHacks&lt;/a&gt;. Arunoda had just published his &lt;a href=&quot;http://meteorhacks.com/introducing-smart-collections.html&quot;&gt;Smart Collections&lt;/a&gt; package so, with nothing to lose, I simply switched (almost) all instances of &lt;code class=&quot;highlighter-rouge&quot;&gt;new Meteor.Collection&lt;/code&gt; in my app to &lt;code class=&quot;highlighter-rouge&quot;&gt;new Meteor.SmartCollection&lt;/code&gt;. It took about 2 minutes and everything just worked.&lt;/p&gt;

&lt;p&gt;Since then, &lt;strong&gt;we haven’t had a single server crash&lt;/strong&gt;, although an informal load test with 20 concurrent users performing data intensive read actions still pushed the CPU to 100% (without the server failing).&lt;/p&gt;

&lt;h2 id=&quot;further-scaling-efforts&quot;&gt;Further Scaling Efforts&lt;/h2&gt;

&lt;p&gt;I was &lt;strong&gt;not&lt;/strong&gt; using the &lt;a href=&quot;http://meteorhacks.com/lets-scale-meteor.html&quot;&gt;Smart Collections MongoDB Oplog integration&lt;/a&gt;, so that was the next thing I did, which I understand is a huge factor in making the server load lighter. For good measure, I also scaled horizontally, using &lt;a href=&quot;http://meteorhacks.com/load-balancing-your-meteor-app.html&quot;&gt;HAProxy to load balance&lt;/a&gt; across 4 instances of the node process (we have 4 cores available on the server), which presumably gives us close to 4 times the number of concurrent users.&lt;/p&gt;

&lt;p&gt;At this stage, it feels like a lot of work to get a complex app deployed to scale on one’s own servers, even when serving a relatively small user base. &lt;a href=&quot;http://docs.meteor.com/#deploying&quot;&gt;Deploying to the meteor.com infrastructure&lt;/a&gt; is sooo much easier, so I’m really looking forward to Galaxy (the Meteor Development Group’s upcoming PaaS for Meteor apps).&lt;/p&gt;

&lt;h2 id=&quot;the-present&quot;&gt;The Present&lt;/h2&gt;

&lt;p&gt;Six months into production, we’re still alive. But I maintain, in all sincerity, that if Arunoda had not published his &lt;a href=&quot;http://meteorhacks.com/introducing-smart-collections.html&quot;&gt;Smart Collections&lt;/a&gt; when he did, &lt;a href=&quot;http://www.standbench.com/&quot;&gt;Standbench&lt;/a&gt; would have been on the shelf by now – beautiful but useless.&lt;/p&gt;

&lt;p&gt;I recently tried the oplog tailing that has now been integrated into the Meteor core, but it still lacks the comprehensive support that &lt;a href=&quot;http://meteorhacks.com/introducing-smart-collections.html&quot;&gt;Smart Collections&lt;/a&gt; has for mongo operators so, not surprisingly, I noticed a marked increase in CPU usage. I’ve switched back to &lt;a href=&quot;http://meteorhacks.com/introducing-smart-collections.html&quot;&gt;Smart Collections&lt;/a&gt; for the time being.&lt;/p&gt;

&lt;h2 id=&quot;the-future&quot;&gt;The Future&lt;/h2&gt;

&lt;p&gt;There are two issues with &lt;a href=&quot;http://meteorhacks.com/introducing-smart-collections.html&quot;&gt;Smart Collections&lt;/a&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Very occasionally the client gets in a bad state where successful updates to the server DB are not made to the client’s minimongo collection (which is fixed by a browser refresh, but is confusing for the user).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://meteorhacks.com/retiring-smart-collections.html&quot;&gt;Arunoda has stopped developing Smart Collections&lt;/a&gt;, so we’re currently in limbo waiting for the &lt;a href=&quot;https://github.com/meteor/meteor/wiki/Oplog-Observe-Driver&quot;&gt;Meteor core oplog integration&lt;/a&gt; to catch up with Smart Collections in terms of real-world performance.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Because of these issues, I will eventually switch back to the Meteor core Collections.&lt;/p&gt;

&lt;h2 id=&quot;thoughts-about-meteor-in-production-apps&quot;&gt;Thoughts about Meteor in Production Apps&lt;/h2&gt;

&lt;p&gt;Despite the challenges with scaling, at present, I don’t think I’ll be building a web app again &lt;strong&gt;without&lt;/strong&gt; using Meteor. The development process was just too sweet. What would otherwise take months-to-years to develop can be put together in a matter of weeks.&lt;/p&gt;

&lt;p&gt;In my mind, the cost of having to provision/configure a lot of server resources is worth paying if it makes the development/maintenance process easier. Obviously this trade-off isn’t going to work for every use case.&lt;/p&gt;
</description>
      <link>http://localhost:4000/meteor-in-production-a-case-study</link>
      <guid isPermaLink="true">http://localhost:4000/meteor-in-production-a-case-study</guid>
      <pubDate>2014-02-13 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Building Static Websites with Meteor</title>
      <description>&lt;p&gt;First, let’s have a look at &lt;a href=&quot;http://meteor.com&quot;&gt;meteor.com&lt;/a&gt; and how it works.&lt;/p&gt;

&lt;p&gt;We all know that &lt;a href=&quot;http://meteor.com&quot;&gt;meteor.com&lt;/a&gt; is made with Meteor itself. You might also notice that it loads very fast. Well actually there’s no loading process; just after the HTML is loaded, the page is rendered on the screen.&lt;/p&gt;

&lt;p&gt;But how is this possible? Normally it takes a bit of time to connect to the server, get the data and render the information on the screen. Does Meteor do some magic with Galaxy, which serves meteor.com?&lt;/p&gt;

&lt;p&gt;Hmm. Nope. It’s nothing like that. They are cheating a bit and meteor.com is not getting any data from the server via DDP. Let me show you what they have done.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/hKgCKSpYXE.png&quot; alt=&quot;Templates of meteor.com&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The image shows a set of templates meteor.com consists of. For each page, there is a corresponding template that provides the html output. So there is no need to get the data from the server, it’s all there. Although this doesn’t scale with thousands of pages, this is a neat trick and that’s how they handle the heavy load into meteor.com.&lt;/p&gt;

&lt;p&gt;There are no subscription requests or method calls sent to the server. So, this scales pretty well even with a massive load. If they add a caching proxy in front of meteor.com, technically the server behind meteor.com won’t get any load at all.&lt;/p&gt;

&lt;h2 id=&quot;how-meteor-do-this&quot;&gt;How Meteor do this?&lt;/h2&gt;

&lt;p&gt;I’m not sure whether this is the exact way how Meteor implemented meteor.com. But I’ll show you how to do it very easily without any hacks.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First install &lt;code class=&quot;highlighter-rouge&quot;&gt;showdown&lt;/code&gt; package with &lt;code class=&quot;highlighter-rouge&quot;&gt;meteor add showdown&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Then install &lt;code class=&quot;highlighter-rouge&quot;&gt;iron-router&lt;/code&gt; which helps us to do basic routing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is how we create a blogPost using a template.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/arunoda/c1d743650b53f5f6ac4e.js&quot;&gt;
&lt;/script&gt;

&lt;p&gt;Now you’ve a template named &lt;code class=&quot;highlighter-rouge&quot;&gt;does_meteor_scale&lt;/code&gt; which will be used to generate the HTML with &lt;code class=&quot;highlighter-rouge&quot;&gt;Template.does_meteor_scale()&lt;/code&gt;;&lt;/p&gt;

&lt;p&gt;Now let’s add a simple route as shown below.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'blog'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/blog/:slug'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'blog'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s time to create our blog template.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/arunoda/e5413c73795c1b91eebc.js&quot;&gt;
  
&lt;/script&gt;

&lt;p&gt;It’s clear that we are going to render the blog post into &lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt;. Let’s see how exactly we are going to do it.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;slug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;templateFunc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;templateFunc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'function'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;templateFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;404&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Make sure to start you Meteor app with the following environment variable. Then your server does not get any DDP requests at all.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export DDP_DEFAULT_CONNECTION_URL=http://non-existing-url.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this technique, you can have a very simple blog using just Meteor templates. I just created one.&lt;/p&gt;

&lt;p&gt;Have a look at it: &lt;a href=&quot;http://static-blog.meteor.com&quot;&gt;http://static-blog.meteor.com&lt;/a&gt;&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/jg404Z2Iqco&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;1&quot;&gt;
  
&lt;/iframe&gt;

&lt;p&gt;If you like to dig into the code, it’s available on &lt;a href=&quot;https://github.com/arunoda/meteor-static-blog&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is neither the best way to build a blog nor the easiest. But I just want to show that this is also something doable with Meteor. If we are lucky, someone will come up with a very easy way to do this by bundling some of the things that I’ve shown into a package.&lt;/p&gt;

&lt;p&gt;The final take away for the day from meteor.com is this. Scaling is as much an art as it is science. You need to know when and where to use the right tactic to get the most elegant and effective solution.&lt;/p&gt;
</description>
      <link>http://localhost:4000/building-static-websites-with-meteor</link>
      <guid isPermaLink="true">http://localhost:4000/building-static-websites-with-meteor</guid>
      <pubDate>2014-02-06 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>What's happened at the First MeteorHacks Show</title>
      <description>&lt;p&gt;You can also read this post online.&lt;/p&gt;

&lt;p&gt;First of all, I am sorry for taking almost a week to talk about what we’ve done at the first MeteorHacks show.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/AuWrZ193Ch.png&quot; alt=&quot;MeteorHacks Show&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Thank you very much for all the meteor lovers who joined with me at the webinar. We had 50+ attendees and it was fun.&lt;/p&gt;

&lt;p&gt;Unfortunately, the recorded video of the webinar is not in good quality. But, it’s a shame if I have not shared you what I have talked.  So, I have created four articles with annotated slides. Here are they:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://meteorhacks.com/fast-render-internals-and-how-it-works.html&quot;&gt;Fast Render Internals and How It Works&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://meteorhacks.com/integrating-iron-router-based-apps-with-fast-render.html&quot;&gt;Integrating Iron Router Based Apps with Fast Render&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://meteorhacks.com/how-to-test-fast-render-working-or-not.html&quot;&gt;How to Test whether Fast Render is Working or Not&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://meteorhacks.com/meteor-subscription-optimizations.html&quot;&gt;Subscription Optimizations &lt;em&gt;&lt;strong&gt;(Something special at the end)&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will try to make sure recorded video will be in good quality next time. If you have any suggestions on what I should next, please let me know.&lt;/p&gt;

&lt;p&gt;I am planning to share something awesome that we are building at MeteorHacks in the next episode, so stay tuned :)&lt;/p&gt;

&lt;p&gt;You can also read this post online.&lt;/p&gt;
</description>
      <link>http://localhost:4000/whats-happended-at-the-first-meteorhacks-show</link>
      <guid isPermaLink="true">http://localhost:4000/whats-happended-at-the-first-meteorhacks-show</guid>
      <pubDate>2014-01-29 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Meteor Subscription Optimization</title>
      <description>&lt;p&gt;This annotated presentation shows you how to optimize subscriptions while keeping your both users and servers happy at the same time.&lt;/p&gt;

&lt;p&gt;Subscriptions management is a common issue with Meteor and sometimes introduces weird issues. That’s why we need to take care of optimizing subscriptions. This guide will give you some tips on where you can optimize your subscriptions effectively.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/EQpEAZ7oaB.jpg&quot; alt=&quot;Subscriptions on the Server&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First we need to understand how subscriptions are handled on the server, which will help us to make good decisions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/agZPzf3NxG.jpg&quot; alt=&quot;Grouped by Query&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the above publication, a static query has been used. It doesn’t change with the arguments from the subscription, so it creates only one &lt;strong&gt;LiveResultSet&lt;/strong&gt;. Even if you had 20 subscriptions, there would be only one &lt;strong&gt;LiveResultSet&lt;/strong&gt;. This is an advantage because, when a polling takes place, there will be less overhead.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/yxd8LQDty0.jpg&quot; alt=&quot;Grouped by Query&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In contrast to the previous publication, this one creates a LiveResultSet for every subscription. So when the polling takes place, it will be much costlier, since we will have many LiveResults.&lt;/p&gt;

&lt;p&gt;Practically, it is not possible to avoid these kinds of scenarios all the time. That’s why oplog integration plays such a huge role: it doesn’t do polling and makes subscriptions lightweight in the server&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/U79xqDmKKw.jpg&quot; alt=&quot;Data is Cached for Each Session&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Meteor server keeps a copy of data (documents) available on each client. It allows Meteor to make better decisions when sending changes to the client. But it also increases the RAM usage, if your data set is large.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/xhfoFcwNMT.jpg&quot; alt=&quot;Deps.autorun and Subscriptions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, we need to understand how subscriptions behave in the client, especially inside a &lt;code class=&quot;highlighter-rouge&quot;&gt;Deps.autorun&lt;/code&gt; computation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/T0xFW7pQx9.jpg&quot; alt=&quot;After an Invalidation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the first invalidation round, slug is &lt;strong&gt;meteorhacks&lt;/strong&gt;. It adds two subscriptions to singlePost and postList.&lt;/p&gt;

&lt;p&gt;In the next invalidation, slug is &lt;strong&gt;oplog&lt;/strong&gt;. The computation removes the old subscription to &lt;strong&gt;singlePost&lt;/strong&gt;, with &lt;strong&gt;meteorhacks&lt;/strong&gt; as the argument. After that it adds a subscription to singlePost, with oplog as the argument. It does not change the existing subscription to &lt;strong&gt;postList&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This feature is one of the core concepts underlying Iron Router’s subscription model.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/Wm1Lgz7nnc.jpg&quot; alt=&quot;Relation with Iron Router&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Iron Router runs on a Single Computation. So when it switches between routes, all the subscriptions made from the previous route are removed, &lt;strong&gt;unless they are used in the current route&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/nHszCg13zG.jpg&quot; alt=&quot;Three Simple Optimization Rules&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here are three simple subscription optimization rules that will help you build better applications while keeping both users and servers happy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/iJGTtxKRRc.jpg&quot; alt=&quot;Send data only the page/client requires&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We should send only the data that a page or user requires. The page will load faster, and less overhead (in terms of memory usage) will be added to the server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/4KUbHwKgUC.jpg&quot; alt=&quot;Don't unsubscribe busy subscriptions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some subscriptions are meant to be used in multiple pages/routes of your app, so it is wise to keep them open. Otherwise there will be some bandwidth issues and users will have to wait while data gets loaded from the server again.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/FVacZRQdod.jpg&quot; alt=&quot;Break the rules as needed&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These are not hard and fast rules: break them whenever necessary.&lt;/p&gt;

&lt;h2 id=&quot;case-studies-atmosphere--telescope&quot;&gt;Case Studies (Atmosphere &amp;amp; Telescope)&lt;/h2&gt;

&lt;p&gt;This is a case study where I review Atmosphere and Telescope in terms of subscription usage.&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/nkWtsLjLtmc?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;1&quot;&gt;
&lt;/iframe&gt;

&lt;h2 id=&quot;sneak-peak-subscription-manager&quot;&gt;Sneak Peak: Subscription Manager&lt;/h2&gt;

&lt;p&gt;Subscription Manager is a simple package that allows you to avoid some of the subscription-related issues described in the case study above.&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/xzPg0-_TcXU?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;1&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;I hope these suggestions will be helpful as you build better quality Meteor applications.&lt;/p&gt;

</description>
      <link>http://localhost:4000/meteor-subscription-optimizations</link>
      <guid isPermaLink="true">http://localhost:4000/meteor-subscription-optimizations</guid>
      <pubDate>2014-01-28 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Integrating Iron Router Based Apps with Fast Render</title>
      <description>&lt;p&gt;This annotated presentation shows you how to integrate your existing Iron Router based Meteor app with Fast Render.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/8X9NUx0mvT.jpg&quot; alt=&quot;Routes on the Server&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fast Render runs your routes on the server. Specifically, it depends on the &lt;strong&gt;waitOn&lt;/strong&gt; function on the server side to know which subscriptions are used for the particular route.&lt;/p&gt;

&lt;p&gt;So you need to bring your route definitions to a location where they can be accessed by both the server and the client. You also need to guard any client-specific code with &lt;strong&gt;Meteor.isClient&lt;/strong&gt;, as shown above.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/iOOcOfPPyC.jpg&quot; alt=&quot;Extend with FastRender.RouteController&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you are extending &lt;strong&gt;RouteController&lt;/strong&gt;, extend it with FastRender. &lt;strong&gt;RouteController&lt;/strong&gt; as shown above. If you are not extending &lt;strong&gt;RouteController&lt;/strong&gt; and directly passing &lt;strong&gt;waitOn&lt;/strong&gt; function as a route option as shown below, use the fastRender:true option.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/Q8prGg7A7S.jpg&quot; alt=&quot;Use fastRender:true&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you are using &lt;strong&gt;this.subscribe(‘foo’).wait()&lt;/strong&gt; inside a before handler, Fast Render cannot understand them automatically, since before handlers contain a lot of client-side logics. So it is not a good option to run them inside the server.&lt;/p&gt;

&lt;p&gt;Therefore, you need to specify subscriptions manually, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/cHRnXaqNZ9.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FastRender.onAllRoutes&lt;/strong&gt; can be used if &lt;strong&gt;canView&lt;/strong&gt; is a global before handler. If it is a before handler for a specific route, use &lt;strong&gt;FastRender.route&lt;/strong&gt; as shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/YLG52kb6QY.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You might have to assign the return value of &lt;strong&gt;Meteor.subscribe&lt;/strong&gt; directly into the &lt;strong&gt;waitOn&lt;/strong&gt;. But in this case, Fast Render cannot detect the subscriptions, so the correct solution is to wrap the subscription with a function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/p3Hgtpt9EW.jpg&quot; alt=&quot;Use waitOn() with Functions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hope this article helps you to integrate your Meteor app with Fast Render correctly with less issues. If you have any questions, please add a comment: I’d happy to answer.&lt;/p&gt;
</description>
      <link>http://localhost:4000/integrating-iron-router-based-apps-with-fast-render</link>
      <guid isPermaLink="true">http://localhost:4000/integrating-iron-router-based-apps-with-fast-render</guid>
      <pubDate>2014-01-28 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>How to Test whether Fast Render is Working or Not</title>
      <description>&lt;p&gt;Once you’ve added Fast Render support, you might not be sure whether Fast Render is correctly applied or not. Normally it is very hard to detect it locally, since there is not much latency for connecting to the DDP server.&lt;/p&gt;

&lt;p&gt;Here is a simple way to check whether you are using Fast Render or not.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/DaBMkEnXdy.jpg&quot; alt=&quot;Non Existing DDP Endpoint&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Start your app by exporting &lt;code class=&quot;highlighter-rouge&quot;&gt;DDP_DEFAULT_CONNECTION_URL&lt;/code&gt; with something that does not exist. When you ask the Meteor client to connect to a DDP endpoint that does not exist, it will keep asking for the connection and never get any data from the DDP. It totally depends on FastRender to render the page.&lt;/p&gt;

&lt;p&gt;If you’ve followed the above instructions for your app (and not added Fast Render yet), it should look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/N8jVxk09tR.jpg&quot; alt=&quot;Without Fast Render&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you’ve added Fast Render support it should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/1MohsGbKOg.jpg&quot; alt=&quot;With Fast Render&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can verify that the Meteor client is still trying to connect to the DDP server we’ve provided with &lt;code class=&quot;highlighter-rouge&quot;&gt;DDP_DEFAULT_CONNECTION_URL&lt;/code&gt;.&lt;/p&gt;
</description>
      <link>http://localhost:4000/how-to-test-fast-render-working-or-not</link>
      <guid isPermaLink="true">http://localhost:4000/how-to-test-fast-render-working-or-not</guid>
      <pubDate>2014-01-28 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Fast Render Internals and How It Works</title>
      <description>&lt;p&gt;This annotated presentation shows you how Fast Render works and some of the hacks it does.&lt;/p&gt;

&lt;p&gt;First of all, let’s see how Meteor normally works.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/G7FJMkTwwh.jpg&quot; alt=&quot;How Meteor Normally Works&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Normally, Meteor client can’t show anything until it connects to the Meteor server via DDP and receives the data from the server. Depending on the Internet connectivity, this will be an issue, especially in mobile and Wi-Fi.&lt;/p&gt;

&lt;p&gt;Fast Render is a solution for this–see how it fixes this issue:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/6azak1msMh.jpg&quot; alt=&quot;With Fast Render&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fast Render sends the data required to render the initial page with the HTML, so the browser can render the page without the DDP connection. This provides the same experience as server-side rendering: the user can see the page immediately after HTML has been loaded.&lt;/p&gt;

&lt;p&gt;Here is the initial HTML page normally sent by Meteor:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/Mluhtxk16m.png&quot; alt=&quot;HTML Comes with Meteor&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is how it looks with Fast Render:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/buJq5psf8o.png&quot; alt=&quot;HTML Comes with Fast Render&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/fAMz3Md4Y4.jpg&quot; alt=&quot;Some Hacks I Did&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you have seen in the screen shots above, Fast Render sends data with the HTML, even though there is no such API available with Meteor to do that. Here is how Fast Render does it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/mOlVnB7Lfy.jpg&quot; alt=&quot;Injecting Data into HTML&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fast Render directly overrides the NodeJS HTTP module, as shown above, to inject the data into the HTML. It is the only possible way to do what Fast Render needs, and works very smoothly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/LQSRhPepzx.jpg&quot; alt=&quot;DDP Rewrite&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next hack I did is the DDP Rewrite, which takes place inside the Meteor client. Let’s see why we need it in the first place. The slide above shows how Meteor subscription works normally.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;ready&lt;/strong&gt; message is useful, since it triggers the Meteor client by saying that the initial data for the subscription has been sent. Now the client can render the page with all the data.&lt;/p&gt;

&lt;p&gt;Iron Router is a special case, because it looks for the &lt;strong&gt;ready&lt;/strong&gt; message before it renders the templates for the route. In this case, Fast Render has an issue, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/hLc33Pkpvx.jpg&quot; alt=&quot;DDP Rewrite&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With Fast Render, the browser has the data even before sending the subscription request. But Iron Router will not render the route since it didn’t get the ready message. The solution is to send a &lt;strong&gt;fake ready&lt;/strong&gt; message, as shown above. The code below shows how Fast Render implements this hack, again without the support of any Meteor API.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/myawcxa3fo.jpg&quot; alt=&quot;DDP Rewrite - Code&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are some other hacks involved in building Fast Render. You can learn more about them by looking at the source.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/GT9QuTTDGF.jpg&quot; alt=&quot;Security Concerns&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fast Render exposes some security issues that are not normally issues with Meteor. The following section describes what they are and how to prevent them. Some of the issues have been already fixed.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Our thanks goes to Emily Stark from the Meteor core team for raising these issues.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/ul8K98Qr78.jpg&quot; alt=&quot;LoginToken over Cookies&quot; /&gt;&lt;/p&gt;

&lt;p&gt;LoginToken is a simple token used to identify the user in the browser. It is identical to the Remember Me cookie used traditionally. Meteor uses localStorage for this purpose instead cookies.&lt;/p&gt;

&lt;p&gt;Since localStorage data is never sent to the server, Fast Render cannot identify the logged-in user. The only solution is to send the LoginToken over the cookies. This introduces the following issues:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/vmJyEAw6WN.jpg&quot; alt=&quot;Avoid Side Effects&quot; /&gt;
&lt;img src=&quot;https://i.cloudup.com/u98AnBuFRq.jpg&quot; alt=&quot;Avoid Side Effects&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If your publications trigger side effects  as shown above, they may have been triggered by directly calling to route. This can be done via an AJAX request called by a malicious web site. They can’t get the user’s subscription data, but they can trigger side effects. Directly sending an HTTP request can also trigger this.&lt;/p&gt;

&lt;p&gt;So it is recommended to avoid side effects, inside publications, Fast Render routes and IronRouter waitOn functions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/4RCoQWXz9B.jpg&quot; alt=&quot;CORS Issue&quot; /&gt;&lt;/p&gt;

&lt;p&gt;CORS is a specification that comes with HTML5; it allows cross-domain communication to work inside the browser. When your app or one of your packages adds CORS support, as shown above,  it is possible for malicious sites to extract the user’s subscription data by sending an XHR request.&lt;/p&gt;

&lt;p&gt;This is not something normally happens, but there is a possibility. In those situations, Fast Render detects it, and turns off Fast Render support for particular routes, &lt;em&gt;&lt;strong&gt;so there is nothing to worry about.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/sJGV6VtABg.jpg&quot; alt=&quot;Questions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This article has described how Fast Render actually works and some of its internal workings. If you have any questions, please add a comment: I’d happy to answer.&lt;/p&gt;

</description>
      <link>http://localhost:4000/fast-render-internals-and-how-it-works</link>
      <guid isPermaLink="true">http://localhost:4000/fast-render-internals-and-how-it-works</guid>
      <pubDate>2014-01-28 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Announcing The MeteorHacks Show</title>
      <description>&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/skwwktm2KyY?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;1&quot;&gt;
&lt;/iframe&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;The MeteorHacks Show&lt;/strong&gt;&lt;/em&gt; is a monthly webinar series where Arunoda Susiripala speaks about hacks and development at MeteorHacks and some of the meteor related tricks.&lt;/p&gt;

&lt;p&gt;First episode goes live on &lt;a href=&quot;http://www.worldtimebuddy.com/?qm=1&amp;amp;lid=8,30,1248991&amp;amp;h=8&amp;amp;date=2014-1-20&amp;amp;sln=9-10&quot;&gt;20th January @ 9.00 AM PST&lt;/a&gt;. Enter your email below to join with the webinar.&lt;/p&gt;
</description>
      <link>http://localhost:4000/announcing-the-meteorhacks-show</link>
      <guid isPermaLink="true">http://localhost:4000/announcing-the-meteorhacks-show</guid>
      <pubDate>2014-01-13 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Meteor Fast Render [docs]</title>
      <description>
</description>
      <link>http://localhost:4000/fast-render-docs</link>
      <guid isPermaLink="true">http://localhost:4000/fast-render-docs</guid>
      <pubDate>2014-01-10 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Introducing Fast Render</title>
      <description>&lt;p&gt;Meteor is supercool when it comes to productivity and building real-time web apps very quickly. But one of the common issues with Meteor is page load time: you have to wait until a WebSocket connection is made and data comes from the server. This is a crucial issue for many apps, especially forums, blogs and public-facing web apps.&lt;/p&gt;

&lt;p&gt;Server Side Rendering (SSR) is the solution for this issue.  It will render the initial page on the server, it works well with Search Engines, and it does not require PhantomJS  (which is how Meteor currently supports Search Engines). However, SSR is not expected to be comes with Meteor 1.0. (But you can expect it &lt;a href=&quot;https://trello.com/c/Lz07fBAm/7-server-side-rendering&quot;&gt;sometimes later&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;meet-fast-render&quot;&gt;Meet Fast Render&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://meteorhacks.com/fast-render&quot;&gt;Fast Render&lt;/a&gt; is not an SSR, but it is very similar and performs the same functionality very efficiently.&lt;/p&gt;

&lt;p&gt;What Fast Render does is pretty simple. It sends the data required to render your first page with the initial HTML loaded from Meteor, so the page is rendered just after the JavaScript is loaded to the client. No more waiting!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;However, Fast Render does not help much with SEO and does not change how Meteor deals with SEO.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;demo&quot;&gt;Demo&lt;/h2&gt;

&lt;p&gt;Let’s try a demo to see what Fast Render can do. I have added Fast Render support to Telescope so you can see the difference below.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://oridinary-telescope.meteor.com/&quot;&gt;Standard Telescope App&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://fast-render-telescope.meteor.com/&quot;&gt;Telescope with Fast Render&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information on the comparison, see the video below.&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;//www.youtube.com/embed/mGcE6UVOqPk?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;1&quot;&gt;
&lt;/iframe&gt;

&lt;h2 id=&quot;simple-integration&quot;&gt;Simple Integration&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://meteorhacks.com/fast-render&quot;&gt;Fast Render&lt;/a&gt; does all the hard work for you. All you have to do is specify which   data and subscriptions need to send to the client with the HTML. You can do that with a simple API. See the example below:&lt;/p&gt;

&lt;p&gt;First add Fast Render to your Meteor app&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;meteor add meteorhacks:fast-render

// for older Meteor versions (&amp;lt; 0.9) 
mrt add fast-render
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Fast Render has been deeply integrated with Iron Router. With just a few steps, you can power your existing Meteor App with Fast Render. Here’s all you have to do:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If you are extending from &lt;code class=&quot;highlighter-rouge&quot;&gt;RouteController&lt;/code&gt;, extend it from &lt;code class=&quot;highlighter-rouge&quot;&gt;FastRender.RouteController&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;If you are directly using routes, use &lt;code class=&quot;highlighter-rouge&quot;&gt;fastRender:true&lt;/code&gt; as shown &lt;a href=&quot;/fast-render/iron-router-support/#option_1_if_you_are_using_waiton&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Then bring your route definitions to a place that can be seen by both the client and the server.&lt;/li&gt;
  &lt;li&gt;Make sure, &lt;code class=&quot;highlighter-rouge&quot;&gt;waitOn()&lt;/code&gt; does not contains any client specific code. If you have such, guard them with &lt;code class=&quot;highlighter-rouge&quot;&gt;Meteor.isClient&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Fast Render supports more IronRouter &lt;a href=&quot;/fast-render/iron-router-support/&quot;&gt;integration methods&lt;/a&gt;, as well as the ability to integrate without IronRouter. Please refer to the &lt;a href=&quot;http://meteorhacks.com/fast-render&quot;&gt;documentation&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h2 id=&quot;try-it-out&quot;&gt;Try it Out&lt;/h2&gt;

&lt;p&gt;Don’t take my word for it. Try it out with your app: I bet you’ll love it. I’d also love to hear your thoughts about Fast Render and this is the first project comes with the new MeteorHacks.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Sign Up with &lt;a href=&quot;http://mad.ly/signups/98366/join&quot;&gt;this Newsletter&lt;/a&gt; to get FastRender specific &lt;a href=&quot;http://mad.ly/signups/98366/join&quot;&gt;updates&lt;/a&gt; once they’ve been released&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <link>http://localhost:4000/introducing-fast-render</link>
      <guid isPermaLink="true">http://localhost:4000/introducing-fast-render</guid>
      <pubDate>2014-01-09 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>MeteorHacks is Ready for 2014 with a Big Announcement</title>
      <description>&lt;p&gt;2013 was a great year for me. I had a lot of fun with Meteor and MeteorHacks. I hope you also enjoyed the articles and hacks behind MeteorHacks. A lot of people helped me with editing the articles and fixing bugs – &lt;strong&gt;thank you very much&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Actually, I was not a Meteor fan earlier, but one of my clients &lt;a href=&quot;http://www.linkedin.com/in/thomasmurphy&quot;&gt;Tom Murphy&lt;/a&gt; forced me to learn about Meteor and I should send him a letter of thanks. &lt;a href=&quot;https://www.discovermeteor.com/&quot;&gt;DiscoverMeteor&lt;/a&gt; was released on the very same day as I started learning Meteor; without it I would have given up studying Meteor. I would also like to thank all of you who have been reading, commenting on and trying out my hacks. Without an audience like you, I’m nothing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Finally, we all should thank Meteor for building such a great framework.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;My first Meteor hack was &lt;a href=&quot;http://meteorhacks.com/meteor-cluster-introduction-and-how-it-works.html&quot;&gt;meteor-cluster&lt;/a&gt;. It is a &lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt; based Meteor scaling solution: it was the only hope back then. Then I started MeteorHacks (the blog), giving a proper introduction to meteor-cluster and what it does behind the scenes. Since then I’ve been hacking Meteor like crazy.&lt;/p&gt;

&lt;h2 id=&quot;smart-collections&quot;&gt;Smart Collections&lt;/h2&gt;

&lt;p&gt;I was not happy with how Meteor dealt with MongoDB. After a little study I saw there were some places where it could be improved. That was the birth of &lt;a href=&quot;http://meteorhacks.com/introducing-smart-collections.html&quot;&gt;Smart Collections&lt;/a&gt; and the &lt;a href=&quot;http://meteorhacks.com/lets-scale-meteor.html&quot;&gt;Oplog integration&lt;/a&gt; into Meteor. Now its core concept is in the Meteor core. Together, we showed that Oplog integration is ideal for Meteor (Meteor had earlier planned to build a MongoDB proxy layer to scale Meteor, but the Oplog approach is much simpler and proven).&lt;/p&gt;

&lt;h2 id=&quot;its-time-now&quot;&gt;It’s Time Now&lt;/h2&gt;

&lt;p&gt;Meteor is working very hard to stabilize Meteor and make it ready for 1.0. That’s really nice and they are really good at it. I also hope they are cooking Galaxy and preparing it to blow our minds :)&lt;/p&gt;

&lt;p&gt;Also, I have the blueprints for many new ways to improve Meteor in my mind. These may be on Meteor’s roadmap or be completely crazy. I want to jump in and start working on them.&lt;/p&gt;

&lt;p&gt;Today, January 1 2014, MeteorHacks will be rebranded as the &lt;strong&gt;Unofficial Meteor Research Lab.&lt;/strong&gt; I’ll be working on core Meteor improvements with help from the community and &lt;a href=&quot;https://twitter.com/pahans&quot;&gt;Pahan&lt;/a&gt;. We’ve already started working on a few projects and I’ll be announcing them in upcoming weeks.&lt;/p&gt;

&lt;h2 id=&quot;so-what-do-you-think&quot;&gt;So, what do you think?&lt;/h2&gt;

&lt;p&gt;It is a very long journey, and I hope together we can improve Meteor and make it super awesome. I am always open to new options, and you have shown me many new paths. I really want to know how you feel about the new MeteorHacks.&lt;/p&gt;

</description>
      <link>http://localhost:4000/meteorhacks-is-ready-for-2014-with-a-big-announcement</link>
      <guid isPermaLink="true">http://localhost:4000/meteorhacks-is-ready-for-2014-with-a-big-announcement</guid>
      <pubDate>2014-01-01 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Improved Async Utilities in Meteor-NPM</title>
      <description>&lt;p&gt;Since its release a few months ago, &lt;a href=&quot;https://github.com/arunoda/meteor-npm&quot;&gt;meteor-npm&lt;/a&gt; has brought better integration of NPM packages into Meteor apps. The package shipped with a helper called &lt;code class=&quot;highlighter-rouge&quot;&gt;Meteor.sync&lt;/code&gt; which allowed developers to use callback-style async APIs with Meteor. This is demonstrated below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Meteor.methods({
  'wait': function getGists(user) {
    var message = Meteor.sync(function(done) {
      setTimeout(function() {
        done(null, 'Hello after 1000 milliseconds');
      }, 1000);
    });

    return message.result;
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Meteor.sync&lt;/code&gt; worked well, and was easy to understand.&lt;/p&gt;

&lt;h2 id=&quot;introducing-new-async-utilities&quot;&gt;Introducing New Async Utilities&lt;/h2&gt;

&lt;p&gt;Meteor-npm now comes with an improved set of helpers for async-style programming in Meteor. They’re called &lt;em&gt;Async Utilities&lt;/em&gt;, and they are grouped into a dedicated namespace &lt;code class=&quot;highlighter-rouge&quot;&gt;Async&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Async.runSync&lt;/code&gt; - same as &lt;code class=&quot;highlighter-rouge&quot;&gt;Meteor.sync&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Async.wrap(function)&lt;/code&gt; - wraps a single function which can be used inside Meteor, similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;Meteor._wrapAsync&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Async.wrap(object, methodName)&lt;/code&gt; - same as the above, but for an instance method of an object&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Async.wrap(object, methodNameList)&lt;/code&gt; - same as the above, but supports multiple instance methods&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;For more information, check out the &lt;a href=&quot;https://github.com/arunoda/meteor-npm#async-utilities&quot;&gt;Async Utilities&lt;/a&gt; docs on GitHub.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With this set of utilities, it’s now even easier to use NPM modules with Meteor.&lt;/p&gt;

&lt;h2 id=&quot;lets-try-a-demo&quot;&gt;Let’s Try a Demo&lt;/h2&gt;

&lt;p&gt;Witness the power of &lt;em&gt;&lt;strong&gt;Async Utilities&lt;/strong&gt;&lt;/em&gt; in the example below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var GithubApi = Meteor.require('github');
var github = new GithubApi({
    version: &quot;3.0.0&quot;
});

// Wrap `github.user.getFrom` and `github.user.getEmails`.
var wrappedGithubUser = Async.wrap(github.user, ['getFrom', 'getEmails']);

// Use inside Meteor.
Meteor.methods({
  getProfile: function(username) {
    return wrappedGithubUser.getFrom({user: username});
  },

  getEmails: function(username) {
    // This causes an error, since we haven't authenticated the API.
    // See how this wrapped function handles errors.
    return wrappedGithubUser.getEmails({user: username});
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;asyncwrap-handles-errors-better&quot;&gt;Async.wrap Handles Errors Better&lt;/h2&gt;

&lt;p&gt;One of the problems with &lt;code class=&quot;highlighter-rouge&quot;&gt;Meteor._wrapAsync&lt;/code&gt; is that it improperly handles errors. In the above example, if &lt;code class=&quot;highlighter-rouge&quot;&gt;Meteor._wrapAsync&lt;/code&gt; had been used to wrap the &lt;code class=&quot;highlighter-rouge&quot;&gt;getEmails&lt;/code&gt; method, the error would have been:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/GTaUeDBHPp.png&quot; alt=&quot;Error Report by `Meteor._wrapAsync`&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Async.wrap&lt;/code&gt; produces better error messages:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/03GbMmC1mp.png&quot; alt=&quot;Error Report by `Async.wrap`&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;updating-meteor-npm&quot;&gt;Updating Meteor-NPM&lt;/h2&gt;

&lt;h4 id=&quot;using-npm-on-atmosphere&quot;&gt;Using npm on Atmosphere&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;mrt update&lt;/code&gt; to get the new &lt;em&gt;Async Utilities&lt;/em&gt; API.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;using-meteor-npm-on-npm&quot;&gt;Using meteor-npm on NPM&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo npm update -g meteor-npm&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Run inside your project: &lt;code class=&quot;highlighter-rouge&quot;&gt;meteor-npm&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s all for now; go try out the new &lt;code class=&quot;highlighter-rouge&quot;&gt;Async.wrap&lt;/code&gt; and share your experience!&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;Edited by &lt;a href=&quot;https://twitter.com/jonjamz&quot;&gt;Jon James&lt;/a&gt; (Head of Technology at &lt;a href=&quot;http://writebot.com/&quot;&gt;Writebot&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <link>http://localhost:4000/improved-async-utilities-in-meteor-npm</link>
      <guid isPermaLink="true">http://localhost:4000/improved-async-utilities-in-meteor-npm</guid>
      <pubDate>2013-11-27 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Introducing Pro Meteor Guide</title>
      <description>
</description>
      <link>http://localhost:4000/introducing-pro-meteor-guide</link>
      <guid isPermaLink="true">http://localhost:4000/introducing-pro-meteor-guide</guid>
      <pubDate>2013-11-15 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>The Meteor Marketplace</title>
      <description>&lt;p&gt;Let’s have a look at &lt;a href=&quot;http://www.meteor.com/&quot;&gt;Meteor&lt;/a&gt; Marketplace. It’s a marketplace like Apple App Store, but for Meteor components. You can purchase components for your Meteor app with a seamless experience. You can even sell your own. Let’s see how this works&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Meteor Component is a pre built functionality for your meteor app. Meteor account system and the login window is a good example of it.&lt;/p&gt;

  &lt;p&gt;With upcoming Meteor 1.0, creating Meteor Components will be &lt;a href=&quot;http://www.youtube.com/watch?v=pGQ-ax5cFnk&quot;&gt;super simple&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;your-company-intranet&quot;&gt;Your Company Intranet&lt;/h2&gt;

&lt;p&gt;Let’s say, you are supposed to create an &lt;strong&gt;Intranet Portal&lt;/strong&gt; for your company. It needs to have&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A forum&lt;/li&gt;
  &lt;li&gt;A chat room&lt;/li&gt;
  &lt;li&gt;An admin user panel&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You have few options, either you can choose some existing product/service or you could build something on your own. With the first option, you are limited to the features of the product/service you are going to use. What you use can be hard to customize or such an endeavor can be too costly.&lt;/p&gt;

&lt;p&gt;If you choose to develop a solution yourself, it might take a considerable amount of time. That’s not good either.&lt;/p&gt;

&lt;p&gt;But if you choose Meteor to build your app, there is another way to get things done. With Meteor marketplace, you have the flexibility to build your portal, as you like while reusing components built by others.&lt;/p&gt;

&lt;h3 id=&quot;company-intranet-with-meteor&quot;&gt;Company Intranet with Meteor&lt;/h3&gt;

&lt;p&gt;First, lets create a Meteor App&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;meteor create intranet-portal
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you need to select some components for your app, like forum and chat room.&lt;/p&gt;

&lt;p&gt;So you visit &lt;a href=&quot;https://marketplace.meteor.com&quot;&gt;https://marketplace.meteor.com&lt;/a&gt; and select whatever components you need. Meteor Marketplace is a place for both &lt;strong&gt;free&lt;/strong&gt; and &lt;strong&gt;paid&lt;/strong&gt; components.&lt;/p&gt;

&lt;p&gt;Since you need to implement the intranet quickly, you might prefer using paid versions assuming they are well tested and in production quality.&lt;/p&gt;

&lt;p&gt;So let’s add your selected components to your app.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;meteor add smart-chat smart-forum smart-admin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will ask you to provide Credit Card Information, since this is the first time.&lt;/p&gt;

&lt;p&gt;Now you have 3 components. Let’s integrate these components into the Intranet. For an example, see how you can add the forum.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/arunoda/35ae201d307614a3791c.js&quot;&gt;
&lt;/script&gt;

&lt;p&gt;It’s that simple! You can do the same for other two components as well.&lt;/p&gt;

&lt;p&gt;Now you’ve a unique customized intranet for your company under 30 minutes.&lt;/p&gt;

&lt;h3 id=&quot;this-is-just-a-concept&quot;&gt;This is just a concept&lt;/h3&gt;

&lt;p&gt;There is already a package repository for Meteor. Meet &lt;a href=&quot;https://atmosphere.meteor.com&quot;&gt;Atmosphere&lt;/a&gt;. Every major language/framework, has its own package/addon repository. &lt;strong&gt;But none of these is a marketplace&lt;/strong&gt;. Meteor brings the concept of the marketplace into a package repository and with it brings pure awesomeness.&lt;/p&gt;

&lt;h3 id=&quot;how-is-this-possible-with-meteor&quot;&gt;How is this possible with Meteor?&lt;/h3&gt;

&lt;p&gt;Directly monetizing the &lt;a href=&quot;https://npmjs.org/&quot;&gt;NPM Registry&lt;/a&gt; or Python &lt;a href=&quot;https://pypi.python.org/pypi&quot;&gt;PyPi&lt;/a&gt; will not work as expected. That’s because most of the packages/modules are libraries and they just bring some valuable functionality to the framework/language.&lt;/p&gt;

&lt;p&gt;But Meteor’s use case is different. We can build components with both UI and the Backend. This provides a great value to the developer who uses meteor.&lt;/p&gt;

&lt;p&gt;The Meteor Marketplace is also different from the &lt;a href=&quot;http://wordpress.org/plugins/&quot;&gt;WordPress Plugin Directory&lt;/a&gt;. You can use Meteor Components wherever you want and you don’t need to follow any rules. It’s just a simple &lt;a href=&quot;http://handlebarsjs.com/&quot;&gt;handlebar&lt;/a&gt; helper. And the installation is pretty simple too. Just select a component and add it with a command. Then, it’s in your project.&lt;/p&gt;

&lt;h2 id=&quot;hope-we-could-see-this-in-future&quot;&gt;Hope we could see this in future&lt;/h2&gt;

&lt;p&gt;Although this is just a concept, everything we need to make this a reality is available right in front of us. All we need is to execute and glue them properly. Hope Meteor would consider this and make this into a reality pretty soon. May be with 1.5.&lt;/p&gt;

&lt;p&gt;So what do you think about this? &lt;a href=&quot;https://docs.google.com/forms/d/1mEGOmdNEaUEVLj0SrU-7EPjd0R609lhgg-ZMYNSyzqc/viewform&quot;&gt;Take this survey!&lt;/a&gt;&lt;br /&gt;
I promise, it won’t take 2 minutes.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Thank You, &lt;a href=&quot;https://twitter.com/alokag&quot;&gt;Aloka Gunasekara&lt;/a&gt; for editing the article.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <link>http://localhost:4000/the-meteor-marketplace</link>
      <guid isPermaLink="true">http://localhost:4000/the-meteor-marketplace</guid>
      <pubDate>2013-10-30 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>[Meteor Weekly] Meteor UI, NodeJS Security Fix, Packaged Apps and More</title>
      <description>
</description>
      <link>http://localhost:4000/meteor-weekly-oct-3rd-week</link>
      <guid isPermaLink="true">http://localhost:4000/meteor-weekly-oct-3rd-week</guid>
      <pubDate>2013-10-21 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Retiring SmartCollections</title>
      <description>&lt;p&gt;As Meteor 1.0 was &lt;a href=&quot;http://goo.gl/zVnSt7&quot;&gt;announced&lt;/a&gt;, Meteor revealed that they are releasing an oplog based Mongo driver with 1.0. You can see the developments on the &lt;a href=&quot;https://github.com/meteor/meteor/tree/oplog&quot;&gt;oplog branch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is really great and this is something I’ve wanted to see. With the upcoming Meteor 1.0 release, there is no reason for &lt;a href=&quot;http://meteorhacks.com/introducing-smart-collections.html&quot;&gt;SmartCollections&lt;/a&gt; to exist.&lt;/p&gt;

&lt;h2 id=&quot;retiring&quot;&gt;Retiring&lt;/h2&gt;
&lt;p&gt;After 1.0 arrives, I will retire SmartCollections. I assume Meteor core collection implementation will provide SmartCollections level of performance with all new 1.0 features.&lt;/p&gt;

&lt;p&gt;I will maintain SmartCollections until Meteor 1.0 is released and my top priority would be to fix bugs. But there won’t be any more feature implementations. (Like ObjectID support)&lt;/p&gt;

&lt;h2 id=&quot;migrations&quot;&gt;Migrations&lt;/h2&gt;

&lt;p&gt;Since SmartCollections is almost compatible with &lt;code class=&quot;highlighter-rouge&quot;&gt;Meteor.Collection&lt;/code&gt; you don’t require any code change except for collection name revert back to &lt;code class=&quot;highlighter-rouge&quot;&gt;Meteor.Collection&lt;/code&gt;. However, the way how you expose &lt;code class=&quot;highlighter-rouge&quot;&gt;OPLOG_URL&lt;/code&gt; to the app might get changed.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s Next&lt;/h2&gt;

&lt;p&gt;This is not the end of the road. There are more places where we can improve Meteor a lot.&lt;/p&gt;

&lt;p&gt;So after Meteor 1.0 release, I will start optimizing DDP to support nested objects and arrays, which are not yet supported and there are no plans for supporting those.&lt;/p&gt;

&lt;p&gt;This DDP upgrade is really important. See how it works now.&lt;/p&gt;

&lt;p&gt;If you have an array inside a document, and if you did some change to the array, the whole array is sent back to the client. This is the same with nested objects. So fixing the issue will allow us to build very efficient Meteor applications with mongoDB.&lt;/p&gt;

&lt;h2 id=&quot;thank-you&quot;&gt;Thank You&lt;/h2&gt;

&lt;p&gt;I suppose SmartCollections energized Meteor core team to implement oplog support for 1.0. Earlier they had plans to add a Mongo proxy layer to support scaling. But all of us together showed that oplog enabled solution is a much better and a simple solution.&lt;/p&gt;

&lt;p&gt;Thank you all for supporting and using SmartCollections. Hope I could release SmartCollections2 early next year.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Thank You, &lt;a href=&quot;https://twitter.com/alokag&quot;&gt;Aloka Gunasekara&lt;/a&gt; for editing the article.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <link>http://localhost:4000/retiring-smart-collections</link>
      <guid isPermaLink="true">http://localhost:4000/retiring-smart-collections</guid>
      <pubDate>2013-10-08 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Debugging Meteor Packages and Apps</title>
      <description>&lt;p&gt;This time, I decided to discuss some of the experiences of debugging &lt;a href=&quot;http://meteorhacks.com/introducing-smart-collections.html&quot;&gt;SmartCollections&lt;/a&gt;. Although this is about debugging a meteor package, I believe the same can be applied to meteor apps as well.&lt;/p&gt;

&lt;p&gt;Normally, I don’t have access to the system(s) where the app is running since most of the issues are reported by SmartCollections users.  Sometimes these issues are very hard to reproduce. Here are the tools and the procedures I use to fix those issue.&lt;/p&gt;

&lt;h2 id=&quot;debug-logs&quot;&gt;Debug Logs&lt;/h2&gt;

&lt;p&gt;Logs are really important to find issue. With logs, I can see what is really going on. At a very early stage of SmartCollections, it didn’t have logs at all. But when the adoption of SmartCollections began to rise, people started submitting issues. At first I was clueless since there were no logs. Then I decided to add them.&lt;/p&gt;

&lt;p&gt;First, I looked how Meteor does this internally. Unfortunately, I couldn’t find something useful. So I started to list requirements.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It needs to be an integral part of SmartCollections&lt;/li&gt;
  &lt;li&gt;It should be turned off by default and should be possible to turn on without a code change&lt;/li&gt;
  &lt;li&gt;It needs to have namespaces&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Fortunately, there is an NPM module called &lt;a href=&quot;https://github.com/visionmedia/debug&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;debug&lt;/code&gt;&lt;/a&gt; which addresses all my requirements. Additionally, it is &lt;a href=&quot;https://npmjs.org/browse/depended/debug&quot;&gt;widely used&lt;/a&gt; and substantially matured.&lt;/p&gt;

&lt;h3 id=&quot;using-debug&quot;&gt;Using debug&lt;/h3&gt;

&lt;p&gt;Using debug is very straightforward. First we need to add it to our package or app. You can use my NPM package to load &lt;code class=&quot;highlighter-rouge&quot;&gt;debug&lt;/code&gt; into your meteor app.&lt;/p&gt;

&lt;p&gt;Then you can create a logger. Each logger has a namespace and the namespace will be used to show your logs at runtime. See below for some example.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//create logger. 
var debug = Npm.require('debug')('sc:coll:sample-collection');

//add a log
debug('insert document: %j', doc);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While at runtime, it does not show any logs at all. We need to turn it on explicitly via an environment variable. See how I could turn on debug logs to show above.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DEBUG=sc:coll:* meteor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;debug&lt;/code&gt; supports wildcard filtering, multiple patterns and has many other useful &lt;a href=&quot;https://github.com/visionmedia/debug#millisecond-diff&quot;&gt;features&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now you can see a set of debug logs as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/fiiE9pA.png&quot; alt=&quot;Debugging Meteor App and Packages&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ddp-logs&quot;&gt;DDP Logs&lt;/h2&gt;

&lt;p&gt;Sometimes, I need to figure out what are the actions applied by users exactly. In my case, I also needed to know what is exactly flowing over the wire and which order they are flowing.&lt;/p&gt;

&lt;p&gt;Solution is to log DDP messages. We’ve a very good tool for that and I’ve introduced it a few weeks back. See &lt;a href=&quot;http://meteorhacks.com/discover-meteor-ddp-in-realtime.html&quot;&gt;DDP Analyzer&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;node-inspector&quot;&gt;Node-Inspector&lt;/h2&gt;

&lt;p&gt;Once I got the Debug logs and DDP logs, it is very easy to isolate the issue. After the isolation, I will try to reproduce it locally.&lt;/p&gt;

&lt;p&gt;Once reproduced, we can use &lt;a href=&quot;https://github.com/node-inspector/node-inspector&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;node-inspector&lt;/code&gt;&lt;/a&gt; to see what is really happening inside. &lt;code class=&quot;highlighter-rouge&quot;&gt;node-inspector&lt;/code&gt; has been re-touched recently and now it is much stable and feature rich.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/oortcloud/unofficial-meteor-faq#how-do-i-debug-my-meteor-app&quot;&gt;See how you can use node-inspector with Meteor&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;happy-debugging&quot;&gt;Happy Debugging&lt;/h2&gt;

&lt;p&gt;I hope these tools and the process will help you to debug your app or package. If I have missed something or you have a better way to do any of this, let us know about it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Thank You, &lt;a href=&quot;https://twitter.com/alokag&quot;&gt;Aloka Gunasekara&lt;/a&gt; for editing the article.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <link>http://localhost:4000/debugging-meteor-packages-and-apps</link>
      <guid isPermaLink="true">http://localhost:4000/debugging-meteor-packages-and-apps</guid>
      <pubDate>2013-10-02 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Introducing Portable Meteor User</title>
      <description>&lt;p&gt;You might have got bored with my articles over the last couple of weeks as almost all of them have been related to performance and scaling. So this time I decided to show you something cool and useful.&lt;/p&gt;

&lt;h2 id=&quot;its-a-portable-user&quot;&gt;It’s a portable user&lt;/h2&gt;

&lt;p&gt;I’m really not sure whether “portable” is the right term to use here. However, I’ll show you an easy way to transfer login states across browsers without re-entering username/password combinations. You don’t required to use any additional tool or code modifications.&lt;/p&gt;

&lt;p&gt;Watch the demo first!&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/Xgr6oplj6fY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt;
&lt;/iframe&gt;

&lt;h2 id=&quot;creating-a-portable-version-of-you&quot;&gt;Creating a portable version of you&lt;/h2&gt;

&lt;p&gt;I’ll show you how easy it is. You need a browser with a JavaScript Console (I prefer Google Chrome). Visit any Meteor web app, login as a legitimate user, and paste the following code to the console.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/arunoda/b76491339c9d994e4d71.js&quot;&gt;
&lt;/script&gt;

&lt;p&gt;You will then receive an alert with a code. Copy that code, it is the portable version of you :)&lt;/p&gt;

&lt;p&gt;This code can be passed on to other users via chat, email, or even SMS. Once they receive the code, they can use it to login to the meteor app as you.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/gI9CbEO.png&quot; alt=&quot;Protable Meteor User&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-use-a-portable-meteor-user&quot;&gt;How to use a portable meteor user&lt;/h2&gt;

&lt;p&gt;Very simple :) Visit the related meteor app using Google Chrome, and execute the code you generated in the browser console. Wait a few seconds and … Voila! You are now successfully logged in as the user who created the “code”.&lt;/p&gt;

&lt;h2 id=&quot;how-useful-is-this&quot;&gt;How useful is this&lt;/h2&gt;

&lt;p&gt;It depends.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can use a portable user to test your app between browsers&lt;/li&gt;
  &lt;li&gt;You can use it as a debug tool&lt;/li&gt;
  &lt;li&gt;You can allow your friends to use your account on your behalf (without sharing passwords)&lt;/li&gt;
  &lt;li&gt;You can even steal someone’s identity very easily.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;whats-happening-behind-the-scenes&quot;&gt;What’s happening behind the scenes&lt;/h2&gt;

&lt;p&gt;There is no magic here. Let’s discuss what’s going on.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Meteor uses a token to remember the user’s login state&lt;/li&gt;
  &lt;li&gt;It is identical to the “Remember Me” Cookie in traditional web apps&lt;/li&gt;
  &lt;li&gt;But Meteor uses LocalStorage instead of Cookies&lt;/li&gt;
  &lt;li&gt;This hack simply picks “loginToken” and the “userId” from localStorage&lt;/li&gt;
  &lt;li&gt;Then it creates a valid JS code which sets the above into localStorage again (That’s the portable user)&lt;/li&gt;
  &lt;li&gt;Once you paste the above JS code to the browser, Meteor detects the change and performs the login process against the token&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;is-this-bad&quot;&gt;Is this bad?&lt;/h2&gt;

&lt;p&gt;I’m not a web security specialist, so I’m not sure. But you need to focus very carefully on the points below.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make sure each and every external JS you are using in your app can be trusted&lt;/li&gt;
  &lt;li&gt;Make sure your users can’t inject JS to your app (prevent XSS)&lt;/li&gt;
  &lt;li&gt;Educate users to be aware of “Bookmarklets” and “Browser Extensions” if you can&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s it for today. I would really like to know your opinion on this.&lt;/p&gt;
</description>
      <link>http://localhost:4000/introducing-portable-meteor-user</link>
      <guid isPermaLink="true">http://localhost:4000/introducing-portable-meteor-user</guid>
      <pubDate>2013-09-19 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Ever Improving Smart Collections</title>
      <description>&lt;p&gt;About two months back, I released &lt;a href=&quot;http://meteorhacks.com/introducing-smart-collections.html&quot;&gt;Smart Collections&lt;/a&gt; with a completely redesigned Mongo driver for Meteor with performance and scalability in mind.&lt;/p&gt;

&lt;p&gt;Last month, &lt;a href=&quot;https://twitter.com/glasser&quot;&gt;David Glasser&lt;/a&gt; from Meteor Core &lt;a href=&quot;https://groups.google.com/d/msg/meteor-talk/h-ulU7guh1Y/nTfJ1F8uGxwJ&quot;&gt;reviewed&lt;/a&gt; Smart Collections and pointed out some of the major differentiations between Smart Collections and the original Meteor implementation.&lt;/p&gt;

&lt;p&gt;Since then, I worked hard to fill those gaps and make Smart Collections compatible with the original implementation while keeping its smartness. In the following section I will show you some of the major changes I have implemented last month.&lt;/p&gt;

&lt;h2 id=&quot;limit-and-sort-support&quot;&gt;Limit and Sort Support&lt;/h2&gt;

&lt;p&gt;First few releases of Smart Collections did not come with a proper support for limit and sort. I had to change some of the internals to get this done. Latest Smart Collections release does support for limit and sort.&lt;/p&gt;

&lt;h2 id=&quot;multiple-observers-for-cursor&quot;&gt;Multiple Observers for Cursor&lt;/h2&gt;

&lt;p&gt;Earlier you can could only add a single observer to a cursor. This is okay for most apps but it’s better if we could add many. With the latest release you can add as many observers as you need.&lt;/p&gt;

&lt;h2 id=&quot;bind-environment-support&quot;&gt;Bind Environment Support&lt;/h2&gt;

&lt;p&gt;SC did not follow &lt;a href=&quot;https://www.eventedmind.com/posts/meteor-what-is-meteor-bindenvironment&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Meteor.BindEnvironment()&lt;/code&gt;&lt;/a&gt; to run code inside a fiber. Latest release uses it.&lt;/p&gt;

&lt;h2 id=&quot;caching-support&quot;&gt;Caching Support&lt;/h2&gt;
&lt;p&gt;One of the first concerns of Smart Collections is being not required to cache documents at all. 
But with the additional feature support and Meteor collection compatibility, caching has become a must-have. If caching is not exist, some additional tasks have to be performed and these tasks are so costly for both Mongo and Meteor.&lt;/p&gt;

&lt;p&gt;Latest version of SmartCollection does cache on a “per query” basis and normally it does not increase the memory usage level rapidly.&lt;/p&gt;

&lt;h2 id=&quot;latency-compensation-support&quot;&gt;Latency Compensation Support&lt;/h2&gt;

&lt;p&gt;One of the major concerns for David was the lack of latency compensation support in Smart Collections. In reality, implementing proper latency compensation support with Smart Collections is difficult because I have to consider situations where &lt;a href=&quot;http://meteorhacks.com/lets-scale-meteor.html&quot;&gt;oplog&lt;/a&gt; is enabled.&lt;/p&gt;

&lt;p&gt;I have implemented partial latency compensation support. It does not support update and remove with selectors. I have not fully tested this yet; So I have not merged it into master. Please checkout &lt;a href=&quot;http://goo.gl/uatllo&quot;&gt;writefence-support&lt;/a&gt; branch and let me know how it works.&lt;/p&gt;

&lt;h2 id=&quot;observe-support&quot;&gt;Observe support&lt;/h2&gt;
&lt;p&gt;With the recent decision to allow caching, now it is possible to add support for server side &lt;code class=&quot;highlighter-rouge&quot;&gt;.observe().&lt;/code&gt; I haven’t implemented this yet but will do it soon.&lt;/p&gt;

&lt;h2 id=&quot;things-still-we-are-missing&quot;&gt;Things still we are missing&lt;/h2&gt;

&lt;p&gt;Smart Collections does its performance magic with the use of query matcher provided by MiniMongo. It has implemented most of the mongo features, but not all. For an example it does not support geo partial queries. For such scenarios Smart Collections is not a choice.&lt;/p&gt;

&lt;p&gt;Smart Collections still don’t support ObjectID. I &lt;a href=&quot;http://goo.gl/9ZFVWP&quot;&gt;started working&lt;/a&gt; on it sometime back, but with the recent changes I might have to start again.&lt;/p&gt;

&lt;p&gt;Smart Collections also don’t support for optional &lt;code class=&quot;highlighter-rouge&quot;&gt;connection&lt;/code&gt; parameter to use with another Mongo connection. It can be implemented without much effort though.&lt;/p&gt;

&lt;p&gt;Smart Collections also don’t support Skip. Skip is a &lt;a href=&quot;http://stackoverflow.com/a/7228190/457224&quot;&gt;very costly&lt;/a&gt; operation in Mongo. So it’s generally wise to ignore it. I haven’t planned yet to implement this.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next&lt;/h2&gt;

&lt;p&gt;My focus for this month is to make Smart Collections compatible with the existing Meteor implementation as much as possible.&lt;/p&gt;

&lt;p&gt;Although Smart Collections provide a ton of performance improvements, I need to see what else is possible for us to make it even better.&lt;/p&gt;

&lt;p&gt;In the future, I have some plans to add better support for nested objects and arrays. It might involves changes to DDP too. But not so soon :-)&lt;/p&gt;

&lt;h2 id=&quot;thank-you-all&quot;&gt;Thank You All&lt;/h2&gt;

&lt;p&gt;Smart Collections won’t be at this stage without you all. I would like to thank everyone who helped me in numerous ways. Let me know what else you need! That motivates me.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Thank You, &lt;a href=&quot;https://twitter.com/alokag&quot;&gt;Aloka Gunasekara&lt;/a&gt; for editing the article.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <link>http://localhost:4000/ever-improving-smart-collections</link>
      <guid isPermaLink="true">http://localhost:4000/ever-improving-smart-collections</guid>
      <pubDate>2013-09-10 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Discover Meteor DDP in Realtime</title>
      <description>&lt;p&gt;Today I will show you a tool that helps me immensely to understand Meteor internals and &lt;a href=&quot;http://meteorhacks.com/introduction-to-ddp.html&quot;&gt;DDP&lt;/a&gt;. 
DDP is the &lt;a href=&quot;http://goo.gl/4N7HrM&quot;&gt;protocol&lt;/a&gt; Meteor uses to communicate between client and the sever. It’s a very simple and tiny protocol (&lt;a href=&quot;http://meteorhacks.com/introduction-to-ddp.html&quot;&gt;learn DDP&lt;/a&gt;). But it’s somewhat tough to look at DDP messages being generated while you’re using your app.&lt;/p&gt;

&lt;h2 id=&quot;meet-ddp-analyzer&quot;&gt;Meet DDP Analyzer&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/arunoda/meteor-ddp-analyzer&quot;&gt;Meteor DDP analyzer&lt;/a&gt; comes with a DDP proxy which proxies your app’s DDP requests and dump them into the console. 
With DDP analyzer, you can see DDP messages that are being generated, when you are using your app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/IsUVXUOspa.png&quot; alt=&quot;Meteor DDP Analyzer in Action&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;how-to-use-the-ddp-analyzer&quot;&gt;how to use the DDP analyzer&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;install it from npm - &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo npm install -g ddp-analyzer&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;start the proxy - &lt;code class=&quot;highlighter-rouge&quot;&gt;ddp-analyzer-proxy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Then start your meteor app as shown below&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;apply these commands in the console.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export DDP_DEFAULT_CONNECTION_URL=http://localhost:3030
meteor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;DDP Analyzer is OpenSouced(as usual) and hosted on &lt;a href=&quot;https://github.com/arunoda/meteor-ddp-analyzer&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;iframe src=&quot;http://ghbtns.com/github-btn.html?user=arunoda&amp;amp;repo=meteor-ddp-analyzer&amp;amp;type=watch&amp;amp;count=true&amp;amp;size=small&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; scrolling=&quot;0&quot; width=&quot;80px&quot; height=&quot;25px&quot;&gt;
&lt;/iframe&gt;
&lt;iframe src=&quot;http://ghbtns.com/github-btn.html?user=arunoda&amp;amp;repo=meteor-ddp-analyzer&amp;amp;type=fork&amp;amp;count=true&amp;amp;size=small&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; scrolling=&quot;0&quot; width=&quot;152px&quot; height=&quot;25px&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;This is a debugging and learning tool. You get the best results when used with a single client. Please don’t ever try to use this in production :-)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;watch-how-i-analyze-telescope-meteor-app&quot;&gt;Watch how I analyze telescope meteor app&lt;/h2&gt;

&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/K7wvsy4UNZ8&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt;
&lt;/iframe&gt;

&lt;h2 id=&quot;why-i-built-this&quot;&gt;Why I built this?&lt;/h2&gt;
&lt;p&gt;When I started to work with &lt;a href=&quot;http://meteorhacks.com/introducing-smart-collections.html&quot;&gt;SmartCollections&lt;/a&gt;, I needed to learn more about the Meteor internals. I also needed to debug apps for which I don’t have access directly.&lt;/p&gt;

&lt;p&gt;I searched for ddp tools. There are some. But none of these tools could be used in conjunction with a real app. So I built the DDP analyser.&lt;/p&gt;

&lt;p&gt;What’s good about DDP analyzer is I can see what exactly is going on, even if I don’t have access to the app.&lt;/p&gt;

&lt;h2 id=&quot;how-does-this-work&quot;&gt;How does this work?&lt;/h2&gt;

&lt;p&gt;As usual, let me tell you what exactly is happening behind the scene.&lt;/p&gt;

&lt;p&gt;In Meteor, there are two kinds of servers.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Static HTTP server which serves HTML, js, CSS and other static content.&lt;/li&gt;
  &lt;li&gt;DDP server which runs the logic of your app.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It is possible to use two different servers for a single app. That’s what exactly I’m doing here.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can run your Meteor app as usual while running both types of servers.&lt;/li&gt;
  &lt;li&gt;But with &lt;code class=&quot;highlighter-rouge&quot;&gt;DDP_DEFAULT_CONNECTION_URL&lt;/code&gt; environment variable, I ask Meteor client to connect to a different DDP server.&lt;/li&gt;
  &lt;li&gt;That DDP server is a proxy which proxies requests to your existing DDP server.&lt;/li&gt;
  &lt;li&gt;The proxy logs DDP messages to the console.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think it is a really good idea to look at what’s happening on the wire related to your app. With that, you’ll get a chance to learn how Meteor works and optimize your app for it.&lt;/p&gt;

&lt;p&gt;Hope you like this. Let me know your suggestions. That encourage me to hack more :-)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Thank You, &lt;a href=&quot;https://twitter.com/alokag&quot;&gt;Aloka Gunasekara&lt;/a&gt; for editing the article.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <link>http://localhost:4000/discover-meteor-ddp-in-realtime</link>
      <guid isPermaLink="true">http://localhost:4000/discover-meteor-ddp-in-realtime</guid>
      <pubDate>2013-08-26 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>NPM Meteor Integration is Back for Meteor 0.6.5</title>
      <description>&lt;p&gt;A few months ago, I introduced a &lt;a href=&quot;http://meteorhacks.com/complete-npm-integration-for-meteor.html&quot;&gt;small hack&lt;/a&gt; which allows you to use any NPM module with your Meteor app. It’s distributed as a &lt;a href=&quot;https://atmosphere.meteor.com/package/npm&quot;&gt;smart-package&lt;/a&gt; via Atmosphere.&lt;/p&gt;

&lt;p&gt;Unfortunately, if you’ve upgraded your app to meteor 0.6.5, you might have noticed that &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; smart-package does not work anymore. Let me explain why it doesn’t work, in a few minutes.&lt;/p&gt;

&lt;p&gt;Fortunately, I tricked Meteor again and here comes the &lt;code class=&quot;highlighter-rouge&quot;&gt;meteor-npm&lt;/code&gt; version &lt;a href=&quot;https://github.com/arunoda/meteor-npm&quot;&gt;0.2.0&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Just update your project with &lt;code class=&quot;highlighter-rouge&quot;&gt;mrt update&lt;/code&gt; and things should work, as it was earlier.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;now-things-have-gotten-even-better&quot;&gt;Now, things have gotten even better!&lt;/h2&gt;

&lt;p&gt;If you are working with multiple Meteor apps and use this NPM integration, you might have seen that when switching projects, Meteor will re-install all the NPM modules. That’s a bit of a headache.&lt;/p&gt;

&lt;p&gt;If you are not a fan of &lt;code class=&quot;highlighter-rouge&quot;&gt;meteorite&lt;/code&gt;(I really don’t know why!) you couldn’t have used this hack too.&lt;/p&gt;

&lt;p&gt;Because of these reasons, I’ve worked on a new distribution channel via &lt;code class=&quot;highlighter-rouge&quot;&gt;NPM&lt;/code&gt;, which fixes the above issues.&lt;/p&gt;

&lt;p&gt;Let’s see how to use it.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First you need to remove &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; smart-package if you’ve used it&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mrt remove npm&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Install this tool via npm (you’ve to do this once)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo npm install -g meteor-npm&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Then run &lt;code class=&quot;highlighter-rouge&quot;&gt;meteor-npm&lt;/code&gt; tool inside your project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s it :)&lt;/p&gt;

&lt;p&gt;Now you can declare NPM modules in &lt;code class=&quot;highlighter-rouge&quot;&gt;packages.json&lt;/code&gt; as you did previously. This works with &lt;code class=&quot;highlighter-rouge&quot;&gt;meteor run&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;meteor deploy&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;meteor bundle&lt;/code&gt; too. Should work with &lt;code class=&quot;highlighter-rouge&quot;&gt;demeteorizer&lt;/code&gt; as well.&lt;/p&gt;

&lt;p&gt;Server side API is also the same.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You need to add &lt;code class=&quot;highlighter-rouge&quot;&gt;packages/npm&lt;/code&gt; to the version control, otherwise you’ve do the above process again after a checkout and re-declare modules in &lt;code class=&quot;highlighter-rouge&quot;&gt;packages.json&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;why-npm-failed-with-065&quot;&gt;Why NPM failed with 0.6.5&lt;/h2&gt;

&lt;p&gt;This is how older &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; smart-package worked.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When the package loads, it looks for &lt;code class=&quot;highlighter-rouge&quot;&gt;packages.json&lt;/code&gt; in your project root and load all the NPM modules declared.&lt;/li&gt;
  &lt;li&gt;So, if you’ve made any changes to &lt;code class=&quot;highlighter-rouge&quot;&gt;packages.json&lt;/code&gt;(or any other file), all the packages get reloaded(including &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Then your, newly re-declared NPM modules will get loaded&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But in 0.6.5, Meteor got lot better. It only reloads a package if any file (tracked with &lt;code class=&quot;highlighter-rouge&quot;&gt;api.add_files&lt;/code&gt;) in the package gets changed.&lt;/p&gt;

&lt;p&gt;Since &lt;code class=&quot;highlighter-rouge&quot;&gt;./packages.json&lt;/code&gt; is not a part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; package, it doesn’t get reloaded. Hence, newly declared NPM modules will not be loaded.&lt;/p&gt;

&lt;h2 id=&quot;the-fix&quot;&gt;The Fix&lt;/h2&gt;

&lt;p&gt;This &lt;a href=&quot;https://github.com/arunoda/meteor-npm/blob/master/package.js#L25&quot;&gt;single line&lt;/a&gt; fixes the issue. :)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;api.add_files(['index.js', '../../packages.json'], 'server');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I had to do few other changes to get this works perfectly across all the meteor versions. &lt;a href=&quot;https://github.com/arunoda/meteor-npm/blob/master/package.js&quot;&gt;See how I did them&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hope you guys love this fix. And you can upgrade to 0.6.5 today :)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Thank You, &lt;a href=&quot;https://twitter.com/alokag&quot;&gt;Aloka Gunasekara&lt;/a&gt; for editing the article.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <link>http://localhost:4000/npm-meteor-integration-is-back</link>
      <guid isPermaLink="true">http://localhost:4000/npm-meteor-integration-is-back</guid>
      <pubDate>2013-08-19 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>How Meteor Uses NodeJS</title>
      <description>&lt;p&gt;Everybody knows Meteor uses NodeJS behind the scene. But does it use NodeJS version in your PATH?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hmmm…. No!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Meteor is ultra portable and the developer does not need to know about NodeJS at all. So when you are installing Meteor, it will download something called &lt;code class=&quot;highlighter-rouge&quot;&gt;dev_bundle&lt;/code&gt; which has NodeJS and all the NPM modules needed by Meteor. All these modules are pre-compiled for your platform. That makes getting started with Meteor easier and quicker.&lt;/p&gt;

&lt;h2 id=&quot;is-there-any-problem-with-this-approach&quot;&gt;Is there any problem with this approach?&lt;/h2&gt;

&lt;p&gt;No. This is perfect. But problems arise when you are bundling an app and try to run it somewhere else or even on the same machine.&lt;/p&gt;

&lt;p&gt;If you’ve used any binary NPM module such as &lt;code class=&quot;highlighter-rouge&quot;&gt;nodetime&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;usage&lt;/code&gt;, you might need to re-install those modules again. This is obviously not very good.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What’s more, you may also need to re-install &lt;code class=&quot;highlighter-rouge&quot;&gt;fibers&lt;/code&gt; as well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You might also come across some errors not detected on the dev machine. The reason is the node version Meteor uses and the version in your PATH is not the same.&lt;/p&gt;

&lt;h2 id=&quot;so-whats-the-solution&quot;&gt;So what’s the solution?&lt;/h2&gt;

&lt;p&gt;Follow these steps.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Bundle your app, inside the machine (or server) where you need to run your app.&lt;/li&gt;
  &lt;li&gt;Use the node binary, used by Meteor&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Doing that, we can avoid re-installing binary NPM modules  after the bundling process. We will be using the same node version used by Meteor and as a result, we can expect the same behavior as if it was running on the dev machine.&lt;/p&gt;

&lt;p&gt;Step #1 seems OK. But how about #2? How do I find the node version used by Meteor?&lt;/p&gt;

&lt;p&gt;I’ve 2 answers: One short and one long. Let’s start with the short one. Life’s too short for long answers.&lt;/p&gt;

&lt;h2 id=&quot;finding-nodejs-binary-with-mnode&quot;&gt;Finding NodeJS binary with mnode&lt;/h2&gt;

&lt;p&gt;So I’ve created a simple tool called &lt;a href=&quot;https://github.com/arunoda/mnode&quot;&gt;mnode&lt;/a&gt;, which shows you the path to the NodeJS binary used by Meteor. Let’s install it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo npm install -g mnode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Go to your project&lt;/li&gt;
  &lt;li&gt;Run your project once and close it (You need to do this only once)&lt;/li&gt;
  &lt;li&gt;Simply run &lt;code class=&quot;highlighter-rouge&quot;&gt;mnode&lt;/code&gt; and you can get the full path of the NodeJS binary&lt;/li&gt;
  &lt;li&gt;You can run the node binary like this too - &lt;code class=&quot;highlighter-rouge&quot;&gt;$(mnode)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This project is on github and it is quite small. &lt;a href=&quot;https://github.com/arunoda/mnode/blob/master/index.js&quot;&gt;Read it&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you need to some help on deploying or scaling your app, &lt;a href=&quot;mailto:arunoda.susiripala@gmail.com&quot;&gt;Talk to me&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;long-answer---do-it-yourself&quot;&gt;Long Answer - Do It Yourself&lt;/h2&gt;

&lt;p&gt;Alright, you want know how to do it yourself. Let me guide you.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;If your app is using a custom git checkout with meteorite, you can’t apply this solution to it. Read the &lt;a href=&quot;https://github.com/arunoda/mnode/blob/master/index.js&quot;&gt;source&lt;/a&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;mnode&lt;/code&gt; and see what’s happening there.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;You need to get the Meteor version you are using&lt;/li&gt;
  &lt;li&gt;It’s stored at &lt;code class=&quot;highlighter-rouge&quot;&gt;./.meteor/release&lt;/code&gt;, let’s call it  as &lt;code class=&quot;highlighter-rouge&quot;&gt;RELEASE&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Now open this file - &lt;code class=&quot;highlighter-rouge&quot;&gt;'~/.meteor/releases/[RELEASE].release.json'&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Get the value assigned to &lt;code class=&quot;highlighter-rouge&quot;&gt;tools&lt;/code&gt;, let’s call it &lt;code class=&quot;highlighter-rouge&quot;&gt;TOOLS_ID&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Here is the path to the node binary&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.meteor/tools/[TOOLS_ID]/bin/node&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope this helps you to deploy and run your app smoothly without much issues. Let me know your thoughts.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Thank You, &lt;a href=&quot;https://twitter.com/alokag&quot;&gt;Aloka Gunasekara&lt;/a&gt; for editing the article.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <link>http://localhost:4000/how-meteor-uses-node</link>
      <guid isPermaLink="true">http://localhost:4000/how-meteor-uses-node</guid>
      <pubDate>2013-08-09 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Let's Scale Meteor - Using MongoDB Oplog</title>
      <description>&lt;blockquote&gt;
  &lt;p&gt;Smart Collection is now retired &amp;amp; Meteor’s Collection implementation has fixes for most of the performance bottlenecks. It is also using the MongoDB oplog just like Smart Collections.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Update: See my new article on this topic: &lt;a href=&quot;/does-meteor-scale.html&quot;&gt;Does Meteor Scale?&lt;/a&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;A few months back, I introduced &lt;a href=&quot;http://meteorhacks.com/meteor-cluster-introduction-and-how-it-works.html&quot;&gt;Meteor Cluster&lt;/a&gt; on this blog, which is a way we can scale meteor horizontally while retaining Meteor’s realtime behavior. But it was a hack and as a result, it was not so efficient. So I began looking into alternatives and tailing &lt;a href=&quot;http://docs.mongodb.org/manual/reference/glossary/#term-oplog&quot;&gt;MongoDB oplog&lt;/a&gt; seems like to be the ideal solution. But it didn’t play well with the current collection implementation. So I wrote &lt;a href=&quot;http://meteorhacks.com/introducing-smart-collections.html&quot;&gt;Smart Collections&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Today, I’ve completed MongoDB oplog integration into Smart Collections and now you can scale meteor very effectively. What’s more it’s dead simple to use.&lt;/p&gt;

&lt;h2 id=&quot;five-minute-guide&quot;&gt;Five Minute Guide&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Like to watch, rather reading? Watch my Screencast on &lt;a href=&quot;http://www.youtube.com/watch?v=ctSd9VXvp_0&quot; target=&quot;_blank&quot;&gt;Scaling Meteor with Smart Collections&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Without digging into technical details, let’s scale a Meteor app. For that,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You need to configure MongoDB for an active oplog&lt;/li&gt;
  &lt;li&gt;You need to use Smart Collections in your app&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;configure-mongodb&quot;&gt;Configure MongoDB&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Now you need to use a separate MongoDB server&lt;/li&gt;
  &lt;li&gt;Start it with &lt;code class=&quot;highlighter-rouge&quot;&gt;mongod --replSet meteor&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Start a &lt;code class=&quot;highlighter-rouge&quot;&gt;mongo&lt;/code&gt; shell and configure mongo as follows&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apply these commands&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var config = {_id: &quot;meteor&quot;, members: [{_id: 0, host: &quot;127.0.0.1:27017&quot;}]}
rs.initiate(config)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;configure-app&quot;&gt;Configure App&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Use Smart Collections instead of Standard Collections&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Start each Meteor instance with &lt;code class=&quot;highlighter-rouge&quot;&gt;OPLOG_URL&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;MONGO_URL&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export MONGO_URL=mongodb://localhost:27017/appdb
export OPLOG_URL=mongodb://localhost:27017/local
meteor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you’ve a cluster of horizontally scaled meteor instances. Isn’t that easy?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I can also help you to scale your app in production. &lt;a href=&quot;mailto:arunoda.susiripala@gmail.com&quot;&gt;Let’s talk :)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;implementation-details&quot;&gt;Implementation Details&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/kb7stMV.png&quot; alt=&quot;Scaling Meteor with Mongo Oplog&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s dig in if you want to know what’s really happening behind the scene.&lt;/p&gt;

&lt;h3 id=&quot;what-is-mongodb-oplog&quot;&gt;What is MongoDB Oplog&lt;/h3&gt;

&lt;p&gt;MongoDB oplog is the heart of MongoDB’s replication engine (replicaSets). Oplog contains a log of all the write operations occurring in Mongo. In MongoDB replication, secondaries listen to master’s oplog and apply changes accordingly.&lt;/p&gt;

&lt;p&gt;In Smart Collections, I’ve used the same approach. Smart Collections listen for the MongoDB oplog, apply changes and invalidate documents accordingly.&lt;/p&gt;

&lt;h3 id=&quot;is-it-reliable&quot;&gt;Is it Reliable?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Yes&lt;/strong&gt;. This is the same technology used in MongoDB &lt;a href=&quot;http://docs.mongodb.org/manual/replication/&quot;&gt;replication&lt;/a&gt;, so it is very reliable. Recently &lt;a href=&quot;http://www.10gen.com/&quot;&gt;10gen&lt;/a&gt; started a Mongo oplog based &lt;a href=&quot;https://mms.10gen.com/&quot;&gt;backup service&lt;/a&gt;. So you can imagine how reliable it is.&lt;/p&gt;

&lt;h3 id=&quot;does-it-take-some-extra-space&quot;&gt;Does it take some extra space?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;No&lt;/strong&gt;. Oplog is itself is a &lt;a href=&quot;http://docs.mongodb.org/manual/core/capped-collections/&quot;&gt;&lt;strong&gt;Capped Collection&lt;/strong&gt;&lt;/a&gt;. Capped Collections have fixed size; so we can ask MongoDB to use a very small capped collection for the oplog. You can use &lt;code class=&quot;highlighter-rouge&quot;&gt;--oplogSize&lt;/code&gt; option for that.&lt;/p&gt;

&lt;h3 id=&quot;does-it-affect-meteors-performance&quot;&gt;Does it affect Meteor’s performance?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;No&lt;/strong&gt;. Smart Collections are designed with oplog integration in mind. So oplog integration does not make any notable overhead to Meteor.&lt;/p&gt;

&lt;p&gt;Additionally, oplog integration avoids multiUpdate and multiRemove invalidation methods used in Smart Collections. So, using Oplog makes meteor performs better.&lt;/p&gt;

&lt;h2 id=&quot;endless-possibilities&quot;&gt;Endless possibilities&lt;/h2&gt;

&lt;p&gt;This Oplog Integration does not only make Meteor scalable. But opens the door for endless possibilities. Some of them are,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can get the full power of Multi Core CPUs with Meteor&lt;/li&gt;
  &lt;li&gt;You can directly write into Mongo and get changes from Meteor&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the upcoming hacks, I’ll discuss about some of these new possibilities.&lt;/p&gt;

&lt;p&gt;Okay, I did my job. Now it’s your turn to scale your app correctly. I’m looking forward to your suggestions and experiences with Oplog Integration.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you want to know more, checkout Smart Collections &lt;a href=&quot;https://github.com/arunoda/meteor-smart-collections&quot;&gt;github repository&lt;/a&gt; or &lt;a href=&quot;mailto:arunoda.susiripala@gmail.com&quot;&gt;Talk to me&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <link>http://localhost:4000/lets-scale-meteor</link>
      <guid isPermaLink="true">http://localhost:4000/lets-scale-meteor</guid>
      <pubDate>2013-08-01 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Making Meteor 500% Faster with Smart Collections</title>
      <description>&lt;blockquote&gt;
  &lt;p&gt;Smart Collection is now retired &amp;amp; Meteor’s Collection implementation has fixes for most of the performance bottlenecks. It is also using the MongoDB oplog just like Smart Collections.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ve released &lt;a href=&quot;http://meteorhacks.com/introducing-smart-collections.html&quot;&gt;Smart Collections&lt;/a&gt; few days ago. And I was talking about its performance over the standard Collection implementation. But I’ve not showed it to you. Here it is.&lt;/p&gt;

&lt;p&gt;Smart Collection can give you,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;~5X&lt;/strong&gt; improved performance to your app&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;~20X&lt;/strong&gt; improved performance to mongo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s dig into the test suite and more details.&lt;/p&gt;

&lt;h2 id=&quot;test-app&quot;&gt;Test App&lt;/h2&gt;

&lt;p&gt;Our test app is a simple group chat application. Where people can join into groups as their wish and start sending messages. For this test, I used a setup as follows&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;~25 Groups&lt;/li&gt;
  &lt;li&gt;50 Users (for all groups)&lt;/li&gt;
  &lt;li&gt;Every user sends a message per 2 seconds&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;testing-method&quot;&gt;Testing Method&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;I used set of PhantomJS processes to emulate real users. I used a forked version of Nick’s &lt;a href=&quot;http://goo.gl/R4wHn&quot;&gt;stress testing script&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;CPU and Memory usage were captured using &lt;a href=&quot;https://github.com/arunoda/node-usage&quot;&gt;node-usage&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;MongoDB CPU and Memory usage were also captured using node-usage&lt;/li&gt;
  &lt;li&gt;Test ran for 15 min in both cases (With Smart Collections and Without)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ve added necessary mongodb indexes to avoid mongo getting heated unnecessarily. And DB has been profiled for slow queries and nothing was reported.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you want to learn more about the testing suite. &lt;a href=&quot;https://github.com/arunoda/stress-test-meteor&quot;&gt;Check it out here&lt;/a&gt;. Try it on your box or a VM and share the results :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;testing-environment&quot;&gt;Testing Environment&lt;/h2&gt;

&lt;p&gt;My intension is not to do a stress test on meteor, but to do a comparison between Smart Collection and Standard Collections. So I simply used my dev box as the testing environment.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MacBook Pro Late 2011&lt;/li&gt;
  &lt;li&gt;2,9 GHz Intel Core i7&lt;/li&gt;
  &lt;li&gt;8 GB RAM&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;

&lt;h3 id=&quot;for-the-app-cpu&quot;&gt;For the app (CPU)&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/T8ySQ44.png&quot; alt=&quot;Meteor App Performance - Smart Collections vs Collections &quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;for-mongodb-cpu&quot;&gt;For MongoDB (CPU)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/eiDY7QT.png&quot; alt=&quot;Mongo App Performance - Smart Collections vs Collections&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;These graphs were generated using Excel and all the source files and logs related to these can be &lt;a href=&quot;https://dl.dropboxusercontent.com/u/6826117/smart-collections-vs-collections.zip&quot;&gt;downloaded here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;what-about-the-ram&quot;&gt;What about the RAM?&lt;/h2&gt;
&lt;p&gt;RAM usage can be negligible for this test. In both cases they were the same.(~200 MB) Since our data set is small, it is hard to see a difference.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Let’s discuss why there is a big difference in CPU.&lt;/p&gt;

&lt;p&gt;With Meteor Collections,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In our app we have around 25 different queries&lt;/li&gt;
  &lt;li&gt;When a insert happens (or any write operation) meteor re-run all 25 queries to get the result from db&lt;/li&gt;
  &lt;li&gt;Then it needs to compare them for getting the changes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But with Smart Collections,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Insert operations are pretty cheap, since it doesn’t even look for the db for the document (and its safe)&lt;/li&gt;
  &lt;li&gt;This test app does not have an update operation. But if exists, it needs to get the data from the DB&lt;/li&gt;
  &lt;li&gt;But only the changed document will be taken with &lt;code class=&quot;highlighter-rouge&quot;&gt;_id&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So that’s it; Do you want these benefits? Checkout &lt;a href=&quot;http://meteorhacks.com/introducing-smart-collections.html&quot;&gt;Smart Collections&lt;/a&gt;.&lt;/p&gt;

</description>
      <link>http://localhost:4000/making-meteor-500-faster-with-smart-collections</link>
      <guid isPermaLink="true">http://localhost:4000/making-meteor-500-faster-with-smart-collections</guid>
      <pubDate>2013-07-23 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Introducing Smart Collections for Meteor</title>
      <description>&lt;blockquote&gt;
  &lt;p&gt;Smart Collection is now retired &amp;amp; Meteor’s Collection implementation has fixes for most of the performance bottlenecks. It is also using the MongoDB oplog just like Smart Collections.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;Smart Collections is a complete re-write of the MongoDB Collection API for Meteor. It is designed with following 3 areas in mind&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Speed&lt;/li&gt;
    &lt;li&gt;Efficiency (Memory &amp;amp; CPU)&lt;/li&gt;
    &lt;li&gt;Scalability&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;This is not a &lt;strong&gt;toy&lt;/strong&gt; project! But a complete Collection replacement with a &lt;a href=&quot;https://github.com/arunoda/meteor-smart-collections/blob/master/test_cases.todo&quot;&gt;well tested&lt;/a&gt; source code. Still we might have bugs :)&lt;/p&gt;

  &lt;p&gt;Head over to the &lt;a href=&quot;https://github.com/arunoda/meteor-smart-collections&quot;&gt;github repo&lt;/a&gt; for how to use Smart Collections with your app. It doesn’t take more than 5 minutes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now you know what Smart Collections is. But next you’ll ask why you need it? Let me explain.&lt;/p&gt;

&lt;h2 id=&quot;how-meteor-uses-mongo-internally&quot;&gt;How Meteor uses Mongo internally&lt;/h2&gt;

&lt;p&gt;No offence, Meteor is a badAss framework. But it has some areas which needs improvements.&lt;/p&gt;

&lt;p&gt;One of such area is how meteor deals with MongoDB(and it is the heart of the meteor). Here is how Meteor’s realtime engine works. It polls mongodb for new updates and cache them on the RAM. It does polling in following situations.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;after every write operation (insert/update or remove)&lt;/li&gt;
  &lt;li&gt;Every 10 secs cycle&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It does polling per query basis. Lets say in your app, you’ve 20 different queries in the runtime.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{username: 'arunoda'}&lt;/code&gt; &amp;amp;&amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;{username: 'james'}&lt;/code&gt; are two different queries&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So when a write operation occurred in that collection&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;meteor polls mongodb for all 20 queries&lt;/li&gt;
  &lt;li&gt;get the full result&lt;/li&gt;
  &lt;li&gt;diff it with the data in the RAM&lt;/li&gt;
  &lt;li&gt;generate changes and notify affected clients&lt;/li&gt;
  &lt;li&gt;store the new result in the RAM&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Chris Mather at EventedMind did a &lt;a href=&quot;http://www.eventedmind.com/posts/meteor-liveresultsset&quot;&gt;great screencast&lt;/a&gt; on Meteor LiveResultsSet. Check it out if you need more information on meteor’s realtime engine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;why-it-is-bad-or-not-so-good&quot;&gt;Why it is bad (or not so good)?&lt;/h2&gt;

&lt;p&gt;This is okay if you’ve few queries. But what if you’ve many queries?&lt;/p&gt;

&lt;p&gt;With this implementation, When a write operation is happening, you need to poll mongo for each query. Since most of the time those queries would not get affected by the write operation, polling is inefficient and ineffective.&lt;/p&gt;

&lt;h3 id=&quot;poll-operation-is-very-expensive-lets-discuss-why&quot;&gt;Poll operation is very expensive. Let’s discuss why?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;It goes to mongo and fetch all the data for queries. This takes time.&lt;/li&gt;
  &lt;li&gt;After meteor got the results, it needs to be diff with the data in RAM to get the changes. Which is a CPU blocking operation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;caching-all-data-is-bad&quot;&gt;Caching all data is bad&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Caching is a good concept.&lt;/li&gt;
  &lt;li&gt;But caching all the data related to queries is not a good idea. Since it eats the RAM&lt;/li&gt;
  &lt;li&gt;The Cache is only used for diffing purpose, So it is a white elephant.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;When I was looking into this, I was thinking for a solution. Finally, I was able to re-architect the mongo collection implementation while keeping the public API as it is. That’s the born of Smart Collections.&lt;/p&gt;

&lt;iframe src=&quot;http://ghbtns.com/github-btn.html?user=arunoda&amp;amp;repo=meteor-smart-collections&amp;amp;type=watch&amp;amp;count=true&amp;amp;size=large&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; scrolling=&quot;0&quot; width=&quot;125px&quot; height=&quot;30px&quot;&gt;
&lt;/iframe&gt;
&lt;iframe src=&quot;http://ghbtns.com/github-btn.html?user=arunoda&amp;amp;repo=meteor-smart-collections&amp;amp;type=fork&amp;amp;count=true&amp;amp;size=large&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; scrolling=&quot;0&quot; width=&quot;152px&quot; height=&quot;30px&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;Smart Collection has following characteristics.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It does no caching (later may cache commonly used documents)&lt;/li&gt;
  &lt;li&gt;No polling(minimum) and no diffing&lt;/li&gt;
  &lt;li&gt;Designed to be integrated with MongoDB oplog&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-smart-collections-works&quot;&gt;How Smart Collections Works&lt;/h2&gt;

&lt;p&gt;Let’s have a look at this diagram.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/Vn67xqK.jpg&quot; alt=&quot;Smart Collections Architecturee&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;getting-changes&quot;&gt;Getting Changes&lt;/h3&gt;
&lt;p&gt;Smart Collection starts the magic after it just received a write operation either from the client or server. First it applies the operation. Then it started to invalidating and get the changes.&lt;/p&gt;

&lt;h4 id=&quot;for-insert-operation&quot;&gt;For insert operation&lt;/h4&gt;
&lt;p&gt;Insert operation is so easy to invalidate since we’ve the mongo document. So we can trigger correct cursors for the changes without interacting with the DB.&lt;/p&gt;

&lt;h4 id=&quot;for-update-operation---with-_id&quot;&gt;For update operation - with &lt;code class=&quot;highlighter-rouge&quot;&gt;_id&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;We need to query mongo for the updated document. Then with the update modifier and the query selectors, we can decide which cursors(clients) will get affected with this update. Here, we only query mongo for the updated document.&lt;/p&gt;

&lt;h4 id=&quot;for-update-operation---with-a-selector&quot;&gt;For update operation - with a selector&lt;/h4&gt;
&lt;p&gt;This situation is bit tricky. We need to get all the documents associated with the update selector and do the above process(without querying mongo again) for each document.&lt;/p&gt;

&lt;h4 id=&quot;remove-operation---with-_id&quot;&gt;Remove operation - with &lt;code class=&quot;highlighter-rouge&quot;&gt;_id&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Cursors know which ids they have. So we can easily send changes to cursors without dealing with mongo.&lt;/p&gt;

&lt;h4 id=&quot;remove-operation---with-a-selector&quot;&gt;Remove operation - with a selector&lt;/h4&gt;
&lt;p&gt;This is the only place we need to do polling for all the queries with the db. But we only need the &lt;code class=&quot;highlighter-rouge&quot;&gt;_id&lt;/code&gt; from the mongo. After that, we notify affected cursors.&lt;/p&gt;

&lt;h3 id=&quot;notifying-clients&quot;&gt;Notifying Clients&lt;/h3&gt;
&lt;p&gt;Smart Collections uses existing pub/sub mechanism to send changes to clients. So there are no code changes for you.&lt;/p&gt;

&lt;h3 id=&quot;client-side-write-operations&quot;&gt;Client Side Write Operations&lt;/h3&gt;
&lt;p&gt;Client side write operations are carried with method calls. It does permission checks as well.&lt;/p&gt;

&lt;h2 id=&quot;scalability&quot;&gt;Scalability&lt;/h2&gt;

&lt;p&gt;We can tail &lt;a href=&quot;http://docs.mongodb.org/manual/core/replica-set-oplog/&quot;&gt;mongodb oplog&lt;/a&gt; for all the write operations inside meteor. With those ops, we can simply invalidate cursors. MongoDB oplog is per document basis. So we don’t have situations with remove and update operations with selectors, which leads to zero mongodb polling.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;See, how to &lt;a href=&quot;http://meteorhacks.com/lets-scale-meteor.html&quot;&gt;scale meteor&lt;/a&gt; with Smart Collections&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;benefits&quot;&gt;Benefits&lt;/h2&gt;

&lt;p&gt;I think I don’t need to write this section. Anyway with Smart Collections you’ll get following benefits.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Improves overall speed&lt;/li&gt;
  &lt;li&gt;Low Memory Usage&lt;/li&gt;
  &lt;li&gt;Low CPU Usage&lt;/li&gt;
  &lt;li&gt;Low MongoDB overhead&lt;/li&gt;
  &lt;li&gt;Get the benefit from multiple CPU cores (with oplog)&lt;/li&gt;
  &lt;li&gt;Easy Horizontal Scaling (with oplog)&lt;/li&gt;
  &lt;li&gt;Get changes from direct writes to mongo (with oplog)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;compatibility&quot;&gt;Compatibility&lt;/h2&gt;

&lt;p&gt;SmartCollection designed to be fully compatible with existing &lt;a href=&quot;http://docs.meteor.com/#collections&quot;&gt;Collection API&lt;/a&gt;. But there are few edge cases.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;in the &lt;strong&gt;server side&lt;/strong&gt; you won’t get &lt;code class=&quot;highlighter-rouge&quot;&gt;.observe()&lt;/code&gt; since we don’t cache documents (but you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;.observeChanges()&lt;/code&gt; anywhere)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_id&lt;/code&gt; must be a &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectId&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt; support coming soon)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope I could be able to explain how Smart Collection works, and why it is different from the existing implementation. So it is your turn now. &lt;a href=&quot;https://github.com/arunoda/meteor-smart-collections&quot;&gt;Give it a try&lt;/a&gt; and tell me how it goes. Don’t forget to bug me for &lt;a href=&quot;https://github.com/arunoda/meteor-smart-collections/issues&quot;&gt;issues&lt;/a&gt; :)&lt;/p&gt;
</description>
      <link>http://localhost:4000/introducing-smart-collections</link>
      <guid isPermaLink="true">http://localhost:4000/introducing-smart-collections</guid>
      <pubDate>2013-07-19 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Continuous Integration for Meteor Apps</title>
      <description>&lt;p&gt;I’ve been working on &lt;a href=&quot;http://arunoda.github.io/laika/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;laika&lt;/code&gt;&lt;/a&gt; for last 2 months with support from the community, and we have &lt;a href=&quot;http://goo.gl/JD62U&quot;&gt;fixed lots of bugs&lt;/a&gt; and added some &lt;a href=&quot;http://goo.gl/JD62U&quot;&gt;crucial features&lt;/a&gt;. Still laika is not perfect, but it is moving towards that. I’ve seen &lt;a href=&quot;https://groups.google.com/forum/#!topic/meteor-talk/I9FwGAtzJs0&quot;&gt;few people asking&lt;/a&gt; on how do Continous Integration(CI) with Meteor. So here is how you can do CI for your meteor apps with &lt;code class=&quot;highlighter-rouge&quot;&gt;laika&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For this article, I’ll show you how to enable laika based CI for meteor with two popular continuous integration services.(&lt;a href=&quot;https://travis-ci.org/&quot;&gt;travis-ci&lt;/a&gt; and &lt;a href=&quot;https://www.codeship.io/&quot;&gt;codeship&lt;/a&gt;) If you are using some other service or a self hosted solution, look at the end of the article.&lt;/p&gt;

&lt;h2 id=&quot;meteor-ci-on-travis-ci&quot;&gt;Meteor CI on Travis-CI&lt;/h2&gt;

&lt;p&gt;Travis-CI is well known for their free Continuous Integration service for OpenSource projects. And they’ve recently launched their paid service for private repositories with &lt;a href=&quot;https://travis-ci.com&quot;&gt;https://travis-ci.com&lt;/a&gt;. Let’s have a look at how to configure travis-ci for laika.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First login to &lt;a href=&quot;https://travis-ci.org&quot;&gt;https://travis-ci.org&lt;/a&gt; and navigate to &lt;a href=&quot;https://travis-ci.org/profile&quot;&gt;https://travis-ci.org/profile&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;For private repositories use &lt;a href=&quot;https://travis-ci.com&quot;&gt;https://travis-ci.com&lt;/a&gt; Instead&lt;/li&gt;
  &lt;li&gt;enable travis support for your project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github-camo.global.ssl.fastly.net/852c1132dc2af04ff1557d7df31f04a5aec1eec6/687474703a2f2f692e696d6775722e636f6d2f34304c32436e552e706e67&quot; alt=&quot;travis-ci support for meteor apps&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;then create &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; file in your project root as shown below&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add following content to &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;language: node_js
node_js:
  - &quot;0.10&quot;
before_install:
  - &quot;curl -L http://git.io/3l-rRA | /bin/sh&quot;
services:
  - mongodb
env: 
  - LAIKA_OPTIONS=&quot;-t 5000&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’ve added travis-support for &lt;a href=&quot;https://github.com/arunoda/hello-laika&quot;&gt;hello-laika&lt;/a&gt; project as an example.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/arunoda/hello-laika&quot;&gt;Source Code for hello-laika&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://travis-ci.org/arunoda/hello-laika&quot;&gt;Travis CI page for hello-laika&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/iNwk7wE.png&quot; alt=&quot;Continuous Integration for Meteor with laika&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;meteor-ci-on-codeship&quot;&gt;Meteor CI on CodeShip&lt;/h2&gt;

&lt;p&gt;CodeShip is another popular Continuous Integration service for private projects. It has more features over travis-ci. Also it is so valuable and cheap if you only have one or two projects to manage. Here is how you can add laika support on codeship.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Login to &lt;a href=&quot;https://www.codeship.io&quot;&gt;https://www.codeship.io&lt;/a&gt; and add your project&lt;/li&gt;
  &lt;li&gt;When its comes to configure your tests follow the process below&lt;/li&gt;
  &lt;li&gt;Select your technology as &lt;code class=&quot;highlighter-rouge&quot;&gt;nodejs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Replace setup commands with following&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/meteor/meteor.git ~/meteor
export PATH=~/meteor/:$PATH
npm install -g meteorite laika
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Replace test commands with following&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;METEOR_PATH=~/meteor laika -t 5000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’ve added codeship support for &lt;a href=&quot;https://github.com/arunoda/hello-laika&quot;&gt;hello-laika&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/7uh672K.png&quot; alt=&quot;Continuous Integration for Meteor with laika&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;for-other-ci-tools-and-services&quot;&gt;For other CI tools and services&lt;/h2&gt;

&lt;p&gt;There are lots of other Continuous Integration services and downloaded servers out there. It is not feasible to provide how-to guides for all. Let’s discuss in general how we can add laika support for them.&lt;/p&gt;

&lt;p&gt;All of these tools and services provide a way to customize their runtime and the test. Most of the time we can configure them using shell scripts. We can categorize them into two.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Who gives ROOT access for configuration scripts&lt;/li&gt;
  &lt;li&gt;Who don’t give us ROOT access for configuration scripts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Laika can be configure for both very easily. Let’s look at how.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Assume you’ve configured or installed &lt;code class=&quot;highlighter-rouge&quot;&gt;nodejs&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Assume there is a local mongodb server is running&lt;/li&gt;
    &lt;li&gt;Assume phantomjs is installed and available on the path&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;with-root-access&quot;&gt;With ROOT access&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#install meteor normally
curl https://install.meteor.com | /bin/sh

#installing meteorite and laika
npm install -g meteorite laika

#run tests
laika #&amp;lt;options&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;without-root-access&quot;&gt;Without ROOT access&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#install meteor from git
git clone https://github.com/meteor/meteor.git ~/meteor
export PATH=~/meteor/:$PATH

#install meteorite and laika
npm install -g meteorite laika

#run tests
METEOR_PATH=~/meteor laika -t 5000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I hope with this information, you could setup your meteor app for Continuous Integration  very easily. Let me know how you think about this, share your experiences.&lt;/p&gt;
</description>
      <link>http://localhost:4000/continuos-integration-for-meteor-apps</link>
      <guid isPermaLink="true">http://localhost:4000/continuos-integration-for-meteor-apps</guid>
      <pubDate>2013-07-15 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>[Free eBook] Let's Create a Realtime Blackboard</title>
      <description>
</description>
      <link>http://localhost:4000/lets-create-a-realtime-blackboard</link>
      <guid isPermaLink="true">http://localhost:4000/lets-create-a-realtime-blackboard</guid>
      <pubDate>2013-07-09 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Introducing Meteor Streams</title>
      <description>&lt;p&gt;When we are talking about meteor and realtime, mongodb comes to the scene by default. It is really good model and works really well. But do we really need mongodb for all our realtime communications? Obviously, answer should be NO.&lt;/p&gt;

&lt;p&gt;But with meteor, we tend to design our app with mongodb since it is the only way. Mongodb is good, and we need it, but what we really need is a hybrid approach. For some of our realtime communications we can use mongo, for some we’ll do it without mongo. But how?&lt;/p&gt;

&lt;p&gt;I was asking that question myself. There was no good and easy solution. So I started working on meteor-streams and here it is :)&lt;/p&gt;

&lt;h2 id=&quot;introducing-meteor-streams&quot;&gt;Introducing Meteor Streams&lt;/h2&gt;

&lt;iframe src=&quot;http://ghbtns.com/github-btn.html?user=arunoda&amp;amp;repo=meteor-streams&amp;amp;type=watch&amp;amp;count=true&amp;amp;size=large&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; scrolling=&quot;0&quot; width=&quot;125px&quot; height=&quot;30px&quot;&gt;
&lt;/iframe&gt;
&lt;iframe src=&quot;http://ghbtns.com/github-btn.html?user=arunoda&amp;amp;repo=meteor-streams&amp;amp;type=fork&amp;amp;count=true&amp;amp;size=large&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; scrolling=&quot;0&quot; width=&quot;152px&quot; height=&quot;30px&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;Meteor Stream is a distributed &lt;a href=&quot;http://www.sitepoint.com/nodejs-events-and-eventemitter/&quot;&gt;EventEmitter&lt;/a&gt; across meteor. It can be managed with &lt;a href=&quot;http://arunoda.github.io/meteor-streams/filters.html&quot;&gt;filters&lt;/a&gt; and has a good &lt;a href=&quot;http://arunoda.github.io/meteor-streams/security.html&quot;&gt;security&lt;/a&gt; model. (Inherited from existing meteor security model). You can create as many as streams you want, and it is independent from mongo.&lt;/p&gt;

&lt;h2 id=&quot;lets-give-it-a-try&quot;&gt;Lets give it a try&lt;/h2&gt;

&lt;p&gt;Let’s create a simple browser console based chat app.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a simple meteor application with &lt;code class=&quot;highlighter-rouge&quot;&gt;meteor hello-streams&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Install meteor streams from atmosphere &lt;code class=&quot;highlighter-rouge&quot;&gt;mrt add streams&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add following content to &lt;code class=&quot;highlighter-rouge&quot;&gt;chat.js&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chatStream = new Meteor.Stream('chat');

if(Meteor.isClient) {
  sendChat = function(message) {
    chatStream.emit('message', message);
    console.log('me: ' + message);
  };

  chatStream.on('message', function(message) {
    console.log('user: ' + message);
  });
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;sendChat(messageText)&lt;/code&gt; method to chat in the browser console. Isn’t it simple and awesome :)&lt;/p&gt;

&lt;p&gt;This is just the beginning; are lot more. Check out &lt;a href=&quot;http://arunoda.github.io/meteor-streams/&quot;&gt;Meteor Streams Docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-meteor-streams-works&quot;&gt;How Meteor Streams Works&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/MX0yZVG.png&quot; alt=&quot;How Meteor Streams Works&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Once a client &lt;code class=&quot;highlighter-rouge&quot;&gt;emit&lt;/code&gt; an event first it will reach the checkpoint no 1.&lt;/li&gt;
  &lt;li&gt;It will make sure this event and the client can proceed&lt;/li&gt;
  &lt;li&gt;After event pass through the checkpoint it will go through a set of filters&lt;/li&gt;
  &lt;li&gt;Filters can add/modify and delete the content of the event&lt;/li&gt;
  &lt;li&gt;Then it goes through the next checkpoint to see which clients can receive this event&lt;/li&gt;
  &lt;li&gt;After it passed through the checkpoint 2, event will be delivered to the respective clients&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;You might wonder, although I have talked here about checkpoints, but I never used any checkpoints in the example. It is because of the &lt;code class=&quot;highlighter-rouge&quot;&gt;insecure&lt;/code&gt; package. If &lt;code class=&quot;highlighter-rouge&quot;&gt;insecure&lt;/code&gt; package exists, all the checkpoints are open by default or otherwise closed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;checkout-documentation&quot;&gt;Checkout Documentation&lt;/h2&gt;

&lt;p&gt;I can’t show you full power of the meteor-streams with a single post. &lt;a href=&quot;http://arunoda.github.io/meteor-streams/&quot;&gt;Checkout the documentation&lt;/a&gt; and try to read these topics carefully.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://arunoda.github.io/meteor-streams/communication-patterns.html&quot;&gt;Communication Patterns&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://arunoda.github.io/meteor-streams/security.html&quot;&gt;Security&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://arunoda.github.io/meteor-streams/filters.html&quot;&gt;Filters&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://arunoda.github.io/meteor-streams/scaling-support.html&quot;&gt;Scaling with Meteor Cluster&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://arunoda.github.io/meteor-streams/reactivity.html&quot;&gt;Reactivity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;checkout-some-examples&quot;&gt;Checkout some examples&lt;/h2&gt;

&lt;p&gt;I’ve created few examples and here are they&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Realtime Blackboard &lt;a href=&quot;http://blackboard.meteorhacks.com/xzjkf7ZHvw3APbfxY&quot;&gt;Live App&lt;/a&gt; - &lt;a href=&quot;https://github.com/arunoda/streams-blackboard&quot;&gt;Source&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Chat &lt;a href=&quot;http://streams-chat.meteor.com&quot;&gt;Live App&lt;/a&gt; - &lt;a href=&quot;https://github.com/arunoda/meteor-streams/tree/master/examples/chat&quot;&gt;Source&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Chat with Filters &lt;a href=&quot;http://streams-chat-with-filters.meteor.com&quot;&gt;Live App&lt;/a&gt; - &lt;a href=&quot;https://github.com/arunoda/meteor-streams/tree/master/examples/chat-with-filters&quot;&gt;Source&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Streaming Home Page &lt;a href=&quot;http://streams-streaming-homepage.meteor.com&quot;&gt;Live App&lt;/a&gt; - &lt;a href=&quot;https://github.com/arunoda/meteor-streams/tree/master/examples/streaming-homepage&quot;&gt;Source&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Streaming Home Page with Reactive UI bindings &lt;a href=&quot;http://streams-streaming-homepage-reactive.meteor.com&quot;&gt;Live App&lt;/a&gt; - &lt;a href=&quot;https://github.com/arunoda/meteor-streams/tree/master/examples/streaming-homepage-reactive&quot;&gt;Source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Try Meteor Streams with your app and let me know your comments.&lt;/p&gt;
</description>
      <link>http://localhost:4000/introducing-meteor-streams</link>
      <guid isPermaLink="true">http://localhost:4000/introducing-meteor-streams</guid>
      <pubDate>2013-07-01 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Logging Support for Meteor with Winston</title>
      <description>&lt;p&gt;Logging is a one of the best practices to follow if you are trying to build any kind of production quality application. When it’s come to Meteor, there is no official logging framework exists yet. And it is quite okay since it has a good package handling system, so we can always use some third party packages for requirements like this.&lt;/p&gt;

&lt;p&gt;When I search about logging for meteor, the most popular one seems to be &lt;a href=&quot;https://github.com/jhoxray/observatory&quot;&gt;observatory&lt;/a&gt;. It is something specially build for meteor, and it has a nice GUI.&lt;/p&gt;

&lt;p&gt;But I didn’t like its approach and I prefer of having a traditional logging framework. And I wouldn’t like to build something my own either. Finally I decided to go with &lt;a href=&quot;https://github.com/flatiron/winston&quot;&gt;winston&lt;/a&gt;; a popular nodejs logging module.&lt;/p&gt;

&lt;h2 id=&quot;why-i-choose-winston&quot;&gt;Why I choose winston&lt;/h2&gt;

&lt;p&gt;These are my requirements.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I simply need to track some events on the server side&lt;/li&gt;
  &lt;li&gt;I don’t want to process or view logs inside the app&lt;/li&gt;
  &lt;li&gt;I prefer integrating with a cloud service like &lt;a href=&quot;https://github.com/flatiron/winston&quot;&gt;papertrail&lt;/a&gt; or &lt;a href=&quot;http://loggly.com/&quot;&gt;loggly&lt;/a&gt; for analyzing logs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And winston was the perfect match for this&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It has all the requirements I need&lt;/li&gt;
  &lt;li&gt;It has &lt;a href=&quot;https://github.com/flatiron/winston/blob/master/docs/transports.md&quot;&gt;transports&lt;/a&gt; for several log processing services and tools&lt;/li&gt;
  &lt;li&gt;It is widely used and mature&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-i-used-winston-with-meteor&quot;&gt;How I used winston with Meteor&lt;/h2&gt;

&lt;p&gt;It is quite simple. All I had to do is to install &lt;a href=&quot;https://atmosphere.meteor.com/package/npm&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt;&lt;/a&gt;  smart package from the atmosphere and just define the dependencies.&lt;/p&gt;

&lt;p&gt;So after I’ve added &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; package, I created &lt;code class=&quot;highlighter-rouge&quot;&gt;packages.json&lt;/code&gt; file and specify dependencies as below&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;winston&quot;: &quot;0.7.2&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I wanted to log users when get connected and disconnected from the meteor app. Here is how I achieve that with winston.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;This is not the actual requirement(s), but used only for demonstration purpose&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if(Meteor.isServer) {
  //creating a global server logger
  logger = Meteor.require('winston');

  Meteor.publish('user', function() {
    var userId = this.userId;
    logger.info('user connected', {userId: userId});

    this.ready();
    this.onStop(function() {
      logger.info('user disconnected', {userId: userId});
    });
  });
}

if(Meteor.isClient) {
  Meteor.subscribe('user');
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, when a user get connected or disconnected, it simply does a nice console output like below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/9FUSoHY.png&quot; alt=&quot;Logging Support for Meteor&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;extending-winston&quot;&gt;Extending Winston&lt;/h2&gt;

&lt;p&gt;Simply printing messages to the console is not actually what I wanted. I wanted send these logs to some log processing service(winston treat these as a transport) and analyze my logs there.&lt;/p&gt;

&lt;p&gt;Fortunately winston has &lt;a href=&quot;https://atmosphere.meteor.com/package/npm&quot;&gt;a ton of different transport methods&lt;/a&gt;, including mongo, riak and hosted solutions like papertrail and loggly.&lt;/p&gt;

&lt;p&gt;Using them also so simple with meteor. Just simply define transport module using &lt;code class=&quot;highlighter-rouge&quot;&gt;packages.json&lt;/code&gt; and use it.&lt;/p&gt;

&lt;h4 id=&quot;let-me-show-you-how-i-used-papertrail-transport-for-winston&quot;&gt;let me show you how I used papertrail transport for winston.&lt;/h4&gt;

&lt;p&gt;Define &lt;code class=&quot;highlighter-rouge&quot;&gt;winston-papertrail&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;packages.json&lt;/code&gt; as shown below&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;winston&quot;: &quot;0.7.2&quot;,
  &quot;winston-papertrail&quot;: &quot;0.1.4&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add papertrail transport for winston&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var Papertrail = Meteor.require('winston-papertrail').Papertrail;
logger.add(Papertrail, {
  host: &quot;logs.papertrailapp.com&quot;,
  port: 20670, //this will be change from the papertrail account to account
  logFormat: function(level, message) {
      return '[' + level + '] ' + message;
  },
  inlineMeta: true
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it. Now I can see my logs in papertrail(in realtime) without any hassle :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/E3yx327.png&quot; alt=&quot;Meteor Logs showing in Papertrail&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So give it a try for your app. I’m sure you are gonna like it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’ve no any affiliation with papertrail except for using them for several apps. It is the easiest and the coolest log processing service I could have found. But it is also quite expensive compared with others.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <link>http://localhost:4000/logging-support-for-meteor</link>
      <guid isPermaLink="true">http://localhost:4000/logging-support-for-meteor</guid>
      <pubDate>2013-06-28 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>MongoDB Replica Sets with Meteor</title>
      <description>&lt;p&gt;For a production application, it is quite common to use mongodb as a &lt;a href=&quot;http://docs.mongodb.org/manual/replication/&quot;&gt;replica set&lt;/a&gt;. Unfortunately, mongodb replica sets support for Meteor was no so good in versions prior to 0.6.4. But with the version 0.6.4, now Meteor support for replica sets is really good.&lt;/p&gt;

&lt;p&gt;With this tutorial, I will go through the replica sets basics and how to configure it for Meteor.&lt;/p&gt;

&lt;h2 id=&quot;why-we-need-replica-set&quot;&gt;Why we need Replica Set&lt;/h2&gt;

&lt;p&gt;Replica Sets is the way how mongodb handles replication. Replication is really important for a production application since we cannot guarantee about the 100% availability. If something goes wrong, we should need some backup. Replica Sets is an option for that. Replica sets can also be used to scale mongodb (on read operations), but it’s commonly used for High Availability and Fault Tolerance.&lt;/p&gt;

&lt;p&gt;With replica sets, you can run few mongodb instances (normally 3) in sync. Mostly all of your data is synced between these nodes.&lt;/p&gt;

&lt;p&gt;There is a &lt;code class=&quot;highlighter-rouge&quot;&gt;primary&lt;/code&gt; node, which accepts all the write and read operations. Other nodes are called &lt;code class=&quot;highlighter-rouge&quot;&gt;secondaries&lt;/code&gt; and they are subscribed to primary for receiving write operations.&lt;/p&gt;

&lt;p&gt;If the primary goes down, one of the secondaries will become the new primary. All of these electing processes are handled by the replica set itself, and we don’t need to do any manual intervention.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Please note that there are some other ways we can configure the behavior of replica sets.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;creating-the-replica-set&quot;&gt;Creating the replica set&lt;/h2&gt;

&lt;p&gt;For this tutorial, we are creating a 3 node mongodb replica set. And we run all of these replica sets in our local machine. (just for the demonstration purpose). You can go through &lt;a href=&quot;http://goo.gl/izMZj&quot;&gt;my replica set short notes&lt;/a&gt; for setting it up.&lt;/p&gt;

&lt;p&gt;I assume you’ve gone through that process and now you’ve got a 3 nodes replica set as shown below&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;localhost:27001 (primary)&lt;/li&gt;
  &lt;li&gt;localhost:27002&lt;/li&gt;
  &lt;li&gt;localhost:27003&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our replica set name is &lt;strong&gt;meteor&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;configuring-meteor-to-use-it&quot;&gt;Configuring meteor to use it&lt;/h2&gt;

&lt;p&gt;Now we need to create our &lt;a href=&quot;http://goo.gl/KK5Ie&quot;&gt;replica set aware&lt;/a&gt; MONGO_URL as shown below.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/arunoda/a8337781393842a3f32e.js&quot;&gt;
&lt;/script&gt;

&lt;p&gt;Now lets start our meteor app with this MONGO_URL&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/arunoda/0d80b30554da07db4686.js&quot;&gt;
&lt;/script&gt;

&lt;p&gt;Now our app runs with a MongoDB Replica Set.&lt;/p&gt;

&lt;h2 id=&quot;important-notes&quot;&gt;Important notes&lt;/h2&gt;

&lt;p&gt;Still there are couple of options you need to be aware, when configuring your app. Here they are.&lt;/p&gt;

&lt;h3 id=&quot;read-preference&quot;&gt;Read Preference&lt;/h3&gt;

&lt;p&gt;With &lt;a href=&quot;http://goo.gl/v55vR&quot;&gt;read preference&lt;/a&gt; you can configure, where you need to read from. You can configure to read only from the primary, secondary or mixed of these. See here for the &lt;a href=&quot;http://goo.gl/HvBKw&quot;&gt;complete list&lt;/a&gt; of options.&lt;/p&gt;

&lt;p&gt;It is really important to set read preference value to &lt;code class=&quot;highlighter-rouge&quot;&gt;primaryPreferred&lt;/code&gt; as it avoids crashing meteor while there is a new primary election.&lt;/p&gt;

&lt;h3 id=&quot;write-concern&quot;&gt;Write Concern&lt;/h3&gt;

&lt;p&gt;With &lt;a href=&quot;http://goo.gl/7Q5Vi&quot;&gt;write concern&lt;/a&gt;, you can control the consistency level in the replica set. That means you can wait for mongodb to respond back to you for a write operation, after it completed write operation on all nodes, none or in between those two.&lt;/p&gt;

&lt;p&gt;It is recommended to to use write concern value &lt;code class=&quot;highlighter-rouge&quot;&gt;majority&lt;/code&gt; for replica sets. But it is not a bad idea to use it as &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; since we are not always reading from the secondaries.&lt;/p&gt;

&lt;p&gt;Now with all these options, our final MONGO_URL will be something like below.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/arunoda/bcab9e83eeb0495c0c7f.js&quot;&gt;
&lt;/script&gt;

&lt;p&gt;Give it a try and share your experiences.&lt;/p&gt;
</description>
      <link>http://localhost:4000/mongodb-replica-sets-with-meteor</link>
      <guid isPermaLink="true">http://localhost:4000/mongodb-replica-sets-with-meteor</guid>
      <pubDate>2013-06-20 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Complete NPM integration for Meteor</title>
      <description>&lt;p&gt;Npm support for Meteor comes to the light from &lt;a href=&quot;http://www.meteor.com/blog/2013/04/04/meteor-060-brand-new-distribution-system-app-packages-npm-integration&quot;&gt;version 0.6.0&lt;/a&gt;. But it gives complete NPM access to packages only. If you need to use npm modules like &lt;a href=&quot;https://npmjs.org/package/redis&quot;&gt;redis&lt;/a&gt;, &lt;a href=&quot;https://npmjs.org/package/aws-sdk&quot;&gt;aws-sdk&lt;/a&gt;, &lt;a href=&quot;https://npmjs.org/package/colors&quot;&gt;colors&lt;/a&gt;, &lt;a href=&quot;https://npmjs.org/package/winston&quot;&gt;winston&lt;/a&gt; in your app, you are out of luck.&lt;/p&gt;

&lt;p&gt;Of course,  you can wrap npm modules in a package or use if it is available on atmosphere, but that’s kind a hard.&lt;/p&gt;

&lt;h2 id=&quot;here-comes-the-solution&quot;&gt;Here comes the solution&lt;/h2&gt;

&lt;iframe src=&quot;http://ghbtns.com/github-btn.html?user=meteorhacks&amp;amp;repo=npm&amp;amp;type=watch&amp;amp;count=true&amp;amp;size=medium&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; scrolling=&quot;0&quot; width=&quot;90px&quot; height=&quot;30px&quot;&gt;
&lt;/iframe&gt;
&lt;iframe src=&quot;http://ghbtns.com/github-btn.html?user=meteorhacks&amp;amp;repo=npm&amp;amp;type=fork&amp;amp;count=true&amp;amp;size=medium&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; scrolling=&quot;0&quot; width=&quot;90px&quot; height=&quot;30px&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;I could be able to trick meteor a bit, and now we can have complete access to npm modules from Meteor. Here’s how you can do it. It’s pretty simple.&lt;/p&gt;

&lt;h2 id=&quot;adding-npm-support-to-your-app&quot;&gt;Adding NPM support to your app&lt;/h2&gt;

&lt;h3 id=&quot;via-official-meteor-packaging-system&quot;&gt;Via Official Meteor Packaging System&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;meteor add meteorhacks:npm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;via-meteorite&quot;&gt;Via Meteorite&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mrt add npm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;create-packagesjson-file&quot;&gt;Create packages.json file&lt;/h3&gt;

&lt;p&gt;Then create &lt;code class=&quot;highlighter-rouge&quot;&gt;packages.json&lt;/code&gt; file on your project root.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that it is &lt;code class=&quot;highlighter-rouge&quot;&gt;packages.json&lt;/code&gt;, not &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now define npm packages you want, with the absolute package versions as shown below.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;redis&quot;: &quot;0.8.2&quot;,
  &quot;github&quot;: &quot;0.1.8&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;lets-use-a-npm-module&quot;&gt;Let’s use a npm module&lt;/h3&gt;

&lt;p&gt;Normally you are loading core npm modules using &lt;code class=&quot;highlighter-rouge&quot;&gt;Npm.require()&lt;/code&gt;, But in order to load modules from your &lt;code class=&quot;highlighter-rouge&quot;&gt;packages.json&lt;/code&gt; you need to use &lt;code class=&quot;highlighter-rouge&quot;&gt;Meteor.npmRequire()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let’s get some &lt;code class=&quot;highlighter-rouge&quot;&gt;gists&lt;/code&gt; using the &lt;code class=&quot;highlighter-rouge&quot;&gt;github&lt;/code&gt; npm module.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var Github = Meteor.npmRequire('github');
var github = new Github();

github.gists.getFromUser({user: 'arunoda'}, function(err, gists) {
  console.log(gists);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Meteor.npmRequire()&lt;/code&gt; does not comes with the &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; package you’ve installed via &lt;code class=&quot;highlighter-rouge&quot;&gt;mrt&lt;/code&gt;. If so, please use &lt;code class=&quot;highlighter-rouge&quot;&gt;Meteor.require()&lt;/code&gt; instead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;using-npm-modules-within-meteor-apis&quot;&gt;Using npm modules within Meteor APIs&lt;/h2&gt;

&lt;p&gt;Meteor server side API’s are executed synchronously. But most of the npm modules work asynchronously. Although we can load NPM modules to meteor, it is so hard to use them inside Meteor APIs like methods, publications, permissions.&lt;/p&gt;

&lt;p&gt;This is not a very big problem. I could be able to fix this by building a set of &lt;a href=&quot;https://github.com/arunoda/meteor-npm#async-utilities&quot;&gt;Async Utilities&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;See the following example where I used a npm module inside a Meteor Method&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (Meteor.isClient) {
  getGists = function getGists(user, callback) {
    Meteor.call('getGists', user, callback);
  }
}

if (Meteor.isServer) {
  var GithubApi = Meteor.npmRequire('github');
  var github = new GithubApi({
      version: &quot;3.0.0&quot;
  });

  Meteor.methods({
    'getGists': function getGists(user) {
      var gists = Async.runSync(function(done) {
        github.gists.getFromUser({user: 'arunoda'}, function(err, data) {
          done(null, data);
        });
      });

      return gists.result;
    }
  });
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;using-meteor-bundle-and-demeteorizer&quot;&gt;Using meteor bundle and &lt;a href=&quot;https://github.com/onmodulus/demeteorizer&quot;&gt;demeteorizer&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Modules you’ve added will be included in the bundled version(&lt;code class=&quot;highlighter-rouge&quot;&gt;meteor bundle&lt;/code&gt;) automatically.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;But if you’ve used a binary npm module, you need to re-install it manually. Just like you are doing it with &lt;code class=&quot;highlighter-rouge&quot;&gt;fibers&lt;/code&gt;.&lt;br /&gt;
If you are using &lt;code class=&quot;highlighter-rouge&quot;&gt;demeteorizer&lt;/code&gt;, then there is no problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;meteor-is-now-open-for-30000-npm-modules&quot;&gt;Meteor is now open for 30000+ npm modules&lt;/h2&gt;

&lt;p&gt;Today I bring 30000+ packages(modules) to Meteor. Use them and share your thoughts. I’m always open minded for new ideas.&lt;/p&gt;
</description>
      <link>http://localhost:4000/complete-npm-integration-for-meteor</link>
      <guid isPermaLink="true">http://localhost:4000/complete-npm-integration-for-meteor</guid>
      <pubDate>2013-06-15 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Load Balancing Your Meteor App</title>
      <description>&lt;p&gt;In this article, I’ll show you how to load balance a Meteor app in few different ways. Before that, let’s learn a bit about Meteor.&lt;/p&gt;

&lt;h2 id=&quot;how-meteor-works&quot;&gt;How meteor works&lt;/h2&gt;

&lt;p&gt;We develop meteor apps without worrying too much about the client server architecture. But at the end, meteor is another client server app. It has a part runs on the browser, and a part runs on the server. And there is a communication channel between the two. This is the same way how Gmail, Google Docs and so many other apps work.&lt;/p&gt;

&lt;p&gt;When we are running a meteor app with a cluster of nodes, we need to load balance connections between the client and server correctly. Technically what we have to do is to load balance a set of websocket and SockJs connections.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/WebSocket&quot;&gt;Websocket&lt;/a&gt; is a part of the HTML5 specification, which makes it is possible to established a direct connection between the server and the client. Due to several reasons, availability of websocket cannot be guaranteed every time. So we need a way to communicate in those situations. That is when &lt;a href=&quot;https://github.com/sockjs&quot;&gt;SockJS&lt;/a&gt; comes in to the table as a websocket emulation layer. It is a set of techniques which allows you to do websocket like communication between the server and the client.&lt;/p&gt;

&lt;h2 id=&quot;lets-scale&quot;&gt;Let’s scale&lt;/h2&gt;

&lt;p&gt;Okay! Now we know what to scale, then lets discuss  how to scale. Our Ideal load balancer much fulfill these requirements.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It needs to support websocket&lt;/li&gt;
  &lt;li&gt;It should support &lt;a href=&quot;http://wiki.metawerx.net/wiki/StickySessions&quot;&gt;sticky-sessions&lt;/a&gt; which needs by SockJS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basically, there are two ways we can do this, either use some cloud service provider, or do it yourself. I will discuss about the both here.&lt;/p&gt;

&lt;h3 id=&quot;load-balancing-meteor-with-cloud-service-providers&quot;&gt;Load balancing meteor with cloud service providers&lt;/h3&gt;

&lt;p&gt;If you choose this path, you will have to deploy your app (with the meteor cluster) on their infrastructure. That is not so uncommon these days. Let’s start analyzing these services.&lt;/p&gt;

&lt;h4 id=&quot;modulus&quot;&gt;&lt;a href=&quot;http://modulus.io/&quot;&gt;Modulus&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Modulus is technically equivalent to Nodejitsu, but they are quite new. They are the people behind popular &lt;a href=&quot;https://github.com/OnModulus/demeteorizer&quot;&gt;demeteorizer&lt;/a&gt; tool, which converts a meteor app into a standard nodejs app.&lt;/p&gt;

&lt;h4 id=&quot;aws-elastic-load-balancer-elb&quot;&gt;&lt;a href=&quot;http://aws.amazon.com/elasticloadbalancing/&quot;&gt;AWS Elastic Load Balancer (ELB)&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;If you try to load balance your app using ELB, you are in bit trouble. ELB natively does not support websocket, but it does support Sticky Sessions. There is a way we can turn on websocket with the TCP mode, but then it drops Sticky Session support. If you decide to go with ELB try following.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enable HTTP load balancing with Sticky Session on Port 80&lt;/li&gt;
  &lt;li&gt;Enable TCP load balancing on Port 8080, which allows websocket&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default client connects to port 80 and it allows SockJS to works fine. You can also ask clients to use port 8080 if they have websocket. (have to do it manually)&lt;/p&gt;

&lt;h4 id=&quot;heroku&quot;&gt;&lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Heroku supports websockets but not Sticky Sessions.&lt;/p&gt;

&lt;h2 id=&quot;implement-a-load-balancer-yourself&quot;&gt;Implement a load balancer yourself&lt;/h2&gt;

&lt;p&gt;Let’s discuss  implementing a load balancer which supports both Sticky Sessions and websocket. This is not so difficult as it seems.&lt;/p&gt;

&lt;h3 id=&quot;use-cluster&quot;&gt;Use Cluster&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://meteorhacks.com/cluster-a-different-kind-of-load-balancer-for-meteor.html&quot;&gt;Cluster&lt;/a&gt; is a very interesting load balancer which resides on your app. It can automatically discovery new server instances. It’s specifically designed for Meteor so, you don’t need to worry much about configuring it. It also has multi-core support.&lt;/p&gt;

&lt;p&gt;Even though it does a lot, it’s a simple Meteor &lt;a href=&quot;https://github.com/meteorhacks/cluster&quot;&gt;package&lt;/a&gt;. Just add it your app and that’s all you’ve to.&lt;/p&gt;

&lt;p&gt;Follow this articles for More Information:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://meteorhacks.com/cluster-a-different-kind-of-load-balancer-for-meteor.html&quot;&gt;Meteor Cluster - A Different Kind of Load Balancer for Meteor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://meteorhacks.com/cluster-performance-test-its-impressive.html&quot;&gt;Meteor Cluster Performance Test&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://meteorhacks.com/introducing-multi-core-support-for-meteor.html&quot;&gt;Introducing Multi-Core Support for Meteor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;use-nginx-or-haproxy&quot;&gt;Use &lt;a href=&quot;http://wiki.nginx.org/Main&quot;&gt;Nginx&lt;/a&gt; or &lt;a href=&quot;http://haproxy.1wt.eu/&quot;&gt;HAProxy&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Both tools are identical when it’s comes to load balancing. They do support both of our requirements. Configuration is also not so difficult. But if you need to add and remove meteor nodes with the load(auto scaling), you have do some work.&lt;/p&gt;
</description>
      <link>http://localhost:4000/load-balancing-your-meteor-app</link>
      <guid isPermaLink="true">http://localhost:4000/load-balancing-your-meteor-app</guid>
      <pubDate>2013-06-11 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Extending Meteor Accounts (login system)</title>
      <description>&lt;p&gt;Meteor has a really good user authentication system called &lt;a href=&quot;http://docs.meteor.com/#accounts_api&quot;&gt;Accounts&lt;/a&gt;. It is so powerful and has built in support for login using password, facebook, twitter and few other oauth providers. Another important fact is that Meteor Accounts is tightly coupled with core meteor services to provide great level of security.&lt;/p&gt;

&lt;p&gt;Okay, what if you want to add a custom authentication method? There is not much information out there for you to build such. So I began hacking into &lt;a href=&quot;http://goo.gl/PfIvj&quot;&gt;Meteor Accounts system&lt;/a&gt;. It was written pretty well and I found that adding a custom authentication method is also pretty simple. Let’s find out how.&lt;/p&gt;

&lt;p&gt;In this tutorial I’ll be creating a custom authentication system for &lt;strong&gt;administration purpose&lt;/strong&gt; of our meteor app.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;This is not a properly implemented authentication system, but only used for demonstration purpose.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;first-we-need-a-sample-app&quot;&gt;First we need a sample app&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Create a meteor app with &lt;code class=&quot;highlighter-rouge&quot;&gt;meteor create admin&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;accounts-ui&lt;/code&gt; package with &lt;code class=&quot;highlighter-rouge&quot;&gt;meteor add accounts-ui&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;modify &lt;code class=&quot;highlighter-rouge&quot;&gt;admin.html&lt;/code&gt; with following code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;we simple add &lt;code class=&quot;highlighter-rouge&quot;&gt;loginButtons&lt;/code&gt; helper from the &lt;code class=&quot;highlighter-rouge&quot;&gt;account-ui&lt;/code&gt; package&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/arunoda/08389b0250cd6e6eb788.js&quot;&gt;
&lt;/script&gt;

&lt;p&gt;Now, when you start you app you’ll see something like below. (dont worry about the message in red)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/GNOR8BK.png&quot; alt=&quot;our sample app with accounts-ui&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;lets-add-the-login-handler&quot;&gt;Let’s add the login handler&lt;/h2&gt;

&lt;p&gt;Now we need to register a login handler for our admin authentication system. This is a server side functionality, so create following content in &lt;code class=&quot;highlighter-rouge&quot;&gt;server/admin.js&lt;/code&gt;. See comments for more information.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Accounts.registerLoginHandler(function(loginRequest) {
  //there are multiple login handlers in meteor. 
  //a login request go through all these handlers to find it's login hander
  //so in our login handler, we only consider login requests which has admin field
  if(!loginRequest.admin) {
    return undefined;
  }

  //our authentication logic :)
  if(loginRequest.password != 'admin-password') {
    return null;
  }
  
  //we create a admin user if not exists, and get the userId
  var userId = null;
  var user = Meteor.users.findOne({username: 'admin'});
  if(!user) {
    userId = Meteor.users.insert({username: 'admin'});
  } else {
    userId = user._id;
  }

  //send loggedin user's user id
  return {
    id: userId
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;now we are done with our basic loginHandler.&lt;/p&gt;

&lt;h2 id=&quot;lets-add-client-side-login-function&quot;&gt;Let’s add client side login function&lt;/h2&gt;

&lt;p&gt;Add following content to a file, named &lt;code class=&quot;highlighter-rouge&quot;&gt;client/admin.js&lt;/code&gt;. see comments in the code.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Meteor.loginAsAdmin = function(password, callback) {
  //create a login request with admin: true, so our loginHandler can handle this request
  var loginRequest = {admin: true, password: password};

  //send the login request
  Accounts.callLoginMethod({
    methodArguments: [loginRequest],
    userCallback: callback
  });
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we’ve added our admin login system. Just call &lt;code class=&quot;highlighter-rouge&quot;&gt;loginAsAdmin&lt;/code&gt; method in the browser console. You’ll see admin user has logged in.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//call following in the browser console.
Meteor.loginAsAdmin('admin-password');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/jEa7ZJW.png&quot; alt=&quot;'user logged as admin'&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;lets-try-to-refresh-the-browser&quot;&gt;Let’s try to refresh the browser&lt;/h2&gt;

&lt;p&gt;Once you refresh the browser, you’ll see that admin user is no longer logged in. That’s because we didn’t add resume token functionality to our handler.&lt;/p&gt;

&lt;p&gt;Let’s update our loginHandler with following code to add a resume token.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Accounts.registerLoginHandler(function(loginRequest) {
  if(!loginRequest.admin) {
    return undefined;
  }

  if(loginRequest.password != 'admin-password') {
    return null;
  }
  
  var userId = null;
  var user = Meteor.users.findOne({username: 'admin'});
  if(!user) {
    userId = Meteor.users.insert({username: 'admin'});
  } else {
    userId = user._id;
  }

  //creating the token and adding to the user
  var stampedToken = Accounts._generateStampedLoginToken();
  //hashing is something added with Meteor 0.7.x, 
  //you don't need to do hashing in previous versions
  var hashStampedToken = Accounts._hashStampedToken(stampedToken);
  
  Meteor.users.update(userId, 
    {$push: {'services.resume.loginTokens': hashStampedToken}}
  );

  //sending token along with the userId
  return {
    id: userId,
    token: stampedToken.token
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This updated code will fix the problem.&lt;/p&gt;

&lt;p&gt;So let’s review what’ve done.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We were trying to create a administration login system for our app&lt;/li&gt;
  &lt;li&gt;Then, we added the loginHandler for that&lt;/li&gt;
  &lt;li&gt;We added a client side function to invoke the login request too&lt;/li&gt;
  &lt;li&gt;Finally we added a refresh token&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can checkout &lt;a href=&quot;https://github.com/arunoda/meteor-custom-authentication-system&quot;&gt;this application&lt;/a&gt; from Github&lt;/p&gt;

&lt;p&gt;Isn’t it is easy to add a new authentication system/method in meteor? Just let me know your thoughts.&lt;/p&gt;
</description>
      <link>http://localhost:4000/extending-meteor-accounts</link>
      <guid isPermaLink="true">http://localhost:4000/extending-meteor-accounts</guid>
      <pubDate>2013-06-07 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Travis CI support for Meteor Packages</title>
      <description>&lt;p&gt;Before talking anything, have you ever seen following red and green images? (may be on github)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/sFaJmub.png&quot; alt=&quot;Build Passing&quot; /&gt;
&lt;img src=&quot;http://i.imgur.com/Xgw4oal.png&quot; alt=&quot;Build Failing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;They show the project’s build status in &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt;. Travis CI is a free cloud service for OpenSource projects(on github) to build their tests on each and every commit. It is &lt;a href=&quot;http://about.travis-ci.org/docs/user/ci-environment/&quot;&gt;full featured&lt;/a&gt; and you can test nearly anything. It has support for popular databases, message queues, compilers, browsers and so many other tools.&lt;/p&gt;

&lt;p&gt;Travis CI has also available for most of the languages and frameworks out there. But unfortunately there is no official support for Meteor yet!.&lt;/p&gt;

&lt;h2 id=&quot;why-we-need-travis-ci-for-meteor&quot;&gt;Why we need Travis CI for meteor?&lt;/h2&gt;

&lt;p&gt;Good question! It is not very important to have travis support for Meteor Apps, since most of the apps won’t be release as Open Source.&lt;/p&gt;

&lt;p&gt;But we really need travis support for Meteor Packages. Specially &lt;a href=&quot;https://atmosphere.meteor.com/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;atmosphere&lt;/code&gt;&lt;/a&gt; smart packages installed using &lt;a href=&quot;https://github.com/oortcloud/meteorite&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;meteorite&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With travis, it encourages developers to write more tests(using &lt;a href=&quot;http://goo.gl/W203h&quot;&gt;tinytest&lt;/a&gt;) and users to use third party packages with confidence.&lt;/p&gt;

&lt;p&gt;So I began hacking into Travis CI and more deeply into Meteor. I was able to extend travis to support for Meteor Packages. And the best part is, all you(package developers) have to do is simply add a single file to your package!&lt;/p&gt;

&lt;h2 id=&quot;adding-travis-support&quot;&gt;Adding travis support&lt;/h2&gt;

&lt;p&gt;Add following file to your meteor package as &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;language: node_js
node_js:
  - &quot;0.10&quot;
before_install:
  - &quot;curl -L http://git.io/ejPSng | /bin/sh&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Login to &lt;a href=&quot;https://travis-ci.org&quot;&gt;https://travis-ci.org&lt;/a&gt; with Github and navigate to &lt;a href=&quot;https://travis-ci.org/profile&quot;&gt;https://travis-ci.org/profile&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enable travis support for your project listed there.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/JY9o3xm.png&quot; alt=&quot;Meteor Cluster - Travis Support&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-next&quot;&gt;What next&lt;/h2&gt;

&lt;p&gt;Currently travis builds your package against the latest meteor release (0.6.3.1 at the moment of writing the article). There are plans to configure meteor versions manually and support multiple meteor version. Patches are welcome :)&lt;/p&gt;

&lt;iframe src=&quot;http://ghbtns.com/github-btn.html?user=arunoda&amp;amp;repo=travis-ci-meteor-packages&amp;amp;type=watch&amp;amp;count=true&amp;amp;size=large&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; scrolling=&quot;0&quot; width=&quot;125px&quot; height=&quot;30px&quot;&gt;
&lt;/iframe&gt;
&lt;iframe src=&quot;http://ghbtns.com/github-btn.html?user=arunoda&amp;amp;repo=travis-ci-meteor-packages&amp;amp;type=fork&amp;amp;count=true&amp;amp;size=large&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; scrolling=&quot;0&quot; width=&quot;152px&quot; height=&quot;30px&quot;&gt;
&lt;/iframe&gt;

&lt;ul&gt;
  &lt;li&gt;See more options to configure travis: &lt;a href=&quot;http://goo.gl/UYUo7&quot;&gt;http://goo.gl/UYUo7&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Look at my meteor cluster package as a sample: &lt;a href=&quot;http://goo.gl/8gjGi&quot;&gt;http://goo.gl/8gjGi&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Submit your issues and suggestions: &lt;a href=&quot;http://goo.gl/2CcnV&quot;&gt;http://goo.gl/2CcnV&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <link>http://localhost:4000/travis-ci-support-for-meteor-packages</link>
      <guid isPermaLink="true">http://localhost:4000/travis-ci-support-for-meteor-packages</guid>
      <pubDate>2013-06-05 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Meteor Cluster - Introduction &amp; how it works</title>
      <description>&lt;blockquote&gt;

  &lt;p&gt;Update: &lt;br /&gt; Now there is better way to &lt;a href=&quot;http://meteorhacks.com/lets-scale-meteor.html&quot;&gt;scale meteor&lt;/a&gt; using Smart Collections with the mongodb oplog.
&lt;a href=&quot;http://meteorhacks.com/lets-scale-meteor.html&quot;&gt;See More&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Meteor Core teams’ current focus is to make meteor more developer friendly, which is really good. They have some plans to support multi-node meteor apps in the future, but we are not sure about the exact timeline yet. So if we want to build/scale meteor apps with multiple nodes, we need to find a way ourself.&lt;/p&gt;

&lt;p&gt;When we are trying to scale meteor horizontally and run multi-node meteor app, we need to solve 2 major issues.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We need to load balance, WebSockets/SockJS connections to our meteor nodes correctly&lt;/li&gt;
  &lt;li&gt;We need to sync mongodb write operations across all the meteor nodes&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here we are only focusing on syncing mongodb write operations and load balancing can be done later or simply we can just rely on someone else for it. (we’ll discuss more about this later)&lt;/p&gt;

&lt;h2 id=&quot;introducing-meteor-cluster&quot;&gt;Introducing Meteor Cluster&lt;/h2&gt;

&lt;p&gt;Meteor Cluster is a &lt;a href=&quot;https://atmosphere.meteor.com/package/cluster&quot;&gt;smart package&lt;/a&gt; which sync mongodb write operations across all the meteor nodes. It uses &lt;a href=&quot;http://redis.io/topics/pubsub&quot;&gt;Redis Pub/Sub&lt;/a&gt; to communicate between meteor nodes. Let’s try Meteor Cluster.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download and install &lt;a href=&quot;http://redis.io&quot;&gt;Redis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;redis-server&lt;/code&gt; in your local machine&lt;/li&gt;
  &lt;li&gt;Install &lt;code class=&quot;highlighter-rouge&quot;&gt;cluster&lt;/code&gt; &lt;a href=&quot;https://atmosphere.meteor.com/package/cluster&quot;&gt;smart package&lt;/a&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;mrt add cluster&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Install and Run &lt;a href=&quot;http://www.mongodb.org/&quot;&gt;mongodb&lt;/a&gt; instance&lt;/li&gt;
  &lt;li&gt;Add following code to your app&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Posts, Notifications, Comments&lt;/code&gt; are Meteor Collections which needs to be synced with the cluster. Replace them accordingly.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Meteor.startup(function() {
    Meteor.Cluster.init(); //assumes you are running a redis-server locally
    Meteor.Cluster.sync(Posts, Notifications, Comments); //replace with your collections
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now run 2 meteor nodes with following command.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MONGO_URL=mongodb://localhost/meteor mrt --port 8090&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MONGO_URL=mongodb://localhost/meteor mrt --port 8091&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now you’ve a Meteor Cluster of 2 nodes. Visit &lt;a href=&quot;http://localhost:8091&quot;&gt;http://localhost:8091&lt;/a&gt; and &lt;a href=&quot;http://localhost:8091&quot;&gt;http://localhost:8092&lt;/a&gt; in separate browsers and see how it works.&lt;/p&gt;

&lt;h3 id=&quot;see-this-demo-video-on-youtube&quot;&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=12NkUJEdFCw&amp;amp;feature=youtu.be&quot;&gt;See this demo video on YouTube&lt;/a&gt;&lt;/h3&gt;

&lt;h2 id=&quot;how-does-meteor-cluster-work&quot;&gt;How does Meteor Cluster work?&lt;/h2&gt;

&lt;p&gt;Although Meteor Cluster solves a huge problem, it’s code base is very small. You check it out on &lt;a href=&quot;https://github.com/arunoda/meteor-cluster&quot;&gt;Github&lt;/a&gt; and it is releases under MIT License.&lt;/p&gt;

&lt;iframe src=&quot;http://ghbtns.com/github-btn.html?user=arunoda&amp;amp;repo=meteor-cluster&amp;amp;type=watch&amp;amp;count=true&amp;amp;size=large&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; scrolling=&quot;0&quot; width=&quot;125px&quot; height=&quot;30px&quot;&gt;
&lt;/iframe&gt;
&lt;iframe src=&quot;http://ghbtns.com/github-btn.html?user=arunoda&amp;amp;repo=meteor-cluster&amp;amp;type=fork&amp;amp;count=true&amp;amp;size=large&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; scrolling=&quot;0&quot; width=&quot;152px&quot; height=&quot;30px&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;Let’s discuss how meteor cluster works. Imagine our demo meteor app is a Group Chat.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We have 2 meteor nodes - (A and B)&lt;/li&gt;
  &lt;li&gt;They are connected to Redis via Meteor Cluster and listening for write operations&lt;/li&gt;
  &lt;li&gt;We have 2 users (Tom and Jerry)&lt;/li&gt;
  &lt;li&gt;Tom is connected to A and Jerry is connected to B&lt;/li&gt;
  &lt;li&gt;When Tom sends a message (insert operation), &lt;code class=&quot;highlighter-rouge&quot;&gt;cluster&lt;/code&gt; detects that and send it to Redis&lt;/li&gt;
  &lt;li&gt;Then Redis forward it to other nodes, in our case B&lt;/li&gt;
  &lt;li&gt;B applies that write operation and it detects there is a new message&lt;/li&gt;
  &lt;li&gt;Then B simply send that message to Jerry&lt;/li&gt;
  &lt;li&gt;This process happens under few milli-seconds&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;does-this-duplicate-my-write-operations&quot;&gt;Does this duplicate my write operations?&lt;/h3&gt;

&lt;p&gt;It seems like we are applying the insert operation in two places, which should cause database collisions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No. its not like that. There won’t be any collisions and this is completely safe. Here is what is exactly happens when applying the write operation.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For &lt;code class=&quot;highlighter-rouge&quot;&gt;insert&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt; operations cluster update the db with a &lt;a href=&quot;http://goo.gl/hS9cx&quot;&gt;empty object&lt;/a&gt; which has no effect to the db&lt;/li&gt;
  &lt;li&gt;But meteor, detects it and synced with the database&lt;/li&gt;
  &lt;li&gt;For &lt;code class=&quot;highlighter-rouge&quot;&gt;remove&lt;/code&gt; operation we simply apply it&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;deploy-an-app-with-meteor-cluster&quot;&gt;Deploy an app with Meteor Cluster&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://meteor-cluster.jit.su&quot;&gt;This Demo Meteor App&lt;/a&gt; runs with 3 node Meteor Cluster. App is hosted on &lt;a href=&quot;nodejitsu.com&quot;&gt;Nodejitsu&lt;/a&gt; and using &lt;a href=&quot;http://redis-cloud.com/&quot;&gt;Redis Cloud&lt;/a&gt; as the hosted redis server. Nodejitsu can do the load balancing for our multi-node meteor app.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s try to deploy an multi-node meteor app to a PAAS provider. Yes you can deploy it to your own hardware too.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First you need to make your meteor app into a standard nodejs app&lt;/li&gt;
  &lt;li&gt;You can use &lt;a href=&quot;https://github.com/OnModulus/demeteorizer&quot;&gt;Demeteorizer&lt;/a&gt; to do that&lt;/li&gt;
  &lt;li&gt;Now this is standard nodejs app, which can be deployed very easily&lt;/li&gt;
  &lt;li&gt;Make sure your PAAS provider support WebSockets and Sticky Sessions&lt;/li&gt;
  &lt;li&gt;Provision a cloud mongodb database (try MongoHQ or MongoLab)&lt;/li&gt;
  &lt;li&gt;Provision a cloud redis server (try Redis Cloud or Redistogo)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;set following &lt;strong&gt;Environment Variables&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MONGO_URL=&quot;mongodb://user:pass@host:port&quot;
CLUSTER_URL=&quot;redis://redis:pass@host:port&quot; 
ROOT_URL=&quot;http://yourdomainname.com&quot;
PORT=80 #check with your PAAS provider
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now simply deploy and add few nodes to your app, and you have a full functioning Meteor Cluster.&lt;/p&gt;

&lt;h2 id=&quot;production-usage&quot;&gt;Production Usage&lt;/h2&gt;

&lt;p&gt;One of my contractor uses Meteor Cluster for a production app. We have done a stress test with 8 node meteor cluster with self hosted mongodb and redis. It performs really well under the load. Unfortunately I cannot disclose exact numbers.&lt;/p&gt;

&lt;p&gt;If you have any queries about Meteor Cluster and wanna know about more. Just ping me via &lt;a href=&quot;http://twitter.com/arunoda&quot;&gt;@arunoda&lt;/a&gt;&lt;/p&gt;

</description>
      <link>http://localhost:4000/meteor-cluster-introduction-and-how-it-works</link>
      <guid isPermaLink="true">http://localhost:4000/meteor-cluster-introduction-and-how-it-works</guid>
      <pubDate>2013-06-02 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    

  </channel>
</rss>
