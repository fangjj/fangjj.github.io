<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pro Meteor - Production Users' Guide To Meteor</title>
    <description>Production Users' Guide To Meteor</description>
    <link>http://localhost:4000/pro-meteor/</link>
    <language>en</language>
    <copyright>meteorhacks.com</copyright>
    <pubDate>Thu, 24 Sep 2015 00:00:00 +0800</pubDate>
    <lastBuildDate>Thu, 24 Sep 2015 00:00:00 +0800</lastBuildDate>
    <ttl>30</ttl>
    <atom:link href="http://localhost:4000/pro-meteor/rss.xml" rel="self" type="application/rss+xml" />
    <image>
      <title>Pro Meteor - Production Users' Guide To Meteor</title>
      <description>Production Users' Guide To Meteor</description>
      <link>http://localhost:4000/pro-meteor/</link>
    </image>

    
    <item>
      <title>MongoDB Oplog and Meteor</title>
      <description><p>Meteor is one of the few frameworks to use MongoDB oplog even though oplog is not an official MongoDB API. So this article is for Meteor developers. I’d like to show what oplog is and explain the ways to add oplog support to a Meteor app.</p>

<p>So, let’s begin.</p>

<h2 id="mongodb-replica-set">MongoDB Replica Set</h2>

<p>Before we learn about oplog, we need to have a word about <a href="http://docs.mongodb.org/manual/replication/">Replica Set</a>. Replica Set is MongoDB’s replication strategy to address high availability. It’s a good idea to deploy a Replica Set for any production MongoDB deployment. (I’ll talk more about setting up a Replica Set at the end of this article.)</p>

<p>Replica Set comprises  one or many MongoDB servers (nodes) replicating the same set of data. It is recommend to run a Replica Set of at least 3 nodes. But a Replica Set should not contain more than <a href="http://docs.mongodb.org/manual/reference/limits/#Number-of-Members-of-a-Replica-Set">12 nodes</a>.</p>

<p>One node acts as the Primary and others are known as Secondaries. Primary election is fully automatic and if the current Primary goes down, a new “Primary” will be elected from the Secondaries. But there are many more options to customize the default behavior.</p>

<p>Write operations can be directed to Primary only, but you can read from any node. If you read from a Secondary, you may get data that is inconsistent with the Primary data.</p>

<p>As I mentioned earlier, Replica Sets are used mainly for high availability. But some people use Replica Sets for backups and doing background analytic jobs using Secondaries.</p>

<h2 id="what-is-oplog">What is Oplog</h2>

<p>Oplog is the heart of a MongoDB Replica Set. It’s a stream of all the write operations happening inside the Primary. Actually, oplog is a <a href="http://docs.mongodb.org/manual/core/capped-collections/">capped collection</a> named <code class="highlighter-rouge">oplog.rs</code>, located on the <code class="highlighter-rouge">local</code> database. It’s created for you automatically when initializing the Replica Set.</p>

<p>Capped collections can be tailed (with queries) and monitored for new additions. So, it can be used as a stream. That’s what exactly Secondaries do. They are tailing oplog on the “Primary” and make a copy of that while applying write operations(entries in the oplog) into the data that Secondary maintains. That’s how Secondaries keep updated with the Primary.</p>

<p>Here are some sample oplog entries.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// oplog entry for an insert into `migration` collection of `meteor` db</span>
<span class="p">{</span>
  <span class="s2">"ts"</span> <span class="p">:</span> <span class="nx">Timestamp</span><span class="p">(</span><span class="mi">1410449923</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span>
  <span class="s2">"h"</span> <span class="p">:</span> <span class="nx">NumberLong</span><span class="p">(</span><span class="s2">"-4512221085505246164"</span><span class="p">),</span>
  <span class="s2">"v"</span> <span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
  <span class="s2">"op"</span> <span class="p">:</span> <span class="s2">"i"</span><span class="p">,</span>
  <span class="s2">"ns"</span> <span class="p">:</span> <span class="s2">"meteor.migrations"</span><span class="p">,</span>
  <span class="s2">"o"</span> <span class="p">:</span> <span class="p">{</span>
    <span class="s2">"name"</span> <span class="p">:</span> <span class="s2">"updatePostStatus"</span><span class="p">,</span>
    <span class="s2">"startedAt"</span> <span class="p">:</span> <span class="nx">ISODate</span><span class="p">(</span><span class="s2">"2014-09-11T15:38:43.339Z"</span><span class="p">),</span>
    <span class="s2">"completed"</span> <span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="s2">"_id"</span> <span class="p">:</span> <span class="s2">"ANbayNsv5kndqmFu2"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// oplog entry for an update operation</span>
<span class="p">{</span>
    <span class="s2">"ts"</span> <span class="p">:</span> <span class="nx">Timestamp</span><span class="p">(</span><span class="mi">1411545181</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
    <span class="s2">"h"</span> <span class="p">:</span> <span class="nx">NumberLong</span><span class="p">(</span><span class="s2">"369441830544009581"</span><span class="p">),</span>
    <span class="s2">"v"</span> <span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="s2">"op"</span> <span class="p">:</span> <span class="s2">"u"</span><span class="p">,</span>
    <span class="s2">"ns"</span> <span class="p">:</span> <span class="s2">"meteor.migrations"</span><span class="p">,</span>
    <span class="s2">"o2"</span> <span class="p">:</span> <span class="p">{</span>
        <span class="s2">"_id"</span> <span class="p">:</span> <span class="s2">"ANbayNsv5kndqmFu2"</span>
    <span class="p">},</span>
    <span class="s2">"o"</span> <span class="p">:</span> <span class="p">{</span>
        <span class="s2">"$set"</span> <span class="p">:</span> <span class="p">{</span>
            <span class="s2">"completed"</span> <span class="p">:</span> <span class="kc">true</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// oplog entry for a delete operation</span>
<span class="p">{</span>
    <span class="s2">"ts"</span> <span class="p">:</span> <span class="nx">Timestamp</span><span class="p">(</span><span class="mi">1411545191</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
    <span class="s2">"h"</span> <span class="p">:</span> <span class="nx">NumberLong</span><span class="p">(</span><span class="s2">"3472940282940006216"</span><span class="p">),</span>
    <span class="s2">"v"</span> <span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="s2">"op"</span> <span class="p">:</span> <span class="s2">"d"</span><span class="p">,</span>
    <span class="s2">"ns"</span> <span class="p">:</span> <span class="s2">"meteor.migrations"</span><span class="p">,</span>
    <span class="s2">"b"</span> <span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"o"</span> <span class="p">:</span> <span class="p">{</span>
        <span class="s2">"_id"</span> <span class="p">:</span> <span class="s2">"ANbayNsv5kndqmFu2"</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// oplog entry for a dropCollection command</span>
<span class="p">{</span>
    <span class="s2">"ts"</span> <span class="p">:</span> <span class="nx">Timestamp</span><span class="p">(</span><span class="mi">1411545320</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
    <span class="s2">"h"</span> <span class="p">:</span> <span class="nx">NumberLong</span><span class="p">(</span><span class="s2">"-2565024453394063511"</span><span class="p">),</span>
    <span class="s2">"v"</span> <span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="s2">"op"</span> <span class="p">:</span> <span class="s2">"c"</span><span class="p">,</span>
    <span class="s2">"ns"</span> <span class="p">:</span> <span class="s2">"meteor.$cmd"</span><span class="p">,</span>
    <span class="s2">"o"</span> <span class="p">:</span> <span class="p">{</span>
        <span class="s2">"drop"</span> <span class="p">:</span> <span class="s2">"migrations"</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>By default, oplog takes 5% of the disk size available for the MongoDB. But you can change that via the <a href="http://docs.mongodb.org/manual/core/replica-set-oplog/#replica-set-oplog-sizing">–oplogSize</a> option.</p>

<h2 id="how-meteor-uses-oplog">How Meteor uses Oplog</h2>

<p><img src="https://cldup.com/pxqhOiXKm9.png" alt="How Meteor uses Oplog" /></p>

<p>Meteor’s default observe driver is based on polling and that makes Meteor super-slow and causes it to consume a lot of server resources. As a solution for that, Meteor uses oplog to detect data changes and trigger observers. Using oplog to trigger observers is very efficient compared to the polling approach.</p>

<p>Meteor acts like a Secondary in the sense that it is tailing the oplog of the Primary. Meteor keeps a cache of data inside the memory and applies changes while triggering observers.</p>

<p>Don’t worry. Meteor won’t cache all the data comes through the oplog, just the data relevant to observers.</p>

<p>Actually, most of the work is done on the Meteor framework itself and you simply need to ask Meteor to enable oplog support.</p>

<p>For that, you need to set the following <code class="highlighter-rouge">MONGO_OPLOG_URL</code> environmental variable, pointing to the Mongo url of your Replica Set’s <code class="highlighter-rouge">local</code> db. Here is an example:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MONGO_OPLOG_URL=mongodb://user:pass@host1:port,host2:port,host3:port/local
</code></pre></div></div>

<p>Keep in mind that oplog contains changes for all the DBs available in your Replica Set. By contrast, Meteor only tails changes for the db you’ve specified via the <code class="highlighter-rouge">MONGO_URL</code>. So <code class="highlighter-rouge">MONGO_URL</code> and <code class="highlighter-rouge">MONGO_OPLOG_URL</code> should point to the same Replica Set.</p>

<h3 id="keep-in-mind">Keep in Mind</h3>

<p>Even though oplog makes your Meteor app faster in general, it might make things <a href="https://groups.google.com/d/msg/meteor-talk/Y547Hh2z39Y/Sp3Z4hGlE-sJ">worst</a>. In its current version, Meteor is tailing all the data changes happening in your DB. So, Meteor will receive all the data changes for the db whether you really need them or not. Because of that, if you have a lot of writes in your DB that do not trigger any observers you might be in trouble. Some examples of this are offline pre-aggregations and writes from other apps.</p>

<p>Right now, the only available solution is to move those collections into a separate database until Meteor implements a <a href="https://groups.google.com/forum/#!topic/meteor-core/RpTxiGPUhMw">fix</a>.</p>

<h3 id="optimize-your-queries-for-oplog">Optimize Your Queries for Oplog</h3>

<p>Normally, most of your queries can work with oplog without additional steps. But you will need to do some tweaks for some of them. To learn which queries require additional steps —and how to implement them— you can refer this Kadira Academy article on <a href="https://kadira.io/academy/optimize-your-app-for-oplog/">Optimize Your Meteor App for Oplog</a></p>

<p><a href="https://kadira.io/academy/optimize-your-app-for-oplog/"><img src="https://i.cloudup.com/FA2NrHshgj.png" alt="Meteor Oplog and Kadira" /></a></p>

<h2 id="how-to-deploy-a-replica-set">How to Deploy a Replica Set.</h2>

<p>Now we know about MongoDB oplog and how it works with Meteor. But deploying a production- ready MongoDB Replica Set is not that simple. And if you’ve successfully deployed a Replica Set, managing it is not a trivial task.</p>

<p>That’s why I recommend some cloud solutions like <a href="https://blog.compose.io/meteor-the-oplog-and-elastic-deployment/">compose.io</a> or <a href="http://blog.mongolab.com/2014/07/tutorial-scaling-meteor-with-mongodb-oplog-tailing/">mongolab</a> to deploy your Replica Set. They offer very affordable plans now.</p>

<p>If you are still looking to deploy on your own, I recommend following official MongoDB tutorials on <a href="http://docs.mongodb.org/manual/administration/replica-set-deployment/">Replica Set deployment</a>.</p>

<hr />

<p>If you’d like to learn more about how Meteor uses oplog internally or how Meteor makes MongoDB real-time, read my book <a href="https://gumroad.com/l/meteor-explained">Meteor Explained</a>. I’ve just completed the chapter on “MongoDB and Meteor.”</p>

<p><a href="https://gum.co/meteor-explained"><img src="https://i.cloudup.com/XebhBZYIMN.png" alt="Meteor Explained Book Cover" /></a></p>

<blockquote>
  <p><strong>All main chapters</strong> are available right now.</p>

  <p>This book comes with a <strong>100% money-back guarantee</strong> and I’ll refund without asking any questions.</p>
</blockquote>

<p><a href="https://gum.co/meteor-explained">You can purchase <strong>Meteor Explained</strong> for $29</a>.</p>

<p>###Table of Contents</p>

<h4 id="1-basics-available-now">1. Basics (Available Now)</h4>

<ul>
  <li>1.1 Client–Server Architecture</li>
  <li>1.2 DDP</li>
  <li>1.3 Fibers</li>
  <li>1.4 Introduction to Meteor’s Reactivity</li>
</ul>

<h4 id="2-client-side-reactivity-available-now">2. Client-Side Reactivity (Available Now)</h4>

<ul>
  <li>2.1 Local Collections</li>
  <li>2.2 How Deps works</li>
  <li>2.3 How Blaze Works</li>
  <li>2.4 Blaze and Reactivity</li>
</ul>

<h4 id="3-ddp-implementation-available-now">3. DDP Implementation (Available Now)</h4>

<ul>
  <li>3.1 Default DDP Connection</li>
  <li>3.2 Processing Incoming DDP (Client Side)</li>
  <li>3.3 Processing Incoming DDP (Server Side)</li>
</ul>

<h4 id="4-methods-available-now">4. Methods (Available Now)</h4>

<ul>
  <li>4.1 Introduction to Latency Compensation</li>
  <li>4.2 How Latency Compensation Works</li>
  <li>4.3 WriteFence and It’s Usage</li>
</ul>

<h4 id="5-publishsubscribe-available-now">5. Publish/Subscribe (Available Now)</h4>

<ul>
  <li>5.1 How Publish/Subscribe Works</li>
  <li>5.2 Cursors and Observers</li>
  <li>5.3 Merge Box</li>
  <li>5.4 Deps and Subscriptions</li>
</ul>

<h4 id="6-mongodb-and-meteor-available-now">6. MongoDB and Meteor (Available Now)</h4>

<ul>
  <li>6.1 Intro to the mongo Package</li>
  <li>6.2 Polling Observe Driver</li>
  <li>6.3 Oplog Observe Driver</li>
  <li>6.3 MongoDB Write Operations</li>
</ul>

<p><a href="https://gum.co/meteor-explained" class="gumroad-button">Purchase Now</a></p>
</description>
      <link>http://localhost:4000/mongodb-oplog-and-meteor</link>
      <guid isPermaLink="true">http://localhost:4000/mongodb-oplog-and-meteor</guid>
      <pubDate>2014-09-25 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Introduction to DDP</title>
      <description><p>DDP is the heart of MeteorJS and it’s the protocol Meteor uses to communicate between the client and the server. DDP is an acronym for <a href="https://github.com/meteor/meteor/blob/devel/packages/livedata/DDP.md">Distributed Data Protocol</a>. Meteor has implemented both client and server implementations for DDP. There are a few client libraries for other frameworks and languages for connecting with Meteor via DDP.</p>

<h2 id="what-is-ddp">What Is DDP?</h2>

<p>Although it sounds like a complex protocol, DDP is very simple and minimalistic. It is a protocol based on JSON. Technically, DDP can be implemented on top of any duplex transport. Meteor’s current implementation is based on WebSockets and SockJS. SockJS is a WebSockets emulation transport, which can be used when WebSockets is not available.</p>

<h2 id="what-does-ddp-do">What does DDP do?</h2>

<p>DDP mainly does two things:</p>

<ol>
  <li>It handles Remote Procedure Calls (RPC).</li>
  <li>It manages data.</li>
</ol>

<p>Let’s learn more about these two functionalities in more detail.</p>

<h2 id="handling-remote-procedure-calls">Handling Remote Procedure Calls</h2>

<p>With RPC, you can invoke a method on the server and get something back in return. Besides that, DDP has a nice feature: it notifies the caller after all the write operations in the method have been reflected to all the other connected clients.</p>

<p>Let’s look at an example.</p>

<p>In this example, the client calls a method on the server called <code class="highlighter-rouge">transferMoney</code>.</p>

<p><img src="https://i.cloudup.com/2fLpc3NA3a.png" alt="" /></p>

<p>See below for the actual DDP messages:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1.{"msg":"method", "method": "transferMoney", "params": ["1000USD", "arunoda", "sacha"], id": "randomId-1"}
2.{"msg": "result", id": "randomId-1": "result": "5000USD"}
3.{"msg": "updated", "methods": ["randomId-1"]}
</code></pre></div></div>

<ol>
  <li>The DDP client (arunoda) invokes the method transferMoney with three parameters: 1000USD, arunoda and sacha.</li>
  <li>Then after the transfer has been accepted, the DDP server (bank) sends a message with an updated balance to arunoda’s account. The balance is in the result field. If there was an error, there will be an error field instead of the result.</li>
  <li>Some time later, the DDP server sends another message called updated with the method id, notifying me that my transfer has been sent to sacha successfully and he has accepted it. Sometime, updated message comes before the result. (It’s also possible to receive <code class="highlighter-rouge">updated</code> message even before the <code class="highlighter-rouge">result</code> message)</li>
</ol>

<p>Check the protocol <a href="https://github.com/meteor/meteor/blob/devel/packages/livedata/DDP.md#remote-procedure-calls">documentation on RPC</a> for more information.</p>

<h2 id="managing-data">Managing Data</h2>

<p>This is the core part of the DDP protocol. A client can use it to subscribe into a real-time data source and get notifications. The DDP protocol has three types of notification: <code class="highlighter-rouge">added</code>, <code class="highlighter-rouge">changed</code> and <code class="highlighter-rouge">removed</code>. Since the DDP protocol was inspired by MongoDB, each data notification (a JSON object) is assigned to a collection, which is the place where the data belongs.</p>

<p>Let’s look at an example.</p>

<p>We’ve a data source called <code class="highlighter-rouge">account</code>, which holds all the transactions made by the users. In this example, sacha will connect to his account to get his transactions. After arunoda makes a transfer, sacha will receive the new transaction. Here’s the data flow for this:</p>

<p><img src="https://i.cloudup.com/36TF0RmTLM.png" alt="" /></p>

<p>See below for the actual DDP messages:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1.{"msg": "sub", id: "random-id-2", "name": "account", "params": ["sacha"]}
2.{"msg": "added", "collection": "transactions", "id": "record-1", "fields": {"amount": "50USD", "from": "tom"}}
  {"msg": "added", "collection": "transactions", "id": "record-2", "fields": {"amount": "150USD", "from": "chris"}}
3.{"msg": "ready": "subs": ["random-id-2"]}
4.{"msg": "added", "collection": "transactions", "id": "record-3", "fields": {"amount": "1000USD", "from": "arunoda"}}
</code></pre></div></div>

<ol>
  <li>The DDP client (sacha) sends a subscription request for his account.</li>
  <li>He will receive a couple of added notifications with the current transactions in his account.</li>
  <li>After all the transactions have been sent by the DDP server (bank), DDP will send a special message called <code class="highlighter-rouge">ready</code>. The ready message indicates that all the initial data for the subscription has been sent and you are good to go.</li>
  <li>Some time later, after arunoda has sent his transfer, sacha will receive the transaction as another added notification.</li>
</ol>

<p>Likewise, the DDP server can send changed and removed notifications as well. See below for sample notifications.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//changed
{"msg": "changed", collection": "transactions", "id": "doc_id", "fields": {"amount": "300USD"}}

//removed
{"msg": "removed", "collection": "transactions", "id": "doc_id"}
</code></pre></div></div>

<p>Check the protocol documentation on <a href="https://github.com/meteor/meteor/blob/devel/packages/livedata/DDP.md#managing-data">Managing Data</a> for more information.</p>

<h2 id="understanding-and-analyzing-ddp">Understanding and Analyzing DDP</h2>

<p>Understanding and analyzing DDP are very important for any Meteor developer since those help in fixing issues and give an understanding on how the Meteor application works internally. Since now you understand DDP pretty well, it’s time to see how actual DDP messages are sent and received in your app.</p>

<p>For that, install <a href="http://meteorhacks.com/discover-meteor-ddp-in-realtime.html"><code class="highlighter-rouge">ddp-analyzer</code></a> and configure your app for it. Now you can see what’s happening behind the scenes.</p>

<p><a href="http://meteorhacks.com/discover-meteor-ddp-in-realtime.html"><img src="https://i.cloudup.com/IsUVXUOspa.png" alt="" /></a></p>

<p>Check here to learn more about the <a href="http://meteorhacks.com/discover-meteor-ddp-in-realtime.html">DDP Analyzer</a>.</p>

<p>Learn how your application behaves and apply fixes accordingly.</p>

<blockquote>
  <p>To get more insight into your app and learn how to fix them, add <a href="https://meteorapm.com/">Meteor APM</a> support to your app.</p>
</blockquote>
</description>
      <link>http://localhost:4000/introduction-to-ddp</link>
      <guid isPermaLink="true">http://localhost:4000/introduction-to-ddp</guid>
      <pubDate>2014-05-08 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Cloudflare Meets Meteor</title>
      <description><p>If you have not yet heard about <a href="https://www.cloudflare.com/">Cloudflare</a>, it’s a must-have item for your web toolbox. It offers many services for web apps—primarily for increased performance and security. Here is a list of services Cloudflare offers (in ordered of my personal preference).</p>

<ul>
  <li>Simple DNS Management</li>
  <li>SSL Support</li>
  <li>Caching Proxy (with CDN) for your static files</li>
  <li>Optimize HTML and static files for faster loading</li>
  <li>Web Application Firewall</li>
  <li>DDOS Protection</li>
</ul>

<p>In addition to these features, Cloudflare’s pricing model is extremely attractive. Cloudflare does not charge for the usage: instead, it offers an affordable per-application flat fee.  Of course, a free tier is offered as well.</p>

<p>Using Meteor with Cloudflare is a bit tricky, as Meteor’s DDP connection uses WebSockets, which is not supported by Cloudflare yet. But with few simple tweaks, you will be able to use Meteor with Cloudflare.</p>

<blockquote>
  <p>This is not a guide on how to use Cloudflare’s features, but on how to use Cloudflare with Meteor</p>
</blockquote>

<h2 id="ddp-and-cloudflare">DDP and Cloudflare</h2>

<p>Cloudflare runs on top of a customized nginx server but it does not yet support WebSockets. If you’ve just added Cloudflare support to your Meteor app, you’ll find issues connecting to the DDP server. You have two options here.</p>

<h3 id="option-1-disable-websockets">Option 1: Disable WebSockets</h3>

<p><img src="https://i.cloudup.com/P5oTDD9Yxe.png" alt="Using Cloudflare with Disabling WebSockets" /></p>

<p>This is the simplest and the best option. All you have to do is export the following environment variable before starting your Meteor app.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export DISABLE_WEBSOCKETS=1
</code></pre></div></div>

<h3 id="option-2-use-a-separate-subdomain-for-the-ddp-connection">Option 2: Use a separate subdomain for the DDP connection</h3>

<p><img src="https://i.cloudup.com/cQcVFWZYCp.png" alt="Using Cloudflare with WebSockets" /></p>

<p>With this option, you can continue to use WebSockets with your Meteor app, but you will not be able to use some of the Cloudflare’s features. All you need to do is add a separate DDP connection to your Meteor app, which will bypass Cloudflare. Follow the steps below:</p>

<ul>
  <li>Add a CNAME or A record called “ddp” pointing to the your Meteor App</li>
  <li>Bypass Cloudflare by not clicking the cloud icon on the DNS manager. (It needs to be grey.)</li>
  <li>Add the above subdomain as your default DDP connection by exporting the following environmental variable before starting your Meteor app.</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export DDP_DEFAULT_CONNECTION_URL=http://ddp.yourdomain.com
</code></pre></div></div>

<p>Now your DDP connection is bypassing Cloudflare and your Meteor can use WebSockets.</p>

<h2 id="what-are-the-benefits-for-using-cloudflare-with-meteor">What are the benefits for using Cloudflare with Meteor?</h2>
<p>Now it’s time to explore how Cloudflare helps Meteor with Cloudflare’s features. However, not all of the features help Meteor; some of them need to be turned off or to be used with care.</p>

<h3 id="as-a-caching-proxy-with-cdn">As a Caching Proxy with CDN</h3>

<p>As I’ve <a href="/does-meteor-scale.html#smart_caching">mentioned before</a>, it is not wise to use Meteor to serve static content. Cloudflare proxies all of the static content, such as CSS, JavaScript. and Images by default. As such, your Meteor app is not directly serving any static content, which is exactly what we need. Also, Cloudflare acts as a CDN, so you gain that benefit, too.</p>

<p>However, Cloudflare does not cache any HTML content. That helps us to load balance our Meteor app correctly with sticky sessions.</p>

<h3 id="as-your-ssl-terminator--ssl-provider">As your SSL terminator + SSL provider</h3>

<p>As I’ve also <a href="how-to-scale-meteor.html#ssl_with_stud">previously mentioned</a>, NodeJS is not good at serving SSL, and Meteor has no option to configure SSL. Therefore, we need to use a separate SSL terminator such as stud or nginx.</p>

<p>Cloudflare has a very interesting SSL service that acts as both an SSL certificate provider and as an SSL terminator. Simply put, you don’t need to buy an SSL certificate and make any configurations; you just need to click a button.</p>

<p>Unfortunately, if you’ve used Option 2 to allow DDP support, you can’t enjoy this feature, as now your DDP connection is bypassing Cloudflare.</p>

<blockquote>
  <p>To use SSL support, you need to use the Cloudflare Pro subscription plan</p>
</blockquote>

<h3 id="turn-off-minification-and-the-rocket-loader">Turn off Minification and the Rocket Loader</h3>

<p>Meteor does already minify all your JS and CSS files.  There is therefore no reason to do so inside Cloudflare. However, minifying multiple times does not break anything.</p>

<p>Cloudflare also has a feature called RocketLoader, which loads JavaScript asynchronously. But Meteor’s JavaScript (just a single file) needs to be loaded synchronously, so you will need to turn this off.</p>

<p>Cloudflare has some security options, which asks users to enter a CAPTCHA before entering the site. This is used to block malicious users. Sometimes, your users may be using a shared Internet connection, or the ISP is using a transparent proxy or something similar. This might cause Cloudflare to trigger the CAPTCHA, which might confuse the users of your app.</p>

<p>I really can’t say whether it is a good option to turn this off or not. But keep in mind that there is a situation like this also.</p>

<h3 id="ddos-protection">DDOS Protection</h3>

<p>First of all, if you are considering this, your app is popular :)</p>

<p>Cloudflare does a good job at handling DDOS, and it has prevented some major attacks. This is how you can gain its benefit</p>

<p>To obtain the DDOS protection, you need to hide the IP address (or direct access) to your Meteor app from the public. This relates to both your main website and the DDP connection.</p>

<p>If you are using Option 1 with disabling WebSockets, you are already behind Cloudflare, and direct access to your Meteor app is hidden from the public. So whenever you need DDOS protection, you can simply turn it on.</p>

<p>But if you are using <strong>Option 2</strong> with a separate DDP connection, your DDP connection is exposing direct access to your site. This allows the attacker to bypass Cloudflare and directly attack your app. If you are keep using this option, and if you decided to use DDOS protection at a later point, migrate your app (or load balancer) into a new server. Then apply <strong>Option 1</strong> and turn on the DDOS protection.</p>

<p>Hope this article helps you to use Cloudflare with Meteor correctly and handover some responsibilities to it and keep focus on building your app.</p>

</description>
      <link>http://localhost:4000/cloudflare-meets-meteor</link>
      <guid isPermaLink="true">http://localhost:4000/cloudflare-meets-meteor</guid>
      <pubDate>2014-01-17 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Run Meteor on Multiple CPUs</title>
      <description><blockquote>
  <p>This article is old. Now Meteor apps can get the benefit of multiple cores. Read this article: <a href="https://meteorhacks.com/introducing-multi-core-support-for-meteor.html">Introducing Multi-Core Support for Meteor</a></p>
</blockquote>

<p>If you read our article on the <a href="HTTP://meteorhacks.com/fibers-eventloop-and-meteor.html">Event Loop</a>, you already know that Node.js has a single-process, single-threaded execution model. Since Meteor is built on top of Node.js, it shares the same model.</p>

<p>So, even if your hosting environment supports multiple CPUs (or multiple cores), you cannot take advantage of more than one by default.</p>

<blockquote>
  <p>I’ll be using the term <em><strong>multiple CPUs</strong></em> to address the scenario of both multiple cores and multiple CPUs.</p>
</blockquote>

<h2 id="why-not-the-nodejs-cluster-module">Why not the Node.js cluster module?</h2>

<p>Node.js has provided a solution to this limitation with its <a href="http://nodejs.org/api/cluster.html"><em>Cluster</em></a> module. Let’s have a look at it.</p>

<p><img src="https://i.cloudup.com/ZLG5h9hvCj.png" alt="How cluster works" /></p>

<p>Cluster spawns multiple processes of your app at your command. Then, when your app receives a new HTTP request, it passes the raw socket to one of those processes randomly. Cluster is not a proxy–it simply forwards the raw socket to another process, and that process takes care of the processing. This makes it very efficient. Unfortunately, Cluster’s routing algorithm doesn’t support <em>sticky sessions</em>, which we need (as discussed in the <a href="http://meteorhacks.com/how-to-scale-meteor.html">previous article</a>), so we can’t use Cluster directly with Meteor.</p>

<p>There has been an <a href="https://github.com/indutny/sticky-session">attempt</a> to add sticky session support to Cluster, but it’s based on source IP information. There are better ways to implement sticky sessions, such as using cookies or HTTP path (URL), but they are nearly impossible to implement into Cluster due to the way it works. Cluster doesn’t read the <em>content</em> of the raw socket–such as cookies and other HTTP information–it just forwards it before anything is read on the server.</p>

<h2 id="using-a-separate-load-balancer">Using a separate load balancer</h2>

<p>So, how do we take advantage of multiple CPUs? The only solution is to use a separate load balancer. We talked about load balancers and how to use HaProxy with Meteor in our <a href="http://meteorhacks.com/how-to-scale-meteor.html">last article</a>. We can use the same technique here.</p>

<blockquote>
  <p>Make sure to add a different cookie name for the load balancer used here and the load balancer used for scaling.</p>
</blockquote>

<p>Fortunately, I’m <a href="https://github.com/arunoda/meteor-up/issues/8">working</a> on <a href="https://github.com/arunoda/meteor-up">Meteor-UP</a> to add multi-cpu support automatically. With that, Meteor-Up will do the all the hard work for you.</p>

<hr />

<blockquote>
  <p>Edited by <a href="https://twitter.com/jonjamz">Jon James</a> (Head of Technology at <a href="http://writebot.com/">Writebot</a>)</p>
</blockquote>
</description>
      <link>http://localhost:4000/run-meteor-on-multiple-cpus</link>
      <guid isPermaLink="true">http://localhost:4000/run-meteor-on-multiple-cpus</guid>
      <pubDate>2013-12-19 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>How to Scale Meteor?</title>
      <description><blockquote>
  <p>I assume, you are using the lastest version of Meteor</p>
</blockquote>

<p>In the <a href="http://meteorhacks.com/does-meteor-scale.html">previous article</a>, we looked at the problems and possible solutions for scaling Meteor applications. But I did not show you how to scale an app in practice. So, this article covers that.</p>

<h2 id="scaling-set-up">Scaling Set-up</h2>

<p>Our component diagram is:</p>

<p><img src="https://i.cloudup.com/lfFVzGvSWg.png" alt="Meteor Scaling Setup - Components" /></p>

<p>There are three Meteor servers, one MongoDB server and a <a href="http://haproxy.1wt.eu/">HaProxy</a> server as the load balancer. For SSL support, we will use <a href="https://github.com/bumptech/stud">Stud</a> in front of HaProxy.</p>

<p>Let’s discuss these components and configurations.</p>

<h2 id="configuring-mongodb">Configuring MongoDB</h2>

<p>I’m using a single-server <a href="http://docs.mongodb.org/manual/replication/">replicaSet</a> for MongoDB, which supports the oplog. It is better to use a multiserver replica set, but I will be using a single server to keep things simple.</p>

<h4 id="configuring-a-single-server-replica">Configuring a Single-Server Replica</h4>

<p>First, we need to start our MongoDB server with replicaSet aware. Use the following command to start MongoDB with replicaSet <code class="highlighter-rouge">meteor</code>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mongod --replSet meteor
</code></pre></div></div>

<p>Then, open a Mongo shell and add the following to configure the single-server replicaSet:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var config = {_id: "meteor", members: [{_id: 0, host: "127.0.0.1:27017"}]}
rs.initiate(config)
</code></pre></div></div>

<blockquote>
  <p>It is wise to run a 3 node MongoDB ReplicaSet for your app. I highly recommend using <a href="http://www.mongohq.com/pricing/dedicated">MongoHQ Dedicated Servers</a>, if you don’t have the expertise.</p>
</blockquote>

<h4 id="access-control">Access Control</h4>
<p>Since we are using a separate MongoDB server, we need to prevent unauthorized access of it. We can configure a firewall or use MongoDB’s role-based access control. To make the set-up simple, I assume we’ve configured the firewall properly. If it is not possible to configure a firewall, try using MongoDB’s <a href="http://docs.mongodb.org/manual/reference/user-privileges/">role-based access control</a>.</p>

<p>We’ll be using <code class="highlighter-rouge">app</code> as the database for our Meteor app. For the oplog integration, we will be using the <code class="highlighter-rouge">local</code> database that contains the oplog.</p>

<h2 id="configuring-meteor">Configuring Meteor</h2>

<p>We need to keep an eye on a few things when we are planning a scalable Meteor deployment. I’ll show these in this section.</p>

<h3 id="oplog-support">Oplog Support</h3>

<p>I already mentioned in the <a href="http://meteorhacks.com/does-meteor-scale.html#meteor_with_mongodb_oplog">previous article</a> how oplog can help Meteor to scale horizontally.</p>

<p>All you’ve to do is, simply expose the MongoDB URL of your local database as <code class="highlighter-rouge">MONGO_OPLOG_URL</code>.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MONGO_OPLOG_URL=mongodb://localhost/local
</code></pre></div></div>

<p>(Of course, you need to set <code class="highlighter-rouge">MONGO_URL</code> as usual)</p>

<h3 id="ie-8-and-9-sticky-session-support">IE 8 and 9 Sticky Session Support</h3>

<p>IE 8 and 9 <a href="http://stackoverflow.com/questions/483445/ie8-doesnt-pass-session-cookie-for-ajax-request">do not send cookies</a> with Ajax requests; so this breaks our load balancer, which we’ll be exploring in the next section. Fortunately, SockJS has a solution for that, but it is turned off by default with Meteor. To turn it on, you need to export the following environmental variable:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export USE_JSESSIONID=1
</code></pre></div></div>

<h3 id="selecting-servers">Selecting Servers</h3>

<p>It is very important that you choose identical servers for Meteor. They should be in the same data center and the performance, operating systems and architecture should also all be the same; otherwise we’ll have an unbalanced load across our Meteor servers.</p>

<p>In this setup, I am using only a single process on the server. So a server with multiple cores will not be much help. So try to pick single core server instances. I’ll cover this further in an upcoming article.</p>

<h3 id="deploying">Deploying</h3>

<p>It is very important to deploy your Meteor app correctly and configure the servers carefully. If possible, try consulting someone who knows how. Otherwise you can use <a href="https://github.com/arunoda/meteor-up">Meteor Up</a>, which I built to deploy production-quality Meteor apps.</p>

<h2 id="configuring-the-load-balancer-haproxy">Configuring the Load Balancer (HaProxy)</h2>

<p>I’m using HaProxy as the load balancer for our Meteor app. It is something very stable and used in production by many companies. Also, HaProxy has built-in support for sticky sessions and some of the other configurations that we will be using.</p>

<h3 id="sticky-session-support">Sticky Session Support</h3>

<p>There are a couple of ways we can implement sticky sessions. We can implement sticky sessions with cookies, hashing source IP information or customized URLs. There are some other ways, but these are the common ones.</p>

<p>Hashing source IP is the easiest to implement, but it does not balance the load properly. We can’t trust the IP information and transparent proxy servers (very commonly used by ISPs) hide the original IP information, which means one server will get many requests and the others won’t.</p>

<p>A customized URL path is a very good option and it is very well supported by SockJS. But for this, we’ll need some custom logic in the load balancer and further configuration on Meteor.</p>

<p>The cookie-based solution is ideal for us, since it can balance the load properly and it is easy to set up.</p>

<h3 id="load-balancing-algorithm">Load-Balancing Algorithm</h3>

<p>It is very important to choose a good load-balancing algorithm. HaProxy comes with a bunch of algorithms. The <code class="highlighter-rouge">roundrobin</code> algorithm is recommended in the docs. <code class="highlighter-rouge">roundrobin</code> is very good for stateless webapps built with Ruby on Rails or PHP.</p>

<p>However, Meteor is stateful and it has long-lasting connections, so it is better to use the <code class="highlighter-rouge">leastconn</code> algorithm. It sends new connections to the server that has the lowest number of connections. This balances the load equally, even if a server goes down and comes back. If we use <code class="highlighter-rouge">roundrobin</code>, we’ll have an unbalanced load.</p>

<h3 id="configuration">Configuration</h3>

<p>See how you can configure HaProxy using the following configuration file:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defaults
  mode  http
  timeout connect 60s
  timeout server 60s
  timeout client 60s
  timeout check 5s

frontend public
  #binding port 80
  bind *:80
  default_backend apps

backend apps
  #load balancing algorithm
  balance leastconn

  #using JSESSIONID as the cookie
  cookie JSESSIONID insert nocache

  #adding server
  server host1 host1.example.com cookie host1
  server host2 host2.example.com  cookie host2
  server host3 host3.example.com  cookie host3
</code></pre></div></div>

<p>I’ve removed some parts of the config file to keep it simple. You can get the full config file from <a href="https://gist.github.com/arunoda/a35f69f8b7a385d06a8d">here</a>.</p>

<h2 id="ssl-with-stud">SSL with Stud</h2>

<p>Running your app with SSL is a must in production. Unfortunately the stable version of HaProxy does not support SSL. But we can use Stud in front of HaProxy to terminate SSL. It is better to deploy Stud on the same server as HaProxy.</p>

<blockquote>
  <p>Make sure to install Stud from the <a href="https://github.com/bumptech/stud">source</a>. The version you would get with apt-get is outdated.</p>
</blockquote>

<p>You can use the following configuration file:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#bind to defualt SSL port
frontend = "[*]:443"

#haproxy host and port
backend = "[localhost]:80"

#location of the .pem file
pem-file = "/path/to/ssl.pem"
</code></pre></div></div>

<p>Click <a href="https://gist.github.com/arunoda/4c6f5715b826d4bd5317">here</a> to get the complete configuration file.</p>

<p>Stud needs your SSL certificate and the private key in a single .pem file. See <a href="http://blog.alexnj.com/configuring-a-positivessl-certificate-with-stud.html">these instructions</a> for how to create a .pem file.</p>

<h2 id="enjoy">Enjoy</h2>

<p>I hope this article will help you to scale your Meteor app horizontally. If you have any issues, need clarification or would like to suggest a fix, don’t hesitate to <a href="https://twitter.com/arunoda">contact me</a> or add a comment below.</p>
</description>
      <link>http://localhost:4000/how-to-scale-meteor</link>
      <guid isPermaLink="true">http://localhost:4000/how-to-scale-meteor</guid>
      <pubDate>2013-12-12 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Does Meteor Scale?</title>
      <description><p>Most people considering Meteor for a production deployment are wondering if it can scale. Some say Meteor is a good framework for prototyping, but not for production. After you read this article, you’ll be able to decide for yourself.</p>

<h2 id="scaling-myth">Scaling Myth</h2>

<p>With the emergence of cloud computing (and specifically Heroku), many have come under the impression that <em>scaling</em> means adding more instances of an application. That’s not completely true.</p>

<p>Routing, sessions, job processing, static file serving, and database optimization are key concerns when it comes to scaling, among other things. Any Meteor app that intends to deploy into production needs to address–or at least consider–these issues. On top of that, Meteor has its own issues.</p>

<h2 id="issues-unique-to-meteor">Issues Unique to Meteor</h2>

<p>Meteor isn’t like Ruby on Rails, Express (the Node.js framework), or PHP. It’s a special framework with its own issues, many of which have been solved outside of the Meteor community already. We just need to figure out how to fit them together and apply them correctly to Meteor. So, let’s have a look at these issues first.</p>

<h3 id="use-of-sockjs">Use of SockJS</h3>

<p>Meteor uses <a href="https://github.com/sockjs/sockjs-node">SockJS</a> as the transport layer for communicating between client and server. SockJS needs <em>sticky sessions</em>, which means that all the requests for a particular client must be served from a single server for a specific amount of time.</p>

<h3 id="hot-code-reloading">Hot Code Reloading</h3>

<p>Meteor apps are <em>single-page apps</em>, which are long-lived in the browser. Single-page apps can sometimes experience conflicts between the server and client due to a version mismatch–especially when new code is pushed often, which is not so rare these days. Fortunately, Meteor features <em>hot code reload</em>, which identifies any code changes on the server and asks the browser to reload. Additionally, Meteor is smart enough to preserve session information through the reload.</p>

<p>Due to the default <em>hot code reload</em> logic, a Meteor client app needs to connect (via DDP) to the same server it was loaded from.</p>

<h3 id="polling-for-changes-in-mongodb">Polling for Changes in MongoDB</h3>

<p>Meteor is all real-time, which it currently(by default) achieves by fetching and comparing documents after every database write operation. Meteor also polls the database for changes every 10 seconds. These are the main bottlenecks when scaling Meteor, and they introduce two main issues:</p>

<ol>
  <li>The polling and comparing logic takes a lot of CPU power and network I/O.</li>
  <li>After a write operation, there is no way to propagate changes to other Meteor instances in real-time. Changes will only be noticed the next time Meteor polls (~10 seconds).</li>
</ol>

<p>See how Meteor identifies database changes with polling:
<img src="https://i.cloudup.com/NUonhQFdUh.png" alt="Real-time Changes with MongoDB Polling" /></p>

<h2 id="how-we-can-solve-meteors-scaling-issues">How We Can Solve Meteor’s Scaling Issues</h2>

<p>There is nothing which cannot be solved. Continue reading to learn how to solve the above-mentioned issues with Meteor, and some other common scaling issues. The next few articles will discuss the full implementation of these solutions.</p>

<h3 id="sticky-session-enabled-load-balancing">Sticky Session Enabled Load Balancing</h3>

<p>When serving requests to Meteor instances, a load balancer needs to be able to handle the issues presented by SockJS and <em>hot code reload</em>. These issues are not hard to solve so long as the load balancer can be configured to use sticky sessions–and the sticky sessions need to apply to static content, at least for the first HTML page.</p>

<h3 id="meteor-with-mongodb-oplog">Meteor with MongoDB oplog</h3>

<p>As mentioned above, Meteor’s bottleneck to scaling exists in the way it polls the database and runs an algorithm to detect and patch in any changes to the rest of the app. But we can get much more performance out of Meteor using the <a href="http://docs.mongodb.org/manual/core/replica-set-oplog/">MongoDB oplog</a>. An oplog-based solution works with multiple Meteor instances without much effort. You can even write directly to the database outside of Meteor, and Meteor will notice the changes.</p>

<p>Oplog integration removes the bottleneck of MongoDB polling.</p>

<p>MongoDB’s oplog is a log that records every database write operation. It’s so reliable that it’s used for MongoDB replication (<em>Replica Sets</em>). Also, the oplog is a <a href="http://docs.mongodb.org/manual/core/capped-collections/">capped collection</a>, which can be configured to have a fixed size and can be tailed. Oplog <a href="http://docs.mongodb.org/manual/tutorial/create-tailable-cursor/">tailing</a> can be used to capture database changes in real-time.</p>

<p>See following illustration to see how Meteor gets database changes with the oplog.
<img src="https://i.cloudup.com/Qrw3Ezy2DE.png" alt="Real-time Changes with oplog" /></p>

<h3 id="smart-caching">Smart Caching</h3>

<p>It’s a good idea to put a caching server in front of Meteor. This will reduce the load on Meteor to serve static content. Node.js (where Meteor runs) <a href="http://www.quora.com/Node-js/What-are-the-disadvantages-of-using-Node-js-for-handling-static-resources/answer/Vineet-Markan"><strong>does not</strong> work well</a> when it comes to static file serving, so using a caching server improves performance.</p>

<p>The caching server shouldn’t cache the first HTML page loaded from Meteor into the browser. This is the only HTML content Meteor loads, and it contains a JavaScript variable called <em>serverId</em> that is used to compare versions in <em>hot code reload</em> logic.</p>

<h3 id="improved-application--mongodb-performance">Improved Application &amp; MongoDB Performance</h3>

<p>Fixing the most common performance issues helps a lot in the scaling process. The first thing to optimize is database indexes. Meteor doesn’t auto-magically add indexes–they need to be added explicitly. Indexes can provide a large performance gain.</p>

<p>Subscriptions and queries can also be optimized, with notable performance gains.</p>

<h3 id="scaling-mongodb">Scaling MongoDB</h3>

<p>MongoDB is a core component of Meteor, so it needs to be prioritized where scaling and performance are concerned. Generally, MongoDB performs quite well. It supports both vertical and horizontal scaling. It can be run on a more powerful server, or use <a href="http://docs.mongodb.org/manual/sharding/">MongoDB sharding</a> to scale horizontally.</p>

<p>Although MongoDB comes with good sharding tools, care needs to be taken when using sharding.</p>

<h3 id="use-of-a-cdn">Use of a CDN</h3>

<p>If your application is heavy on static content like images and video, you <strong>must not</strong> host these files using Meteor. Nowadays, using a CDN (Content Delivery Network) is standard practice, and it’s not very hard.</p>

<h2 id="okay-does-meteor-scale">Okay, Does Meteor Scale?</h2>

<p>Now you can decide if Meteor scales or not! In the next few articles, you’ll learn how to use commonly available tools and services to scale Meteor.</p>

<p>Read Next: <a href="/how-to-scale-meteor.html">How to Scale Meteor</a></p>

<hr />

<blockquote>
  <p>Edited by <a href="https://twitter.com/jonjamz">Jon James</a> (Head of Technology at <a href="http://writebot.com/">Writebot</a>)</p>
</blockquote>
</description>
      <link>http://localhost:4000/does-meteor-scale</link>
      <guid isPermaLink="true">http://localhost:4000/does-meteor-scale</guid>
      <pubDate>2013-12-03 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Fibers, Event Loop and Meteor</title>
      <description><p>Meteor’s use of <a href="https://github.com/laverdet/node-Fibers">Fibers</a> allows it to do many great things. In fact, Meteor’s popularity may be a direct result of its use of Fibers, though you wouldn’t know it without a deep understanding of Meteor’s internals.</p>

<p>It’s a bit hard to understand how Fibers works, and how it relates to Meteor. But once you do, you’ll have a better understanding of how Meteor works internally.</p>

<blockquote>
  <p>Fibers was not listed in the original Pro Meteor topic list. But since some of you have asked about it, I’ve decided to write this article. So, here we go.</p>
</blockquote>

<h2 id="event-loop-and-nodejs">Event Loop and Node.js</h2>

<p>Meteor is built on top of Node.js, so we can’t forget the Event Loop. Node.js runs on a single thread, and thanks to the Event Loop and event-driven programming, program execution isn’t blocked by I/O activities (network and disk, mainly). Instead, we provide a callback function that is run after the I/O completes, and the rest of the program continues to run.</p>

<p>Here’s a psuedo-code example showing two different tasks.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Call functions.
fetchTwitterFollowers('arunoda');
createThumbnail('/tmp/files/arunoda.png', '/opt/data/arunoda.thumb.png');

// Define functions.
function fetchTwitterFollowers(username) {
  TwitterAPI.getProfile(username, function(){
    Model.setFollowers(profile.username, profile.followers, function() {
      console.log('profile saved!');
    });
  });
}

function createThumbnail(imageLocation, newLocation) {
  File.getFile(imageLocation, function(err, fileData) {
    var newImage = ImageModule.resize(fileData);
    File.saveFile(newLocation, function() {
      console.log('image saved');
    });
  });
}
</code></pre></div></div>

<p>Now let’s see how the above two functions get executed over time.</p>

<p><img src="https://i.cloudup.com/VmluSV7rBp.png" alt="Understanding Event Loop" /></p>

<blockquote>
  <p>Tasks in <code class="highlighter-rouge">fetchTwitterFollowers</code> are marked in green, and tasks in <code class="highlighter-rouge">createThumbnail</code> are marked in orange.
Dark colors show CPU time, and light colors show I/O time.</p>

  <p>The <strong>Blue Bar</strong> shows waitTime in the queue and the <strong>Red Bar</strong> shows idleTime.</p>
</blockquote>

<h3 id="observations">Observations</h3>

<p>The diagram above shows us a few interesting things. First, there is no particular program execution order. I/O activities can take any amount of time to complete, and they won’t block the program from executing other tasks. For example, <code class="highlighter-rouge">ImageModule.resize</code> does not need to wait for <code class="highlighter-rouge">Twitter.getProfile</code> to be completed before it can be run.</p>

<p>Second, CPU-bound activities <em>do</em> block program execution. In the middle of the diagram you can see a blue bar where <code class="highlighter-rouge">Model.setFollowers</code> cannot get started even though <code class="highlighter-rouge">TwitterAPI.getProfile</code> has completed. <code class="highlighter-rouge">ImageModule.resize</code> is the reason for that. It is a CPU-bound task, so it blocks the Event Loop. As mentioned earlier, Node.js runs in a single thread. That’s why Node.js is not the best choice for CPU-bound activities like image processing and video conversion.</p>

<p>You can also see there are three red bars indicating idleTime. If our app had more functionality, it could use this time to execute it.</p>

<h2 id="fibers">Fibers</h2>

<p>Now you know how the Event Loop works, and how efficient it is. But there is a problem: Callbacks. Callbacks make Node.js code difficult to reason about (some describe it as <em><strong>callback soup</strong></em>). Error handling and nested callbacks are uncomfortable to write, and their existence makes code difficult to maintain and scale. That’s why some say Node.js is hard to learn (and use).</p>

<p>Luckily, several techniques exist to overcome this issue. <a href="https://github.com/laverdet/node-Fibers">Fibers</a>, <a href="http://promisesaplus.com/">Promises</a>, and <a href="https://medium.com/code-adventures/174f1fe66127">Generator-based coroutines</a> are some of them.</p>

<p>Meteor uses Fibers, and implements APIs on top of it. But before going into it any further, let’s see how Fibers works. See the diagram below.</p>

<p><img src="https://i.cloudup.com/cO895VekjA.png" alt="Understanding Fibers" /></p>

<p>Fibers provides an abstraction layer for the Event Loop that allows us to execute functions (tasks) in sequence. It allows us to write asynchronous code without callbacks. We get the best of both worlds–asynchronous efficiency with synchronous-style coding. Behind the scenes, Fibers takes care of dealing with the Event Loop.</p>

<p>Fibers is really good if you use it correctly (Meteor does it well). Also, the overhead caused by Fibers is negligible.</p>

<h2 id="how-meteor-uses-fibers">How Meteor Uses Fibers</h2>

<p>Meteor abstracts Fibers with its APIs, allowing you to write your app without callbacks. The best part is that you can write your code this way and be completely oblivious to Fibers. It <em>just works</em>.</p>

<p>Meteor creates a new Fiber for each and every request (<a href="https://github.com/meteor/meteor/blob/devel/packages/livedata/DDP.md">DDP</a> Request) made from the client. By default, Meteor executes one request at a time for each client, meaning one Fiber for each client at a time. But you can change that.</p>

<p>Fibers is the one of the best reasons Meteor is so popular. Since it allows us to write Node.js apps without callbacks, it has attracted many developers who hated Node.js for that reason.</p>

<h2 id="how-to-use-async-functions-with-meteor">How To Use Async Functions With Meteor</h2>

<p>We can’t satisfy 100% of our needs with Meteor’s API–sometimes we need to use <a href="http://meteorhacks.com/complete-npm-integration-for-meteor.html">NPM modules</a> to get things done. But how can we do this if we don’t know how to use callbacks with Meteor?</p>

<p>For example, say you need to use the <a href="https://npmjs.org/package/github">Github</a> NPM module to get your user’s public profile. It needs to be done inside a Meteor method, and we need to return the profile from the method. Okay, let’s try to implement this.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var GithubAPI = Meteor.require('github');
var ghapi = new GithubAPI({version: "3.0.0"});

Meteor.methods({
  getProfile: function(username) {
    ghapi.user.getFrom({user: username}, function(err, profile) {
      // How to return?
    });

    // We need to return the profile from here.
  }
});
</code></pre></div></div>

<p>We can’t use callbacks like above. We can’t return the profile to the client from the callback, because the Meteor method won’t wait for the callback before returning. Now we need to learn how to deal with Fibers. Or do we?</p>

<p>Meteor foresaw this problem and provided us with a very simple API to get around it. It’s not documented yet, but here’s how you can use it.</p>

<blockquote>
  <p><a href="https://github.com/arunoda/meteor-npm">meteor-npm</a> also comes with a set of <a href="http://meteorhacks.com/improved-async-utilities-in-meteor-npm.html">async-utilities</a> to work with npm modules.</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function getUserProfile(req, callback) {
  ghapi.user.getFrom(req, callback);
}
var wrappedGetProfile = Meteor._wrapAsync(getUserProfile);

Meteor.methods({
  getProfile: function(username) {
    return wrappedGetProfile({user: username});
  }
});
</code></pre></div></div>

<p>The code above is simple to understand. We wrapped the <code class="highlighter-rouge">ghapi.user.get</code> method in a function, and called that function with <code class="highlighter-rouge">Meteor._wrapAsync</code> to make it Fibers aware. Now we can use it inside Meteor methods and other Meteor APIs.</p>

<p>If you know how <a href="http://goo.gl/Josco"><code class="highlighter-rouge">bind</code></a> works, you can do the wrapping in a single line as shown below.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var wrappedGetProfile = Meteor._wrapAsync(ghapi.user.getFrom.bind(ghapi.user));
</code></pre></div></div>

<h2 id="finally">Finally</h2>

<p>Now you have a better knowledge of the Event Loop, Fibers, and how Meteor uses Fibers. And you know how to use asynchronous functions with Meteor using <code class="highlighter-rouge">Meteor._wrapAsync</code>. It’s time to supercharge your app with this knowledge.</p>

<h2 id="additional-notes">Additional Notes</h2>

<p>If you are looking to learn more about Fibers and related technology, please refer to the following great screencasts by <a href="https://www.eventedmind.com/">EventedMind</a>.</p>

<ul>
  <li><a href="https://www.eventedmind.com/feed/nodejs-introducing-fibers">Introducing Fibers</a></li>
  <li><a href="https://www.eventedmind.com/feed/nodejs-using-futures">Using Futures</a></li>
  <li><a href="https://www.eventedmind.com/feed/meteor-meteor-wrapasync">Meteor._wrapAsync</a></li>
  <li><a href="https://www.youtube.com/watch?v=AWJ8LIzQMHY">Understanding Event Loop Async and Fibers</a></li>
</ul>

<hr />

<blockquote>
  <p>Edited by <a href="https://twitter.com/jonjamz">Jon James</a> (Head of Technology at <a href="http://writebot.com/">Writebot</a>)</p>
</blockquote>
</description>
      <link>http://localhost:4000/fibers-eventloop-and-meteor</link>
      <guid isPermaLink="true">http://localhost:4000/fibers-eventloop-and-meteor</guid>
      <pubDate>2013-11-21 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Understanding Meteor Internals</title>
      <description><p><a href="/pro-meteor/">Pro Meteor</a> is a guide that has been created as a reference for building a production-quality Meteor setup. The guide assumes that its reader has a basic understanding of Meteor, but for readers that need a better introduction, <a href="http://www.discovermeteor.com/">Discover Meteor</a> comes highly recommended.</p>

<p>This article is an introduction to Meteor’s internals, and serves as the foundation for future articles in the Pro Meteor guide.</p>

<h2 id="meteor-internals-meteor-as-a-server-and-a-client">Meteor Internals: Meteor as a Server and a Client</h2>
<p>A Meteor application is seen by browsers, proxy servers, routers and other network components as a typical web application. Yet Meteor is comprised of two main components: a part that runs <strong>inside the browser</strong> and another part that runs <strong>inside the server</strong>. These two parts are configured to communicate with each other in a way that’s similar to modern web applications (e.g. <a href="https://gmail.com">Gmail</a> and <a href="https://trello.com">Trello</a>).</p>

<p><img src="https://i.cloudup.com/J2CMCytr1Q.png" alt="Meteor has 2 parts, which run on the browser and the server" /></p>

<p>Meteor allows developers to build applications without worrying about the complexities of client-server connectivity.</p>

<h2 id="meteor-handles-three-different-types-of-requests">Meteor Handles Three Different Types of Requests</h2>

<p>Underneath its surface, Meteor handles 3 types of requests. They are:</p>

<ul>
  <li>Static Files</li>
  <li>DDP Messages</li>
  <li>HTTP Requests</li>
</ul>

<h3 id="static-files">Static Files</h3>

<p>Static files are images and other resources inside the <code class="highlighter-rouge">/public</code> folder. Meteor serves these files automatically when the app starts.</p>

<p>Additionally, Meteor minifies and concatenates all JavaScript (including templates, which are pre-compiled as JavaScript) and CSS files, and serves them as static files.</p>

<h3 id="ddp-messages">DDP Messages</h3>

<p><a href="https://github.com/meteor/meteor/blob/devel/packages/livedata/DDP.md">DDP</a> is the protocol Meteor uses to communicate between client and server. All client-side subscription data, method calls and MongoDB operations are communicated as DDP messages. This is a very lightweight protocol. These messages can be inspected with a handy tool called <a href="http://meteorhacks.com/discover-meteor-ddp-in-realtime.html">ddp-analyzer</a>.</p>

<h3 id="http-requests">HTTP Requests</h3>

<p>While there is no official documentation, Meteor can handle HTTP Requests similar to other traditional applications. For example, file uploads to a Meteor app are sent as HTTP Requests. See this StackOverflow <a href="http://stackoverflow.com/questions/15059125/how-to-serve-http-requests-over-meteor">question</a> for details on how to manually handle HTTP requests.</p>

<h2 id="meteor-has-two-types-of-servers">Meteor has Two Types of Servers</h2>

<p>Although Meteor runs on a single port, internally it works as two separate servers:</p>

<ul>
  <li>HTTP Server</li>
  <li>DDP Server</li>
</ul>

<p><img src="https://i.cloudup.com/Se41C2BcEE.png" alt="Meteor Server is a combination of a HTTP Server and a DDP Server" /></p>

<h3 id="http-server">HTTP Server</h3>

<p>The HTTP server is used to serve static files and HTTP requests. Meteor uses the <a href="https://github.com/senchalabs/connect"><code class="highlighter-rouge">connect</code></a> Node.js module for this purpose.</p>

<h3 id="ddp-server">DDP Server</h3>

<p>The DDP server handles all publications, MongoDB operations and Meteor methods. Meteor uses <a href="https://github.com/sockjs/sockjs-node">SockJS</a> as the transport protocol. In actuality, the DDP server is a SockJS server customized for Meteor.</p>

<p>Future guides will detail how to scale these two servers separately.</p>

<h2 id="mongodb-and-meteor">MongoDB and Meteor</h2>

<p>Meteor is built top of the MongoDB and Meteor is totally depending on MongoDB at this moment. But this can be changed in the future.
But MongoDB is <strong>not</strong> a real-time database; but Meteor is realtime. Meteor makes MongoDB realtime using two techniques as shown below.</p>

<ol>
  <li>Polling MongoDB every ~10 secs</li>
  <li>Using MongoDB oplog</li>
</ol>

<p>Polling is very expensive operation and that’s why Meteor includes another option (using oplog). But it needs some additional setup and is not possible with shared MongoDB hosting services. I will talk more on this topic in a future section.</p>

<blockquote>
  <p>Edited by <a href="https://twitter.com/jonjamz">Jon James</a> (Head of Technology at <a href="http://writebot.com/">Writebot</a>)<br />
Originally edited by <a href="https://twitter.com/alokag">Aloka Gunasekara</a>.</p>
</blockquote>
</description>
      <link>http://localhost:4000/understanding-meteor-internals</link>
      <guid isPermaLink="true">http://localhost:4000/understanding-meteor-internals</guid>
      <pubDate>2013-11-12 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
    <item>
      <title>Deploy a Meteor App into a Server or a VM</title>
      <description><p>In this article, I’ll show you how to deploy your Meteor application into a server from <a href="http://aws.amazon.com/ec2/">AWS EC2</a>, <a href="https://digitalocean.com/">Digital Ocean</a>, <a href="http://www.joyent.com/">Joyent</a> or from any other cloud provider.</p>

<h2 id="create-the-servervm">Create the Server/VM</h2>

<p>You need to create a server or vm from your cloud provider. It needs to be either Ubuntu or SmartOS.</p>

<p>You can use password based authentication or private key based authentication.</p>

<h2 id="meteor-up">Meteor Up</h2>

<p>We are using <a href="https://github.com/arunoda/meteor-up">Meteor UP</a> to deploy and setup the server. First install Meteor Up with:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install -g mup
</code></pre></div></div>

<blockquote>
  <p>If you are using password based authentication, you needs to install sshpass utility. Follow <a href="https://gist.github.com/arunoda/7790979">these steps</a> for that.</p>
</blockquote>

<p>Then go to your project and create a directory called <code class="highlighter-rouge">.deploy</code>. Go into that directory. apply following code:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mup init .
</code></pre></div></div>

<p>This will create configuration files for the deployment. <code class="highlighter-rouge">mup.json</code> is the main configuration file and follow the comments in it to modify it. Sample <code class="highlighter-rouge">mup.json</code> file is shown below.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="c1">// Server authentication info</span>
  <span class="s2">"servers"</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="s2">"host"</span><span class="p">:</span> <span class="s2">"hostname"</span><span class="p">,</span>
      <span class="s2">"username"</span><span class="p">:</span> <span class="s2">"root"</span><span class="p">,</span>
      <span class="s2">"password"</span><span class="p">:</span> <span class="s2">"password"</span>
      <span class="c1">// or pem file (ssh based authentication)</span>
      <span class="c1">//"pem": "~/.ssh/id_rsa"</span>
    <span class="p">}</span>
  <span class="p">],</span>

  <span class="c1">// Install MongoDB in the server, does not destroy local MongoDB on future setup</span>
  <span class="s2">"setupMongo"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>

  <span class="c1">// WARNING: Node.js is required! Only skip if you already have Node.js installed on server.</span>
  <span class="s2">"setupNode"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>

  <span class="c1">// WARNING: If nodeVersion omitted will setup 0.10.28 by default. Do not use v, only version number.</span>
  <span class="s2">"nodeVersion"</span><span class="p">:</span> <span class="s2">"0.10.28"</span><span class="p">,</span>

  <span class="c1">// Install PhantomJS in the server</span>
  <span class="s2">"setupPhantom"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>

  <span class="c1">// Application name (No spaces)</span>
  <span class="s2">"appName"</span><span class="p">:</span> <span class="s2">"meteor"</span><span class="p">,</span>

  <span class="c1">// Location of app (local directory)</span>
  <span class="s2">"app"</span><span class="p">:</span> <span class="s2">"/Users/arunoda/Meteor/my-app"</span><span class="p">,</span>

  <span class="c1">// Configure environment</span>
  <span class="s2">"env"</span><span class="p">:</span> <span class="p">{</span>
    <span class="s2">"PORT"</span><span class="p">:</span> <span class="mi">80</span><span class="p">,</span>
    <span class="s2">"ROOT_URL"</span><span class="p">:</span> <span class="s2">"http://myapp.com"</span><span class="p">,</span>
    <span class="s2">"MONGO_URL"</span><span class="p">:</span> <span class="s2">"mongodb://arunoda:fd8dsjsfh7@hanso.mongohq.com:10023/MyApp"</span><span class="p">,</span>
    <span class="s2">"MAIL_URL"</span><span class="p">:</span> <span class="s2">"smtp://postmaster%40myapp.mailgun.org:adj87sjhd7s@smtp.mailgun.org:587/"</span>
  <span class="p">},</span>

  <span class="c1">// Meteor Up checks if the app comes online just after the deployment</span>
  <span class="c1">// before mup checks that, it will wait for no. of seconds configured below</span>
  <span class="s2">"deployCheckWaitTime"</span><span class="p">:</span> <span class="mi">15</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>Make sure to set the path for <code class="highlighter-rouge">app</code> as <code class="highlighter-rouge">../</code></p>
</blockquote>

<p>Then you need to setup your server for the deployment. Apply <code class="highlighter-rouge">mup setup</code> and wait until it get completes.</p>

<p><img src="https://i.cloudup.com/EUvJbAFS9J.png" alt="Setup a Server for Meteor Deployment with Meteor Up" /></p>

<p>Then you can deploy your app. For that apply <code class="highlighter-rouge">mup deploy</code> and wait until it get completes.</p>

<p><img src="https://i.cloudup.com/Pb-6Zr29fd.png" alt="Deploying a Meteor app into a yourown server" /></p>

<p>After that, whenever you need to deploy again simply do <code class="highlighter-rouge">mup deploy</code>.</p>

<p>There are more goodies comes with <a href="https://github.com/arunoda/meteor-up">Meteor Up</a>. Please refer to the Meteor Up <a href="https://github.com/arunoda/meteor-up">documentation</a> for more information.</p>
</description>
      <link>http://localhost:4000/deploy-a-meteor-app-into-a-server-or-a-vm</link>
      <guid isPermaLink="true">http://localhost:4000/deploy-a-meteor-app-into-a-server-or-a-vm</guid>
      <pubDate>2013-10-01 00:00:00 +0800 | date: "%a, %d %b %Y %H:%M:%S %z"</pubDate>
    </item>
    
  </channel>
</rss>